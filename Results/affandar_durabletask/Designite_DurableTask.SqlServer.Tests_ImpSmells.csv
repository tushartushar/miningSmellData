Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DurableTask.SqlServer.Tests,DatabaseInitialization,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DatabaseInitialization.cs,Initialize,The length of the statement  "                client.Images.CreateImageAsync(new ImagesCreateParameters { FromImage = appSettings.SqlContainer.Image' Tag = appSettings.SqlContainer.Tag }' null' new NoOpProgress()).Wait(); " is 175.
Long Statement,DurableTask.SqlServer.Tests,DatabaseInitialization,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DatabaseInitialization.cs,Initialize,The length of the statement  "                var hasStarted = client.Containers.StartContainerAsync("DurableTask_SQLServer_Test"' new ContainerStartParameters()).Result; " is 124.
Long Statement,DurableTask.SqlServer.Tests,DatabaseInitialization,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DatabaseInitialization.cs,EnsureDatabaseConnectivity,The length of the statement  "            throw new Exception("Unable to open connection to SQL Server. Please ensure Docker is running and the password provided meets the requirements for a strong password (https://docs.microsoft.com/en-us/sql/relational-databases/security/strong-passwords)."); " is 254.
Long Statement,DurableTask.SqlServer.Tests,InstanceStoreSetupTeardownTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\InstanceStoreSetupTeardownTests.cs,InitializeStoreVerifyTablesExistTest,The length of the statement  "                command.CommandText = $"SELECT OBJECT_ID('{Settings.OrchestrationStateTableName}')' OBJECT_ID('{Settings.WorkItemTableName}')"; " is 127.
Long Statement,DurableTask.SqlServer.Tests,InstanceStoreSetupTeardownTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\InstanceStoreSetupTeardownTests.cs,DeleteStoreVerifyTablesDoNotExistTest,The length of the statement  "                command.CommandText = $"SELECT OBJECT_ID('{Settings.OrchestrationStateTableName}')' OBJECT_ID('{Settings.WorkItemTableName}')"; " is 127.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The length of the statement  "                .SelectMany(r => Utils.InfiniteWorkItemTestData(r.State.OrchestrationInstance.InstanceId' r.State.OrchestrationInstance.ExecutionId).Take(5)) " is 141.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The length of the statement  "            var historyEntriesDeleted = await InstanceStore.PurgeOrchestrationHistoryEventsAsync(orchestrations.ElementAt(1).State.CreatedTime' OrchestrationStateTimeRangeFilterType.OrchestrationCreatedTimeFilter); " is 202.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The length of the statement  "            var count = (await InstanceStore.GetOrchestrationHistoryEventsAsync(instance.InstanceId' instance.ExecutionId)).Count(); " is 120.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The length of the statement  "                .SelectMany(r => Utils.InfiniteWorkItemTestData(r.State.OrchestrationInstance.InstanceId' r.State.OrchestrationInstance.ExecutionId).Take(5)) " is 141.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The length of the statement  "            var historyEntriesDeleted = await InstanceStore.PurgeOrchestrationHistoryEventsAsync(orchestrations.ElementAt(1).State.LastUpdatedTime' OrchestrationStateTimeRangeFilterType.OrchestrationLastUpdatedTimeFilter); " is 210.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The length of the statement  "            var count = (await InstanceStore.GetOrchestrationHistoryEventsAsync(instance.InstanceId' instance.ExecutionId)).Count(); " is 120.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The length of the statement  "                .SelectMany(r => Utils.InfiniteWorkItemTestData(r.State.OrchestrationInstance.InstanceId' r.State.OrchestrationInstance.ExecutionId).Take(5)) " is 141.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The length of the statement  "            var historyEntriesDeleted = await InstanceStore.PurgeOrchestrationHistoryEventsAsync(orchestrations.ElementAt(1).State.CompletedTime' OrchestrationStateTimeRangeFilterType.OrchestrationCompletedTimeFilter); " is 206.
Long Statement,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The length of the statement  "            var count = (await InstanceStore.GetOrchestrationHistoryEventsAsync(instance.InstanceId' instance.ExecutionId)).Count(); " is 120.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryTest,The length of the statement  "            await InstanceStore.WriteEntitiesAsync(new InstanceEntityBase[] { expectedOrchestrationState' extraOrchestrationState }); " is 121.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryTest,The length of the statement  "            var actual = await InstanceStore.GetOrchestrationStateAsync(expectedOrchestrationState.State.OrchestrationInstance.InstanceId' expectedOrchestrationState.State.OrchestrationInstance.ExecutionId); " is 195.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryTest,The length of the statement  "            Assert.AreEqual(expectedOrchestrationState.State.OrchestrationInstance.InstanceId' actual.State.OrchestrationInstance.InstanceId); " is 130.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryTest,The length of the statement  "            Assert.AreEqual(expectedOrchestrationState.State.OrchestrationInstance.ExecutionId' actual.State.OrchestrationInstance.ExecutionId); " is 132.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryEntitiesTest,The length of the statement  "            await InstanceStore.WriteEntitiesAsync(new InstanceEntityBase[] { expectedOrchestrationState' extraOrchestrationState }); " is 121.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryEntitiesTest,The length of the statement  "            var actual = (await InstanceStore.GetEntitiesAsync(expectedOrchestrationState.State.OrchestrationInstance.InstanceId' expectedOrchestrationState.State.OrchestrationInstance.ExecutionId)).ToList(); " is 196.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryEntitiesTest,The length of the statement  "            Assert.AreEqual(expectedOrchestrationState.State.OrchestrationInstance.InstanceId' actualOrchestration.State.OrchestrationInstance.InstanceId); " is 143.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryEntitiesTest,The length of the statement  "            Assert.AreEqual(expectedOrchestrationState.State.OrchestrationInstance.ExecutionId' actualOrchestration.State.OrchestrationInstance.ExecutionId); " is 145.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyWorkItemQueryTest,The length of the statement  "            var extraWorkItemState = Utils.InfiniteWorkItemTestData(Guid.NewGuid().ToString("N")' Guid.NewGuid().ToString("N")).First(); " is 124.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyWorkItemQueryTest,The length of the statement  "            var actual = (await InstanceStore.GetOrchestrationHistoryEventsAsync(expectedInstanceId' expectedExecutionId)).ToList(); " is 120.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryByInstanceIdAllInstancesTest,The length of the statement  "            entities.Select((e' i) => { e.State.OrchestrationStatus = values[i]; e.State.OrchestrationInstance.InstanceId = instanceId; return e; }).ToList(); " is 146.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryByInstanceIdTest,The length of the statement  "            entities.Select((e' i) => { e.State.OrchestrationStatus = values[i]; e.State.OrchestrationInstance.InstanceId = instanceId; return e; }).ToList(); " is 146.
Long Statement,DurableTask.SqlServer.Tests,QueryEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\QueryEntitiesTests.cs,VerifyOrchestrationStateQueryByInstanceIdTest,The length of the statement  "            Assert.AreEqual(expectedState.State.OrchestrationInstance.ExecutionId' actualState.State.OrchestrationInstance.ExecutionId); " is 124.
Long Statement,DurableTask.SqlServer.Tests,WriteEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\WriteEntitiesTests.cs,VerifyOrchestrationStatePersistedTest,The length of the statement  "                Assert.AreEqual(entities.OfType<OrchestrationStateInstanceEntity>().Count()' count' "Incorrect Orchestration Instance row count."); " is 131.
Long Statement,DurableTask.SqlServer.Tests,WriteEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\WriteEntitiesTests.cs,VerifyWorkItemStatePersistedTest,The length of the statement  "                Assert.AreEqual(entities.OfType<OrchestrationWorkItemInstanceEntity>().Count()' count' "Incorrect Work Item row count."); " is 121.
Empty Catch Block,DurableTask.SqlServer.Tests,DatabaseInitialization,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DatabaseInitialization.cs,EnsureSqlServerContainerIsRemoved,The method has an empty catch block.
Empty Catch Block,DurableTask.SqlServer.Tests,DatabaseInitialization,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DatabaseInitialization.cs,EnsureDatabaseConnectivity,The method has an empty catch block.
Magic Number,DurableTask.SqlServer.Tests,DatabaseInitialization,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DatabaseInitialization.cs,EnsureDatabaseConnectivity,The following statement contains a magic number: const int maxAttempts = 10;
Magic Number,DurableTask.SqlServer.Tests,DatabaseInitialization,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DatabaseInitialization.cs,EnsureDatabaseConnectivity,The following statement contains a magic number: Thread.Sleep(6000);
Magic Number,DurableTask.SqlServer.Tests,DeleteEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\DeleteEntitiesTests.cs,VerifyOrchestrationStatePersistedTest,The following statement contains a magic number: entities.AddRange(Utils.InfiniteOrchestrationTestData().Take(5));
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The following statement contains a magic number: var orchestrations = Utils.InfiniteOrchestrationTestData().Take(3).ToArray();
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The following statement contains a magic number: var histories = orchestrations                  .SelectMany(r => Utils.InfiniteWorkItemTestData(r.State.OrchestrationInstance.InstanceId' r.State.OrchestrationInstance.ExecutionId).Take(5))                  .ToArray();
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The following statement contains a magic number: Assert.AreEqual(10' historyEntriesDeleted);
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The following statement contains a magic number: Assert.AreEqual(5' count);
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCreatedTimeTest,The following statement contains a magic number: orchestrations.Take(2)
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The following statement contains a magic number: var orchestrations = Utils.InfiniteOrchestrationTestData().Take(3).ToArray();
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The following statement contains a magic number: var histories = orchestrations                  .SelectMany(r => Utils.InfiniteWorkItemTestData(r.State.OrchestrationInstance.InstanceId' r.State.OrchestrationInstance.ExecutionId).Take(5))                  .ToArray();
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The following statement contains a magic number: Assert.AreEqual(10' historyEntriesDeleted);
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The following statement contains a magic number: Assert.AreEqual(5' count);
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByLastUpdatedTimeTest,The following statement contains a magic number: orchestrations.Take(2)
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The following statement contains a magic number: var orchestrations = Utils.InfiniteOrchestrationTestData().Take(3).ToArray();
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The following statement contains a magic number: var histories = orchestrations                  .SelectMany(r => Utils.InfiniteWorkItemTestData(r.State.OrchestrationInstance.InstanceId' r.State.OrchestrationInstance.ExecutionId).Take(5))                  .ToArray();
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The following statement contains a magic number: Assert.AreEqual(10' historyEntriesDeleted);
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The following statement contains a magic number: Assert.AreEqual(5' count);
Magic Number,DurableTask.SqlServer.Tests,PurgeHistoryTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\PurgeHistoryTests.cs,PurgeByCompletedTimeTest,The following statement contains a magic number: orchestrations.Take(2)
Magic Number,DurableTask.SqlServer.Tests,Utils,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\Utils.cs,InfiniteWorkItemTestData,The following statement contains a magic number: yield return new OrchestrationWorkItemInstanceEntity                  {                      EventTimestamp = DateTime.UtcNow'                      ExecutionId = executionId'                      InstanceId = instanceId'                      SequenceNumber = sequenceNumber++'                      HistoryEvent = new GenericEvent(random.Next(100)' GetRandomStringValue())                  };
Magic Number,DurableTask.SqlServer.Tests,WriteEntitiesTests,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.SqlServer.Tests\WriteEntitiesTests.cs,VerifyOrchestrationStatePersistedTest,The following statement contains a magic number: entities.AddRange(Utils.InfiniteOrchestrationTestData().Take(5));
