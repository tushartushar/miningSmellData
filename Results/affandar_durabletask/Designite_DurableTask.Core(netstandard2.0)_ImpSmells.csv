Implementation smell,Namespace,Class,File,Method,Description
Long Method,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,OnProcessWorkItemAsync,The method has 216 lines of code.
Complex Method,DurableTask.Core,OrchestrationRuntimeState,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\OrchestrationRuntimeState.cs,GenerateAbridgedEvent,Cyclomatic complexity of the method is 10
Complex Method,DurableTask.Core,ReflectionBasedTaskActivity,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\ReflectionBasedTaskActivity.cs,RunAsync,Cyclomatic complexity of the method is 8
Complex Method,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,OnProcessWorkItemSessionAsync,Cyclomatic complexity of the method is 8
Complex Method,DurableTask.Core,TaskOrchestrationExecutor,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationExecutor.cs,ProcessEvent,Cyclomatic complexity of the method is 13
Complex Method,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,DispatchAsync,Cyclomatic complexity of the method is 8
Long Parameter List,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,ExecuteWithRetries,The method has 5 parameters. Parameters: retryAction' sessionId' operation' numberOfAttempts' delayInAttemptsSecs
Long Parameter List,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,ExecuteWithRetries,The method has 5 parameters. Parameters: retryAction' sessionId' operation' numberOfAttempts' delayInAttemptsSecs
Long Parameter List,DurableTask.Core,IOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\IOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The method has 7 parameters. Parameters: workItem' newOrchestrationRuntimeState' outboundMessages' orchestratorMessages' timerMessages' continuedAsNewMessage' orchestrationState
Long Parameter List,DurableTask.Core,OrchestrationContext,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\OrchestrationContext.cs,CreateSubOrchestrationInstanceWithRetry,The method has 5 parameters. Parameters: name' version' instanceId' retryOptions' input
Long Parameter List,DurableTask.Core,OrchestrationContext,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\OrchestrationContext.cs,CreateSubOrchestrationInstance,The method has 5 parameters. Parameters: name' version' instanceId' input' tags
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceAsync,The method has 5 parameters. Parameters: name' version' instanceId' input' tags
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceAsync,The method has 6 parameters. Parameters: name' version' instanceId' input' tags' dedupeStatuses
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceWithRaisedEventAsync,The method has 5 parameters. Parameters: orchestrationType' instanceId' orchestrationInput' eventName' eventData
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceWithRaisedEventAsync,The method has 6 parameters. Parameters: orchestrationType' instanceId' orchestrationInput' dedupeStatuses' eventName' eventData
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceWithRaisedEventAsync,The method has 5 parameters. Parameters: orchestrationName' orchestrationVersion' orchestrationInput' eventName' eventData
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceWithRaisedEventAsync,The method has 6 parameters. Parameters: orchestrationName' orchestrationVersion' instanceId' orchestrationInput' eventName' eventData
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceWithRaisedEventAsync,The method has 7 parameters. Parameters: orchestrationName' orchestrationVersion' instanceId' orchestrationInput' orchestrationTags' eventName' eventData
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceWithRaisedEventAsync,The method has 8 parameters. Parameters: orchestrationName' orchestrationVersion' instanceId' orchestrationInput' orchestrationTags' dedupeStatuses' eventName' eventData
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceWithRaisedEventAsync,The method has 5 parameters. Parameters: orchestrationName' orchestrationVersion' instanceId' eventName' eventData
Long Parameter List,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,InternalCreateOrchestrationInstanceWithRaisedEventAsync,The method has 8 parameters. Parameters: orchestrationName' orchestrationVersion' orchestrationInstanceId' orchestrationInput' orchestrationTags' dedupeStatuses' eventName' eventData
Long Parameter List,DurableTask.Core,TaskOrchestrationContext,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationContext.cs,ScheduleTaskInternal,The method has 5 parameters. Parameters: name' version' taskList' resultType' parameters
Long Parameter List,DurableTask.Core,TaskOrchestrationContext,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationContext.cs,CreateSubOrchestrationInstance,The method has 5 parameters. Parameters: name' version' instanceId' input' tags
Long Parameter List,DurableTask.Core,TaskOrchestrationContext,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationContext.cs,CreateSubOrchestrationInstanceCore,The method has 5 parameters. Parameters: name' version' instanceId' input' tags
Long Parameter List,DurableTask.Core.Exceptions,SubOrchestrationFailedException,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Exceptions\SubOrchestrationFailedException.cs,SubOrchestrationFailedException,The method has 6 parameters. Parameters: eventId' scheduleId' name' version' reason' cause
Long Parameter List,DurableTask.Core.Exceptions,TaskFailedException,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Exceptions\TaskFailedException.cs,TaskFailedException,The method has 6 parameters. Parameters: eventId' scheduleId' name' version' reason' cause
Long Parameter List,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,OrchestrationRuntimeStateToRawStream,The method has 7 parameters. Parameters: newOrchestrationRuntimeState' runtimeState' dataConverter' shouldCompress' serviceBusSessionSettings' orchestrationServiceBlobStore' sessionId
Long Parameter List,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,CreateStreamForExternalStorageAsync,The method has 5 parameters. Parameters: shouldCompress' orchestrationServiceBlobStore' sessionId' dataConverter' compressedState
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,TraceEvent,The method has 7 parameters. Parameters: eventLevel' source' instanceId' executionId' sessionId' message' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,TraceEvent,The method has 7 parameters. Parameters: eventLevel' source' instanceId' executionId' sessionId' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Trace,The method has 6 parameters. Parameters: source' instanceId' executionId' sessionId' message' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Trace,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Trace,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' info' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Debug,The method has 6 parameters. Parameters: source' instanceId' executionId' sessionId' message' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Debug,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Debug,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' info' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Info,The method has 6 parameters. Parameters: source' instanceId' executionId' sessionId' message' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Info,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Info,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' info' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Warning,The method has 6 parameters. Parameters: source' instanceId' executionId' sessionId' message' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Warning,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Warning,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Error,The method has 6 parameters. Parameters: source' instanceId' executionId' sessionId' message' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Error,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Error,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Critical,The method has 6 parameters. Parameters: source' instanceId' executionId' sessionId' message' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Critical,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,Critical,The method has 7 parameters. Parameters: source' instanceId' executionId' sessionId' message' exception' eventType
Long Parameter List,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The method has 8 parameters. Parameters: eventId' source' instanceId' executionId' sessionId' message' info' eventType
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceSession,The method has 5 parameters. Parameters: eventLevel' eventType' sessionId' format' args
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceInstance,The method has 5 parameters. Parameters: eventLevel' eventType' orchestrationInstance' format' args
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceException,The method has 5 parameters. Parameters: eventLevel' eventType' exception' format' args
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionInstance,The method has 5 parameters. Parameters: eventLevel' eventType' orchestrationInstance' exception' generateMessage
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionInstance,The method has 6 parameters. Parameters: eventLevel' eventType' orchestrationInstance' exception' format' args
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionSession,The method has 5 parameters. Parameters: eventLevel' eventType' sessionId' exception' generateMessage
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionSession,The method has 6 parameters. Parameters: eventLevel' eventType' sessionId' exception' format' args
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionSession,The method has 6 parameters. Parameters: eventLevel' eventType' sessionId' exceptionDispatchInfo' format' args
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionCore,The method has 7 parameters. Parameters: eventLevel' eventType' iid' eid' exceptionDispatchInfo' format' args
Long Parameter List,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionCore,The method has 6 parameters. Parameters: eventLevel' eventType' iid' eid' exception' generateMessage
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter OrchestrationTransientErrorBackOffSecs is 38.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter OrchestrationNonTransientErrorBackOffSecs is 41.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter OrchestrationDefaultDispatcherCount is 35.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter OrchestrationDefaultMaxConcurrentItems is 38.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter ActivityTransientErrorBackOffSecs is 33.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter ActivityNonTransientErrorBackOffSecs is 36.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter ActivityDefaultDispatcherCount is 30.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter ActivityDefaultMaxConcurrentItems is 33.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter TrackingTransientErrorBackOffSecs is 33.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter TrackingNonTransientErrorBackOffSecs is 36.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter TrackingDefaultDispatcherCount is 30.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter TrackingDefaultMaxConcurrentItems is 33.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter CompressionTypeGzipPropertyValue is 32.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter CompressionTypeNonePropertyValue is 32.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter MessageOverflowThresholdInBytesDefault is 38.
Long Identifier,DurableTask.Core,FrameworkConstants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\FrameworkConstants.cs,,The length of the parameter SessionOverflowThresholdInBytesDefault is 38.
Long Identifier,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,OnProcessWorkItemAsync,The length of the parameter originalOrchestrationRuntimeState is 33.
Long Identifier,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,OnProcessWorkItemAsync,The length of the parameter workflowInstanceCompletedMessage is 32.
Long Identifier,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,ProcessWorkflowCompletedTaskDecision,The length of the parameter subOrchestrationCompletedEvent is 30.
Long Identifier,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,ProcessScheduleTaskDecision,The length of the parameter scheduleTaskOrchestratorAction is 30.
Long Identifier,DurableTask.Core,TaskOrchestrationExecutor,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationExecutor.cs,TaskOrchestrationExecutor,The length of the parameter eventBehaviourForContinueAsNew is 30.
Long Identifier,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,,The length of the parameter BackOffIntervalOnInvalidOperationSecs is 37.
Long Identifier,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,,The length of the parameter shutdownCancellationTokenSource is 31.
Long Identifier,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,,The length of the parameter GetDelayInSecondsAfterOnFetchException is 38.
Long Identifier,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,,The length of the parameter GetDelayInSecondsAfterOnProcessException is 40.
Long Statement,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,ExecuteWithRetries,The length of the statement  "                        $"Error attempting operation {operation}. Attempt count: {numberOfAttempts - retryCount}. Exception: {exception.Message}\n\t{exception.StackTrace}"); " is 149.
Long Statement,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,ExecuteWithRetries,The length of the statement  "            TraceHelper.Trace(TraceEventType.Error' "ExecuteWithRetry-RetriesExhausted"' "Exhausted all retries for operation " + operation); " is 129.
Long Statement,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,ExecuteWithRetries,The length of the statement  "            TraceHelper.TraceExceptionSession(TraceEventType.Error' "ExecuteWithRetryRetriesExhausted"' sessionId' lastException).Throw(); " is 126.
Long Statement,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,ExecuteWithRetries,The length of the statement  "                        $"Error attempting operation {operation}. Attempt count: {numberOfAttempts - retryCount}. Exception: {exception.Message}\n\t{exception.StackTrace}"); " is 149.
Long Statement,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,ExecuteWithRetries,The length of the statement  "            // This is a noop code since TraceExceptionSession above will rethrow the cached exception however the compiler doesn't see it " is 126.
Long Statement,DurableTask.Core,RetryInterceptor<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\RetryInterceptor.cs,ComputeNextDelay,The length of the statement  "                TraceHelper.TraceExceptionInstance(TraceEventType.Error' "RetryInterceptor-ComputeNextDelayException"' this.context.OrchestrationInstance' e); " is 142.
Long Statement,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,OnProcessWorkItemAsync,The length of the statement  "                renewTask = Task.Factory.StartNew(() => RenewUntil(workItem' renewCancellationTokenSource.Token)' renewCancellationTokenSource.Token); " is 134.
Long Statement,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,OnProcessWorkItemAsync,The length of the statement  "                        TraceHelper.TraceExceptionInstance(TraceEventType.Error' "TaskActivityDispatcher-ProcessTaskFailure"' taskMessage.OrchestrationInstance' e); " is 140.
Long Statement,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,OnProcessWorkItemAsync,The length of the statement  "                        TraceHelper.TraceExceptionInstance(TraceEventType.Error' "TaskActivityDispatcher-ProcessException"' taskMessage.OrchestrationInstance' e); " is 138.
Long Statement,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The length of the statement  "                        TraceHelper.Trace(TraceEventType.Information' "TaskActivityDispatcher-RenewLock"' "Renewing lock for work item id {0}"' workItem.Id); " is 133.
Long Statement,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The length of the statement  "                        TraceHelper.Trace(TraceEventType.Information' "TaskActivityDispatcher-RenewLockAt"' "Next renew for work item id '{0}' at '{1}'"' workItem.Id' renewAt); " is 152.
Long Statement,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The length of the statement  "                        TraceHelper.TraceException(TraceEventType.Warning' "TaskActivityDispatcher-RenewLockFailure"' exception' "Failed to renew lock for work item {0}"' workItem.Id); " is 160.
Long Statement,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceAsync,The length of the statement  "            return InternalCreateOrchestrationInstanceWithRaisedEventAsync(name' version' instanceId' input' null' null' null' null); " is 121.
Long Statement,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceAsync,The length of the statement  "            return InternalCreateOrchestrationInstanceWithRaisedEventAsync(name' version' instanceId' input' tags' null' null' null); " is 121.
Long Statement,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,CreateOrchestrationInstanceAsync,The length of the statement  "            return InternalCreateOrchestrationInstanceWithRaisedEventAsync(name' version' instanceId' input' tags' dedupeStatuses' null' null); " is 131.
Long Statement,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,InternalCreateOrchestrationInstanceWithRaisedEventAsync,The length of the statement  "            await Task.WhenAll(taskMessages.Where(t => !(t.Event is EventRaisedEvent)).Select(sEvent => ServiceClient.CreateTaskOrchestrationAsync(sEvent' dedupeStatuses))); " is 161.
Long Statement,DurableTask.Core,TaskHubClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskHubClient.cs,InternalCreateOrchestrationInstanceWithRaisedEventAsync,The length of the statement  "            await ServiceClient.SendTaskOrchestrationMessageBatchAsync(taskMessages.Where(t => (t.Event is EventRaisedEvent)).ToArray()); " is 125.
Long Statement,DurableTask.Core,TaskOrchestrationContext,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationContext.cs,HandleTaskScheduledEvent,The length of the statement  "                    $"TaskScheduledEvent: {scheduledEvent.EventId} {scheduledEvent.EventType} {scheduledEvent.Name} {scheduledEvent.Version}"); " is 123.
Long Statement,DurableTask.Core,TaskOrchestrationContext,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationContext.cs,HandleEventSentEvent,The length of the statement  "                    $"EventSentEvent: {eventSentEvent.EventId} {eventSentEvent.EventType} {eventSentEvent.Name} {eventSentEvent.InstanceId}"); " is 122.
Long Statement,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,OnProcessWorkItemSessionAsync,The length of the statement  "                            TraceHelper.Trace(TraceEventType.Verbose' "OnProcessWorkItemSession-MaxOperations"' "Failed to acquire concurrent session lock."); " is 130.
Long Statement,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,OnProcessWorkItemSessionAsync,The length of the statement  "                    TraceHelper.Trace(TraceEventType.Verbose' "OnProcessWorkItemSession-StartFetch"' "Starting fetch of existing session."); " is 120.
Long Statement,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,OnProcessWorkItemAsync,The length of the statement  "                        TraceHelper.TraceSession(TraceEventType.Information' "TaskOrchestrationDispatcher-DeletingSessionState"' workItem.InstanceId' "Deleting session state"); " is 152.
Long Statement,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,ExecuteOrchestrationAsync,The length of the statement  "            var executor = new TaskOrchestrationExecutor(runtimeState' taskOrchestration' orchestrationService.EventBehaviourForContinueAsNew); " is 131.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,StartAsync,The length of the statement  "                        throw TraceHelper.TraceException(TraceEventType.Error' "WorkItemDispatcherStart-AlreadyStarted"' new InvalidOperationException($"WorkItemDispatcher '{this.name}' has already started")); " is 185.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,StartAsync,The length of the statement  "                    TraceHelper.Trace(TraceEventType.Information' "WorkItemDispatcherStart"' $"WorkItemDispatcher('{this.name}') starting. Id {this.id}."); " is 135.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,StopAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Information' "WorkItemDispatcherStop-Begin"' $"WorkItemDispatcher('{this.name}') stopping. Id {this.id}."); " is 140.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,StopAsync,The length of the statement  "                        TraceHelper.Trace(TraceEventType.Information' "WorkItemDispatcherStop-Waiting"' $"WorkItemDispatcher('{this.name}') waiting to stop. Id {this.id}. WorkItemCount: {this.concurrentWorkItemCount}' ActiveFetchers: {this.activeFetchers}"); " is 234.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,StopAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Information' "WorkItemDispatcherStop-End"' $"WorkItemDispatcher('{this.name}') stopped. Id {this.id}."); " is 137.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,DispatchAsync,The length of the statement  "                        GetFormattedLog(dispatcherId' $"Max concurrent operations ({this.concurrentWorkItemCount}) are already in progress. Still waiting for next accept.")); " is 150.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,DispatchAsync,The length of the statement  "                        GetFormattedLog(dispatcherId' $"Starting fetch with timeout of {DefaultReceiveTimeout} ({this.concurrentWorkItemCount}/{MaxConcurrentWorkItems} max)")); " is 152.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,DispatchAsync,The length of the statement  "                        GetFormattedLog(dispatcherId' $"After fetch ({timer.ElapsedMilliseconds} ms) ({this.concurrentWorkItemCount}/{MaxConcurrentWorkItems} max)")); " is 142.
Long Statement,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,DispatchAsync,The length of the statement  "                        GetFormattedLog(dispatcherId' $"TaskCanceledException while fetching workItem' should be harmless: {exception.Message}")); " is 122.
Long Statement,DurableTask.Core.Serializing,PackageUpgradeSerializationBinder,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\PackageUpgradeSerializationBinder.cs,BindToType,The length of the statement  "                if (string.IsNullOrWhiteSpace(assemblyName) || UpgradeableAssemblyNames.Contains(separatorIndex < 0 ? assemblyName : assemblyName.Substring(0' assemblyName.IndexOf(''')))) " is 171.
Long Statement,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,OrchestrationRuntimeStateToRawStream,The length of the statement  "                throw new OrchestrationException($"Session state size of {runtimeState.CompressedSize} exceeded the termination threshold of {serviceBusSessionSettings.SessionMaxSizeInBytes} bytes"); " is 183.
Long Statement,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,OrchestrationRuntimeStateToRawStream,The length of the statement  "                    $"Session state size of {runtimeState.CompressedSize} exceeded the termination threshold of {serviceBusSessionSettings.SessionOverflowThresholdInBytes} bytes." + " is 161.
Long Statement,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,OrchestrationRuntimeStateToRawStream,The length of the statement  "                return await CreateStreamForExternalStorageAsync(shouldCompress' orchestrationServiceBlobStore' sessionId' dataConverter' compressedState); " is 139.
Long Statement,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,RawStreamToRuntimeState,The length of the statement  "            OrchestrationRuntimeState runtimeState = GetOrCreateInstanceState(sessionStream' sessionId' dataConverter' out string blobKey); " is 127.
Long Statement,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,RawStreamToRuntimeState,The length of the statement  "                    $"Please provide an implementation of {nameof(IOrchestrationServiceBlobStore)} for external storage to load the runtime state."); " is 129.
Long Statement,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,DeserializeToRuntimeStateWithFallback,The length of the statement  "                    $"Failed to deserialize session state to OrchestrationSessionState object: {serializedState}. More info: {exception.StackTrace}"); " is 130.
Long Statement,DurableTask.Core.Serializing,RuntimeStateStreamConverter,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Serializing\RuntimeStateStreamConverter.cs,DeserializeToRuntimeStateWithFallback,The length of the statement  "                        $"Failed to deserialize session state to OrchestrationRuntimeState object: {serializedState}. More info: {e.StackTrace}"); " is 122.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,Trace,The length of the statement  "                () => DefaultEventSource.Log.TraceEvent(eventLevel' Source' string.Empty' string.Empty' string.Empty' generateMessage()' eventType)); " is 133.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,Trace,The length of the statement  "                () => DefaultEventSource.Log.TraceEvent(eventLevel' Source' string.Empty' string.Empty' string.Empty' FormatString(format' args)' eventType)); " is 142.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceSession,The length of the statement  "                () => DefaultEventSource.Log.TraceEvent(eventLevel' Source' string.Empty' string.Empty' sessionId' generateMessage()' eventType)); " is 130.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceSession,The length of the statement  "                () => DefaultEventSource.Log.TraceEvent(eventLevel' Source' string.Empty' string.Empty' sessionId' FormatString(format' args)' eventType)); " is 139.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceException,The length of the statement  "            return TraceExceptionCore(eventLevel' eventType' string.Empty' string.Empty' ExceptionDispatchInfo.Capture(exception)' format' args).SourceException; " is 149.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionSession,The length of the statement  "            return TraceExceptionCore(eventLevel' eventType' sessionId' string.Empty' ExceptionDispatchInfo.Capture(exception)' string.Empty).SourceException; " is 146.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionSession,The length of the statement  "            return TraceExceptionCore(eventLevel' eventType' sessionId' string.Empty' ExceptionDispatchInfo.Capture(exception)' format' args).SourceException; " is 146.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,TraceExceptionCore,The length of the statement  "                () => DefaultEventSource.Log.TraceEvent(eventLevel' Source' iid' eid' string.Empty' FormatString(newFormat' args)' eventType)); " is 127.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,FormatString,The length of the statement  "                string message = string.Format(CultureInfo.InvariantCulture' "String FormatException for '{0}'. Args count: {1}. Exception: {2}"' formatted' args.Length' ex); " is 158.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,FormatString,The length of the statement  "                DefaultEventSource.Log.TraceEvent(TraceEventType.Error' Source' string.Empty' string.Empty' string.Empty' message' "LogFormattingFailed"); " is 138.
Long Statement,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,ExceptionHandlingWrapper,The length of the statement  "                    DefaultEventSource.Log.TraceEvent(TraceEventType.Error' Source' string.Empty' string.Empty' string.Empty' exception' "WriteEventFailed"); " is 137.
Complex Conditional,DurableTask.Core.Common,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Common\Utils.cs,IsGzipStream,The conditional expression  "stream == null || !stream.CanRead || !stream.CanSeek || stream.Length < FullGzipHeaderLength"  is complex.
Empty Catch Block,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,OnProcessWorkItemAsync,The method has an empty catch block.
Empty Catch Block,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The method has an empty catch block.
Empty Catch Block,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The method has an empty catch block.
Empty Catch Block,DurableTask.Core.Tracing,TraceHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\TraceHelper.cs,ExceptionHandlingWrapper,The method has an empty catch block.
Magic Number,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The following statement contains a magic number: DateTime renewAt = workItem.LockedUntilUtc.Subtract(TimeSpan.FromSeconds(30));
Magic Number,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The following statement contains a magic number: await Utils.DelayWithCancellation(TimeSpan.FromSeconds(5)' cancellationToken);
Magic Number,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,RenewUntil,The following statement contains a magic number: renewAt = workItem.LockedUntilUtc.Subtract(TimeSpan.FromSeconds(30));
Magic Number,DurableTask.Core,TaskActivityDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskActivityDispatcher.cs,AdjustRenewAt,The following statement contains a magic number: DateTime maxRenewAt = DateTime.UtcNow.Add(TimeSpan.FromSeconds(30));
Magic Number,DurableTask.Core,TaskOrchestrationDispatcher,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationDispatcher.cs,TaskOrchestrationDispatcher,The following statement contains a magic number: var maxConcurrentSessions = (int)Math.Ceiling(this.dispatcher.MaxConcurrentWorkItems / 2.0);
Magic Number,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,StopAsync,The following statement contains a magic number: var retryCount = 7;
Magic Number,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,StopAsync,The following statement contains a magic number: await Task.Delay(4000);
Magic Number,DurableTask.Core,WorkItemDispatcher<T>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\WorkItemDispatcher.cs,DispatchAsync,The following statement contains a magic number: !await this.concurrencyLock.WaitAsync(TimeSpan.FromSeconds(5))
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: const int EventDataCount = 7;
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Magic Number,DurableTask.Core.Tracing,DefaultEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\Tracing\DefaultEventSource.cs,WriteEventInternal,The following statement contains a magic number: fixed (char* chPtrInstanceId = instanceId)              fixed (char* chPtrExecutionId = executionId)              fixed (char* chPtrSessionId = sessionId)              fixed (char* chPtrMessage = message)              fixed (char* chPtrInfo = info)              fixed (char* chPtrEventType = eventType)              {                  EventData* data = stackalloc EventData[EventDataCount];                  data[0].DataPointer = (IntPtr)chPtrSource;                  data[0].Size = (source.Length + 1) * 2;                  data[1].DataPointer = (IntPtr)chPtrInstanceId;                  data[1].Size = (instanceId.Length + 1) * 2;                  data[2].DataPointer = (IntPtr)chPtrExecutionId;                  data[2].Size = (executionId.Length + 1) * 2;                  data[3].DataPointer = (IntPtr)chPtrSessionId;                  data[3].Size = (sessionId.Length + 1) * 2;                  data[4].DataPointer = (IntPtr)chPtrMessage;                  data[4].Size = (message.Length + 1) * 2;                  data[5].DataPointer = (IntPtr)chPtrInfo;                  data[5].Size = (info.Length + 1) * 2;                  data[6].DataPointer = (IntPtr)chPtrEventType;                  data[6].Size = (eventType.Length + 1) * 2;                    // todo: use WriteEventWithRelatedActivityIdCore for correlation                  WriteEventCore(eventId' EventDataCount' data);              }
Missing Default,DurableTask.Core,TaskOrchestrationExecutor,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.Core\TaskOrchestrationExecutor.cs,ProcessEvent,The following switch statement is missing a default case: switch (historyEvent.EventType)              {                  case EventType.ExecutionStarted:                      var executionStartedEvent = (ExecutionStartedEvent)historyEvent;                      this.result = this.taskOrchestration.Execute(this.context' executionStartedEvent.Input);                      break;                  case EventType.ExecutionTerminated:                      this.context.HandleExecutionTerminatedEvent((ExecutionTerminatedEvent)historyEvent);                      break;                  case EventType.TaskScheduled:                      this.context.HandleTaskScheduledEvent((TaskScheduledEvent)historyEvent);                      break;                  case EventType.TaskCompleted:                      this.context.HandleTaskCompletedEvent((TaskCompletedEvent)historyEvent);                      break;                  case EventType.TaskFailed:                      this.context.HandleTaskFailedEvent((TaskFailedEvent)historyEvent);                      break;                  case EventType.SubOrchestrationInstanceCreated:                      this.context.HandleSubOrchestrationCreatedEvent((SubOrchestrationInstanceCreatedEvent)historyEvent);                      break;                  case EventType.SubOrchestrationInstanceCompleted:                      this.context.HandleSubOrchestrationInstanceCompletedEvent(                          (SubOrchestrationInstanceCompletedEvent)historyEvent);                      break;                  case EventType.SubOrchestrationInstanceFailed:                      this.context.HandleSubOrchestrationInstanceFailedEvent((SubOrchestrationInstanceFailedEvent)historyEvent);                      break;                  case EventType.TimerCreated:                      this.context.HandleTimerCreatedEvent((TimerCreatedEvent)historyEvent);                      break;                  case EventType.TimerFired:                      this.context.HandleTimerFiredEvent((TimerFiredEvent)historyEvent);                      break;                  case EventType.EventSent:                      this.context.HandleEventSentEvent((EventSentEvent)historyEvent);                      break;                  case EventType.EventRaised:                      if (this.skipCarryOverEvents || !this.context.HasContinueAsNew)                      {                          var eventRaisedEvent = (EventRaisedEvent)historyEvent;                          this.taskOrchestration.RaiseEvent(this.context' eventRaisedEvent.Name' eventRaisedEvent.Input);                      }                      else                      {                          this.context.AddEventToNextIteration(historyEvent);                      }                      break;              }
