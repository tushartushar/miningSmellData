Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DurableTask.Stress.Tests,Program,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.Stress.Tests\Program.cs,Main,The length of the statement  "                            string connectionString = config.ConnectionStrings.ConnectionStrings["Microsoft.ServiceBus.ConnectionString"].ConnectionString; " is 127.
Long Statement,DurableTask.Stress.Tests,Program,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.Stress.Tests\Program.cs,Main,The length of the statement  "                                instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(DriverOrchestration)' instanceId' driverConfig).Result; " is 120.
Long Statement,DurableTask.Stress.Tests,Program,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.Stress.Tests\Program.cs,Main,The length of the statement  "                            string elapsedTime = $"{totalTime.Hours:00}:{totalTime.Minutes:00}:{totalTime.Seconds:00}.{totalTime.Milliseconds / 10:00}"; " is 124.
Long Statement,DurableTask.Stress.Tests,Program,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.Stress.Tests\Program.cs,WaitForInstance,The length of the statement  "                    Console.WriteLine($"Error retrieving state for instance [instanceId: '{instance.InstanceId}'' executionId: '{instance.ExecutionId}']."); " is 136.
Magic Number,DurableTask.Stress.Tests,Program,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.Stress.Tests\Program.cs,Main,The following statement contains a magic number: parserResult.WithParsed(                          options =>                          {                              string connectionString = config.ConnectionStrings.ConnectionStrings["Microsoft.ServiceBus.ConnectionString"].ConnectionString;                              string taskHubName = config.AppSettings.Settings["TaskHubName"].Value;                                  IOrchestrationServiceInstanceStore instanceStore = new AzureTableInstanceStore(taskHubName' tableConnectionString);                                var settings = new ServiceBusOrchestrationServiceSettings                              {                                  TaskOrchestrationDispatcherSettings =                                  {                                      CompressOrchestrationState = bool.Parse(config.AppSettings.Settings["CompressOrchestrationState"].Value)'                                      MaxConcurrentOrchestrations = int.Parse(config.AppSettings.Settings["MaxConcurrentOrchestrations"].Value)                                  }'                                  TaskActivityDispatcherSettings =                                  {                                      MaxConcurrentActivities = int.Parse(config.AppSettings.Settings["MaxConcurrentActivities"].Value)                                  }                              };                                var orchestrationServiceAndClient =                                  new ServiceBusOrchestrationService(connectionString' taskHubName' instanceStore' null' settings);                                  var taskHubClient = new TaskHubClient(orchestrationServiceAndClient);                              var taskHub = new TaskHubWorker(orchestrationServiceAndClient);                                if (options.CreateHub)                              {                                  orchestrationServiceAndClient.CreateIfNotExistsAsync().Wait();                              }                                OrchestrationInstance instance;                              string instanceId = options.StartInstance;                                if (!string.IsNullOrWhiteSpace(instanceId))                              {                                  var driverConfig = new DriverOrchestrationData                                  {                                      NumberOfIteration = int.Parse(config.AppSettings.Settings["DriverOrchestrationIterations"].Value)'                                      NumberOfParallelTasks = int.Parse(config.AppSettings.Settings["DriverOrchestrationParallelTasks"].Value)'                                      SubOrchestrationData = new TestOrchestrationData                                      {                                          NumberOfParallelTasks = int.Parse(config.AppSettings.Settings["ChildOrchestrationParallelTasks"].Value)'                                          NumberOfSerialTasks = int.Parse(config.AppSettings.Settings["ChildOrchestrationSerialTasks"].Value)'                                          MaxDelayInMinutes = int.Parse(config.AppSettings.Settings["TestTaskMaxDelayInMinutes"].Value)'                                      }                                  };                                    instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(DriverOrchestration)' instanceId' driverConfig).Result;                              }                              else                              {                                  instance = new OrchestrationInstance { InstanceId = options.InstanceId };                              }                                Console.WriteLine($"Orchestration starting: {DateTime.Now}");                              Stopwatch stopWatch = Stopwatch.StartNew();                                var testTask = new TestTask();                              taskHub.AddTaskActivities(testTask);                              taskHub.AddTaskOrchestrations(typeof(DriverOrchestration));                              taskHub.AddTaskOrchestrations(typeof(TestOrchestration));                              taskHub.StartAsync().Wait();                                int testTimeoutInSeconds = int.Parse(config.AppSettings.Settings["TestTimeoutInSeconds"].Value);                              OrchestrationState state = WaitForInstance(taskHubClient' instance' testTimeoutInSeconds);                              stopWatch.Stop();                              Console.WriteLine($"Orchestration Status: {state.OrchestrationStatus}");                              Console.WriteLine($"Orchestration Result: {state.Output}");                              Console.WriteLine($"Counter: {testTask.Counter}");                                TimeSpan totalTime = stopWatch.Elapsed;                              string elapsedTime = $"{totalTime.Hours:00}:{totalTime.Minutes:00}:{totalTime.Seconds:00}.{totalTime.Milliseconds / 10:00}";                              Console.WriteLine($"Total Time: {elapsedTime}");                              Console.ReadLine();                                taskHub.StopAsync().Wait();                          })                      .WithNotParsed(errors => Console.Error.WriteLine(Options.GetUsage(parserResult)));
Magic Number,DurableTask.Stress.Tests,Program,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.Stress.Tests\Program.cs,WaitForInstance,The following statement contains a magic number: var sleepForSeconds = 30;
Magic Number,DurableTask.Stress.Tests,Program,D:\research\architectureSmells\repos\affandar_durabletask\Test\DurableTask.Stress.Tests\Program.cs,WaitForInstance,The following statement contains a magic number: System.Threading.Thread.Sleep(sleepForSeconds * 1000);
