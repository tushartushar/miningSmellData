Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,,The length of the parameter MergeOrchestrationStateInstanceEntityQuery is 42.
Long Identifier,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,,The length of the parameter MergeOrchestrationWorkItemInstanceEntityQuery is 45.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,DeleteEntitiesAsync,The length of the statement  "                        command.AddStatement($"DELETE FROM {settings.OrchestrationStateTableName} WHERE InstanceId = @instanceId AND ExecutionId = @executionId"' " is 137.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,DeleteEntitiesAsync,The length of the statement  "                            new { instanceId = state.State.OrchestrationInstance.InstanceId' executionId = state.State.OrchestrationInstance.ExecutionId }); " is 128.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,DeleteEntitiesAsync,The length of the statement  "                        command.AddStatement($"DELETE FROM {settings.WorkItemTableName} WHERE InstanceId = @instanceId AND ExecutionId = @executionId AND SequenceNumber = @sequenceNumber"' " is 164.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,DeleteEntitiesAsync,The length of the statement  "                            new { instanceId = workItem.InstanceId' executionId = workItem.ExecutionId' sequenceNumber = workItem.SequenceNumber }); " is 120.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetEntitiesAsync,The length of the statement  "                command.CommandText = $"SELECT StateData FROM {settings.OrchestrationStateTableName} WHERE InstanceId = @instanceId AND ExecutionId = @executionId"; " is 148.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetEntitiesAsync,The length of the statement  "                        entities.Add(new OrchestrationStateInstanceEntity { State = dataConverter.Deserialize<OrchestrationState>(reader.GetString(0)) }); " is 130.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetOrchestrationHistoryEventsAsync,The length of the statement  "                command.CommandText = $"SELECT InstanceId' ExecutionId' EventTimestamp' SequenceNumber' HistoryEvent FROM {settings.WorkItemTableName} WHERE InstanceId = @instanceId AND ExecutionId = @executionId ORDER BY SequenceNumber"; " is 222.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "                        entities.Add(new OrchestrationStateInstanceEntity { State = dataConverter.Deserialize<OrchestrationState>(reader.GetFieldValue<string>(0)) }); " is 142.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "                command.CommandText = $"SELECT TOP 1 StateData FROM {settings.OrchestrationStateTableName} WHERE InstanceId = @instanceId AND ExecutionId = @executionId"; " is 154.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "                return new OrchestrationStateInstanceEntity { State = dataConverter.Deserialize<OrchestrationState>(value.ToString()) }; " is 120.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,InitializeStoreAsync,The length of the statement  "                            CONSTRAINT [PK_{settings.SchemaName}_{settings.HubName}{SqlServerInstanceStoreSettings.OrchestrationTable}_InstanceId_ExecutionId] PRIMARY KEY CLUSTERED ([InstanceId]' [ExecutionId])) " is 183.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,InitializeStoreAsync,The length of the statement  "                            CONSTRAINT [PK_{settings.SchemaName}_{settings.HubName}{SqlServerInstanceStoreSettings.WorkitemTable}_InstanceId_ExecutionId_SequenceNumber] PRIMARY KEY CLUSTERED ([InstanceId]' [ExecutionId]' [SequenceNumber])) " is 211.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,PurgeOrchestrationHistoryEventsAsync,The length of the statement  "            var deleteStatement = $@"DELETE h FROM {settings.WorkItemTableName} h JOIN {settings.OrchestrationStateTableName} e ON e.InstanceId = h.InstanceId AND e.ExecutionId = h.ExecutionId "; " is 183.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,ValidateSettings,The length of the statement  "            if (settings.GetDatabaseConnection == null) throw new ArgumentException($"{nameof(settings.GetDatabaseConnection)} cannot be null."); " is 133.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,ValidateSettings,The length of the statement  "            if (sqlIdentifierRegex.IsMatch(settings.SchemaName) == false) throw new ArgumentException($"{nameof(settings.SchemaName)} must be a valid SQL Identifier"); " is 155.
Long Statement,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,ValidateSettings,The length of the statement  "            if (sqlIdentifierRegex.IsMatch(settings.HubName) == false) throw new ArgumentException($"{nameof(settings.HubName)} must be a valid SQL Identifier"); " is 149.
Magic Number,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetOrchestrationHistoryEventsAsync,The following statement contains a magic number: entities.Add(new OrchestrationWorkItemInstanceEntity                      {                          InstanceId = reader.GetFieldValue<string>(0)'                          ExecutionId = reader.GetFieldValue<string>(1)'                          EventTimestamp = reader.GetFieldValue<DateTime>(2)'                          SequenceNumber = reader.GetFieldValue<long>(3)'                          HistoryEvent = dataConverter.Deserialize<HistoryEvent>(reader.GetFieldValue<string>(4))                      });
Magic Number,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetOrchestrationHistoryEventsAsync,The following statement contains a magic number: entities.Add(new OrchestrationWorkItemInstanceEntity                      {                          InstanceId = reader.GetFieldValue<string>(0)'                          ExecutionId = reader.GetFieldValue<string>(1)'                          EventTimestamp = reader.GetFieldValue<DateTime>(2)'                          SequenceNumber = reader.GetFieldValue<long>(3)'                          HistoryEvent = dataConverter.Deserialize<HistoryEvent>(reader.GetFieldValue<string>(4))                      });
Magic Number,DurableTask.SqlServer.Tracking,SqlServerInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.SqlServer\Tracking\SqlServerInstanceStore.cs,GetOrchestrationHistoryEventsAsync,The following statement contains a magic number: entities.Add(new OrchestrationWorkItemInstanceEntity                      {                          InstanceId = reader.GetFieldValue<string>(0)'                          ExecutionId = reader.GetFieldValue<string>(1)'                          EventTimestamp = reader.GetFieldValue<DateTime>(2)'                          SequenceNumber = reader.GetFieldValue<long>(3)'                          HistoryEvent = dataConverter.Deserialize<HistoryEvent>(reader.GetFieldValue<string>(4))                      });
