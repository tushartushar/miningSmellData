Implementation smell,Namespace,Class,File,Method,Description
Long Method,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Serialize,The method has 182 lines of code.
Long Method,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The method has 141 lines of code.
Long Method,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The method has 127 lines of code.
Long Method,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The method has 133 lines of code.
Long Method,Elasticsearch.Net.Utf8Json,CompiledMethods,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.NonGeneric.cs,CompiledMethods,The method has 118 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The method has 147 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The method has 122 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The method has 103 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The method has 122 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The method has 122 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The method has 140 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The method has 116 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The method has 115 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The method has 147 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,DiyFpStrtod,The method has 102 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,StringToIeee,The method has 347 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Internal.Emit,MetaType,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\MetaType.cs,MetaType,The method has 166 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The method has 210 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildAnonymousFormatter,The method has 131 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,The method has 182 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildDeserialize,The method has 142 lines of code.
Long Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,EmitNewObject,The method has 120 lines of code.
Complex Method,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,Cyclomatic complexity of the method is 9
Complex Method,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,Cyclomatic complexity of the method is 18
Complex Method,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,Cyclomatic complexity of the method is 12
Complex Method,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,Cyclomatic complexity of the method is 18
Complex Method,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,Cyclomatic complexity of the method is 11
Complex Method,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net,AuditEventExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Auditing\AuditEvent.cs,GetAuditDiagnosticEventName,Cyclomatic complexity of the method is 13
Complex Method,Elasticsearch.Net,CertificateValidations,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\CertificateValidations.cs,ValidIntermediateCa,Cyclomatic complexity of the method is 9
Complex Method,Elasticsearch.Net,ElasticsearchUrlFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticsearchUrlFormatter.cs,CreateString,Cyclomatic complexity of the method is 9
Complex Method,Elasticsearch.Net,RecyclableMemoryStream,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStream.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,Elasticsearch.Net,RecyclableMemoryStream,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStream.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net,DynamicValue,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\Dynamic\DynamicValue.cs,TryParse,Cyclomatic complexity of the method is 13
Complex Method,Elasticsearch.Net,DynamicValue,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\Dynamic\DynamicValue.cs,TryConvert,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,Cyclomatic complexity of the method is 25
Complex Method,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Serialize,Cyclomatic complexity of the method is 44
Complex Method,Elasticsearch.Net,PipelineException,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\PipelineException.cs,GetMessage,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,NextNode,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net,PostData<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\PostData.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net,PostData<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\PostData.cs,WriteAsync,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,Cyclomatic complexity of the method is 23
Complex Method,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,Cyclomatic complexity of the method is 18
Complex Method,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadBoolean,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadNextCore,Cyclomatic complexity of the method is 13
Complex Method,Elasticsearch.Net.Utf8Json,JsonSerializer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json,JsonSerializer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.cs,DeserializeAsync,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net.Utf8Json,JsonSerializer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.cs,WritePrettyPrint,Cyclomatic complexity of the method is 11
Complex Method,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,Cyclomatic complexity of the method is 13
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,Cyclomatic complexity of the method is 23
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,Cyclomatic complexity of the method is 26
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,Cyclomatic complexity of the method is 19
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,Cyclomatic complexity of the method is 22
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,Cyclomatic complexity of the method is 20
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,DictionaryFormatterBase<TKey;TValue;TIntermediate;TEnumerator;TDictionary>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DictionaryFormatter.cs,Serialize,Cyclomatic complexity of the method is 13
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,DynamicObjectTypeFallbackFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DynamicObjectTypeFallbackFormatter.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ThreeDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,ThreeDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,FourDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,FourDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,Cyclomatic complexity of the method is 25
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Deserialize,Cyclomatic complexity of the method is 12
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,Cyclomatic complexity of the method is 9
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,Cyclomatic complexity of the method is 11
Complex Method,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,EmitSearchNextCore,Cyclomatic complexity of the method is 9
Complex Method,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,Cyclomatic complexity of the method is 11
Complex Method,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,Cyclomatic complexity of the method is 21
Complex Method,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,Cyclomatic complexity of the method is 23
Complex Method,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,ReadBoolean,Cyclomatic complexity of the method is 10
Complex Method,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,Cyclomatic complexity of the method is 64
Complex Method,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,CreateDecimalRepresentation,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,StringToIeee,Cyclomatic complexity of the method is 55
Complex Method,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,Cyclomatic complexity of the method is 12
Complex Method,Elasticsearch.Net.Utf8Json.Internal.Emit,ILViewer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILViewer.cs,ToOpCodes,Cyclomatic complexity of the method is 21
Complex Method,Elasticsearch.Net.Utf8Json.Internal.Emit,Instruction,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILViewer.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,Elasticsearch.Net.Utf8Json.Internal.Emit,MetaMember,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\MetaMember.cs,GetCustomAttribute,Cyclomatic complexity of the method is 8
Complex Method,Elasticsearch.Net.Utf8Json.Internal.Emit,MetaType,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\MetaType.cs,MetaType,Cyclomatic complexity of the method is 35
Complex Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,Cyclomatic complexity of the method is 32
Complex Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildAnonymousFormatter,Cyclomatic complexity of the method is 14
Complex Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,Cyclomatic complexity of the method is 18
Complex Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,EmitNewObject,Cyclomatic complexity of the method is 16
Complex Method,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,IsSideEffectFreeConstructorType,Cyclomatic complexity of the method is 9
Long Parameter List,Elasticsearch.Net,CertificateValidations,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\CertificateValidations.cs,ValidIntermediateCa,The method has 5 parameters. Parameters: caCertificate' certificate' chain' trustRoot' revocationMode
Long Parameter List,Elasticsearch.Net,InMemoryConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\InMemoryConnection.cs,ReturnConnectionStatusAsync,The method has 5 parameters. Parameters: requestData' cancellationToken' responseBody' statusCode' contentType
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,DoRequestAsync,The method has 5 parameters. Parameters: method' path' cancellationToken' data' requestParameters
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,BulkUsingTypeAsync,The method has 5 parameters. Parameters: index' type' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,CreateAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,CreateUsingType,The method has 5 parameters. Parameters: index' type' id' body' requestParameters
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,CreateUsingTypeAsync,The method has 6 parameters. Parameters: index' type' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,DeleteUsingTypeAsync,The method has 5 parameters. Parameters: index' type' id' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,SourceExistsUsingTypeAsync,The method has 5 parameters. Parameters: index' type' id' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,ExplainAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,IndexAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,PutScriptAsync,The method has 5 parameters. Parameters: id' context' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,TermVectorsAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,UpdateAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,UpdateUsingType,The method has 5 parameters. Parameters: index' type' id' body' requestParameters
Long Parameter List,Elasticsearch.Net,ElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.cs,UpdateUsingTypeAsync,The method has 6 parameters. Parameters: index' type' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,DoRequestAsync,The method has 5 parameters. Parameters: method' path' cancellationToken' data' requestParameters
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,BulkUsingTypeAsync,The method has 5 parameters. Parameters: index' type' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,CreateAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,CreateUsingType,The method has 5 parameters. Parameters: index' type' id' body' requestParameters
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,CreateUsingTypeAsync,The method has 6 parameters. Parameters: index' type' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,DeleteUsingTypeAsync,The method has 5 parameters. Parameters: index' type' id' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,SourceExistsUsingTypeAsync,The method has 5 parameters. Parameters: index' type' id' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,ExplainAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,IndexAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,PutScriptAsync,The method has 5 parameters. Parameters: id' context' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,TermVectorsAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,UpdateAsync,The method has 5 parameters. Parameters: index' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,UpdateUsingType,The method has 5 parameters. Parameters: index' type' id' body' requestParameters
Long Parameter List,Elasticsearch.Net,IElasticLowLevelClient,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\IElasticLowLevelClient.cs,UpdateUsingTypeAsync,The method has 6 parameters. Parameters: index' type' id' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net,NamespacedClientProxy,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\NamespacedClientProxy.cs,DoRequestAsync,The method has 5 parameters. Parameters: post' url' ctx' body' params
Long Parameter List,Elasticsearch.Net,RecyclableMemoryStream,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStream.cs,RecyclableMemoryStream,The method has 5 parameters. Parameters: memoryManager' id' tag' requestedSize' initialLargeBuffer
Long Parameter List,Elasticsearch.Net,RecyclableMemoryStreamManager,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,GetStream,The method has 5 parameters. Parameters: id' tag' buffer' offset' count
Long Parameter List,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamDoubleDispose,The method has 5 parameters. Parameters: guid' tag' allocationStack' disposeStack1' disposeStack2
Long Parameter List,Elasticsearch.Net,ITransport,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\ITransport.cs,RequestAsync,The method has 5 parameters. Parameters: method' path' ctx' data' requestParameters
Long Parameter List,Elasticsearch.Net,RequestData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestData.cs,RequestData,The method has 6 parameters. Parameters: method' path' data' global' local' memoryStreamFactory
Long Parameter List,Elasticsearch.Net,RequestData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestData.cs,RequestData,The method has 5 parameters. Parameters: method' data' global' local' memoryStreamFactory
Long Parameter List,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,ToResponse,The method has 6 parameters. Parameters: requestData' ex' statusCode' warnings' responseStream' mimeType
Long Parameter List,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,ToResponseAsync,The method has 7 parameters. Parameters: requestData' ex' statusCode' warnings' responseStream' mimeType' cancellationToken
Long Parameter List,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,Initialize,The method has 5 parameters. Parameters: requestData' exception' statusCode' warnings' mimeType
Long Parameter List,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,SetBodyAsync,The method has 5 parameters. Parameters: details' requestData' responseStream' mimeType' cancellationToken
Long Parameter List,Elasticsearch.Net,Transport<TConnectionSettings>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Transport.cs,RequestAsync,The method has 5 parameters. Parameters: method' path' cancellationToken' data' requestParameters
Long Parameter List,Elasticsearch.Net,Transport<TConnectionSettings>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Transport.cs,HandlePipelineException,The method has 5 parameters. Parameters: response' ex' pipeline' node' seenExceptions
Long Parameter List,Elasticsearch.Net.Specification.IndicesApi,LowLevelIndicesNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Indices.cs,CloneAsync,The method has 5 parameters. Parameters: index' target' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.IndicesApi,LowLevelIndicesNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Indices.cs,PutAliasAsync,The method has 5 parameters. Parameters: index' name' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.IndicesApi,LowLevelIndicesNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Indices.cs,RolloverForAllAsync,The method has 5 parameters. Parameters: alias' newIndex' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.IndicesApi,LowLevelIndicesNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Indices.cs,ShrinkAsync,The method has 5 parameters. Parameters: index' target' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.IndicesApi,LowLevelIndicesNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Indices.cs,SplitAsync,The method has 5 parameters. Parameters: index' target' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.IndicesApi,LowLevelIndicesNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Indices.cs,ValidateQueryUsingTypeAsync,The method has 5 parameters. Parameters: index' type' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.MachineLearningApi,LowLevelMachineLearningNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.MachineLearning.cs,GetBucketsAsync,The method has 5 parameters. Parameters: jobId' timestamp' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.MachineLearningApi,LowLevelMachineLearningNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.MachineLearning.cs,GetCategoriesAsync,The method has 5 parameters. Parameters: jobId' categoryId' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.MachineLearningApi,LowLevelMachineLearningNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.MachineLearning.cs,GetModelSnapshotsAsync,The method has 5 parameters. Parameters: jobId' snapshotId' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.MachineLearningApi,LowLevelMachineLearningNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.MachineLearning.cs,RevertModelSnapshotAsync,The method has 5 parameters. Parameters: jobId' snapshotId' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.MachineLearningApi,LowLevelMachineLearningNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.MachineLearning.cs,UpdateModelSnapshotAsync,The method has 5 parameters. Parameters: jobId' snapshotId' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.NodesApi,LowLevelNodesNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Nodes.cs,StatsAsync,The method has 5 parameters. Parameters: nodeId' metric' indexMetric' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.RollupApi,LowLevelRollupNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Rollup.cs,SearchUsingTypeAsync,The method has 5 parameters. Parameters: index' type' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.SnapshotApi,LowLevelSnapshotNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Snapshot.cs,SnapshotAsync,The method has 5 parameters. Parameters: repository' snapshot' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Specification.SnapshotApi,LowLevelSnapshotNamespace,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ElasticLowLevelClient.Snapshot.cs,RestoreAsync,The method has 5 parameters. Parameters: repository' snapshot' body' requestParameters' ctx
Long Parameter List,Elasticsearch.Net.Utf8Json,JsonParsingException,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,JsonParsingException,The method has 5 parameters. Parameters: message' underlyingBytes' offset' limit' actualChar
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal,AutomataDictionary,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,EmitMatch,The method has 6 parameters. Parameters: il' p' rest' key' onFound' onNotFound
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,EmitSearchNext,The method has 6 parameters. Parameters: il' p' rest' key' onFound' onNotFound
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,EmitSearchNextCore,The method has 8 parameters. Parameters: il' p' rest' key' onFound' onNotFound' nexts' count
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The method has 6 parameters. Parameters: xs' xsOffset' xsCount' ys' ysOffset' ysCount
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H32,The method has 5 parameters. Parameters: s' len' mul' seed0' seed1
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,WeakHashLen32WithSeeds,The method has 6 parameters. Parameters: w' x' y' z' a' b
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal,ThreadsafeTypeKeyHashTable<TValue>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ThreadsafeTypeKeyHashTable.cs,AddToBuckets,The method has 5 parameters. Parameters: buckets' newKey' newEntryOrNull' valueFactory' resultingValue
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,RoundWeed,The method has 7 parameters. Parameters: buffer' length' distance_too_high_w' unsafe_interval' rest' ten_kappa' unit
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,DigitGen,The method has 6 parameters. Parameters: low' w' high' buffer' length' kappa
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,Grisu3,The method has 5 parameters. Parameters: v' mode' buffer' length' decimal_exponent
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,FastDtoa,The method has 5 parameters. Parameters: v' mode' buffer' length' decimal_point
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,CreateDecimalRepresentation,The method has 5 parameters. Parameters: decimal_digits' length' decimal_point' digits_after_point' result_builder
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,DoubleToAscii,The method has 7 parameters. Parameters: v' mode' requested_digits' vector' sign' length' point
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,TrimAndCut,The method has 6 parameters. Parameters: buffer' exponent' buffer_copy_space' space_size' trimmed' updated_exponent
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.Emit,MetaMember,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\MetaMember.cs,MetaMember,The method has 5 parameters. Parameters: type' name' memberName' isWritable' isReadable
Long Parameter List,Elasticsearch.Net.Utf8Json.Internal.Emit,MetaMember,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\MetaMember.cs,MetaMember,The method has 5 parameters. Parameters: info' name' interfaceInfos' jsonFormatter' allowPrivate
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildFormatterToAssembly,The method has 5 parameters. Parameters: assembly' selfResolver' mutator' propertyMapper' excludeNull
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildFormatterToDynamicMethod,The method has 5 parameters. Parameters: selfResolver' mutator' propertyMapper' excludeNull' allowPrivate
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildType,The method has 5 parameters. Parameters: assembly' type' mutator' propertyMapper' excludeNull
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildAnonymousFormatter,The method has 6 parameters. Parameters: type' nameMutator' propertyMapper' excludeNull' allowPrivate' isException
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildConstructor,The method has 7 parameters. Parameters: builder' info' method' stringByteKeysField' il' excludeNull' hasShouldSerialize
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,The method has 8 parameters. Parameters: type' info' il' emitStringByteKeys' tryEmitLoadCustomFormatter' excludeNull' hasShouldSerialize' firstArgIndex
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,EmitSerializeValue,The method has 8 parameters. Parameters: type' member' il' index' tryEmitLoadCustomFormatter' writer' argValue' argResolver
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildDeserialize,The method has 6 parameters. Parameters: type' info' il' tryEmitLoadCustomFormatter' useGetUninitializedObject' firstArgIndex
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,EmitDeserializeValue,The method has 6 parameters. Parameters: il' info' index' tryEmitLoadCustomFormatter' reader' argResolver
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,EmitNewObject,The method has 5 parameters. Parameters: il' type' info' members' isSideEffectFreeType
Long Parameter List,Elasticsearch.Net.Utf8Json.Resolvers,DynamicMethodAnonymousFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,DynamicMethodAnonymousFormatter,The method has 5 parameters. Parameters: stringByteKeysField' serializeCustomFormatters' deserializeCustomFormatters' serialize' deserialize
Long Identifier,Elasticsearch.Net,ConnectionConfiguration<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Configuration\ConnectionConfiguration.cs,EnableDebugMode,The length of the parameter originalCompletedRequestHandler is 31.
Long Identifier,Elasticsearch.Net,ConnectionConfiguration<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Configuration\ConnectionConfiguration.cs,,The length of the parameter _disableAutomaticProxyDetection is 31.
Long Identifier,Elasticsearch.Net,ConnectionConfiguration<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Configuration\ConnectionConfiguration.cs,,The length of the parameter _serverCertificateValidationCallback is 36.
Long Identifier,Elasticsearch.Net,ConnectionConfiguration<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Configuration\ConnectionConfiguration.cs,,The length of the parameter _skipDeserializationForStatusCodes is 34.
Long Identifier,Elasticsearch.Net.Utf8Json.Formatters,EnumFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\EnumFormatter.cs,,The length of the parameter defaultSerializeByUnderlyingValue is 33.
Long Identifier,Elasticsearch.Net.Utf8Json.Formatters,EnumFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\EnumFormatter.cs,,The length of the parameter defaultDeserializeByUnderlyingValue is 35.
Long Identifier,Elasticsearch.Net.Utf8Json.Formatters,TypeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,TypeFormatter,The length of the parameter serializeAssemblyQualifiedName is 30.
Long Identifier,Elasticsearch.Net.Utf8Json.Formatters,TypeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,TypeFormatter,The length of the parameter deserializeSubtractAssemblyQualifiedName is 40.
Long Identifier,Elasticsearch.Net.Utf8Json.Formatters,TypeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,,The length of the parameter serializeAssemblyQualifiedName is 30.
Long Identifier,Elasticsearch.Net.Utf8Json.Formatters,TypeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,,The length of the parameter deserializeSubtractAssemblyQualifiedName is 40.
Long Identifier,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,Grisu3,The length of the parameter ten_mk_minimal_binary_exponent is 30.
Long Identifier,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,Grisu3,The length of the parameter ten_mk_maximal_binary_exponent is 30.
Long Identifier,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,,The length of the parameter kMaxExactDoubleIntegerDecimalDigits is 35.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter AllowPrivateExcludeNullCamelCase is 32.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter AllowPrivateExcludeNullSnakeCase is 32.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,EmitInfo,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter InvalidOperationExceptionConstructor is 36.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,EmitInfo,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter GetCustomAttributeJsonFormatterAttribute is 40.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter GetEncodedPropertyNameWithBeginObject is 37.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter GetEncodedPropertyNameWithPrefixValueSeparator is 46.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter GetEncodedPropertyNameWithoutQuotation is 38.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,,The length of the parameter ReadIsEndObjectWithSkipValueSeparator is 37.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,StandardResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\StandardResolver.cs,,The length of the parameter AllowPrivateExcludeNullCamelCase is 32.
Long Identifier,Elasticsearch.Net.Utf8Json.Resolvers,StandardResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\StandardResolver.cs,,The length of the parameter AllowPrivateExcludeNullSnakeCase is 32.
Long Statement,Elasticsearch.Net,Audit,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Auditing\Audit.cs,ToString,The length of the statement  "			return Node == null ? $"Event: {Event.GetStringValue()}{tookString}" : $"Event: {Event.GetStringValue()} Node: {Node?.Uri} NodeAlive: {Node?.IsAlive}Took: {tookString}"; " is 169.
Long Statement,Elasticsearch.Net,CloudConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ConnectionPool\CloudConnectionPool.cs,ParseCloudId,The length of the statement  "				throw new ArgumentException($"Parameter {nameof(cloudId)} decoded base_64_data contains less then 2 tokens' {exceptionSuffix}"' nameof(cloudId)); " is 145.
Long Statement,Elasticsearch.Net,CloudConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ConnectionPool\CloudConnectionPool.cs,ParseCloudId,The length of the statement  "				throw new ArgumentException($"Parameter {nameof(cloudId)} decoded base_64_data contains no domain name' {exceptionSuffix}"' nameof(cloudId)); " is 141.
Long Statement,Elasticsearch.Net,CloudConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ConnectionPool\CloudConnectionPool.cs,ParseCloudId,The length of the statement  "				throw new ArgumentException($"Parameter {nameof(cloudId)} decoded base_64_data contains no elasticsearch UUID' {exceptionSuffix}"' nameof(cloudId)); " is 148.
Long Statement,Elasticsearch.Net,HttpWebRequestConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\HttpWebRequestConnection.cs,RequestAsync,The length of the statement  "					var apmGetResponseTask = Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse' r => request.EndGetResponse(r)' null); " is 125.
Long Statement,Elasticsearch.Net,HttpWebRequestConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\HttpWebRequestConnection.cs,SetBasicAuthenticationIfNeeded,The length of the statement  "					$"{requestData.BasicAuthorizationCredentials.Username}:{requestData.BasicAuthorizationCredentials.Password.CreateString()}"; " is 124.
Long Statement,Elasticsearch.Net,InMemoryConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\InMemoryConnection.cs,ReturnConnectionStatus,The length of the statement  "			Stream s = body != null ? requestData.MemoryStreamFactory.Create(body) : requestData.MemoryStreamFactory.Create(EmptyBody); " is 123.
Long Statement,Elasticsearch.Net,InMemoryConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\InMemoryConnection.cs,ReturnConnectionStatus,The length of the statement  "			return ResponseBuilder.ToResponse<TResponse>(requestData' _exception' sc' null' s' contentType ?? _contentType ?? RequestData.MimeType); " is 136.
Long Statement,Elasticsearch.Net,InMemoryConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Connection\InMemoryConnection.cs,ReturnConnectionStatusAsync,The length of the statement  "			Stream s = body != null ? requestData.MemoryStreamFactory.Create(body) : requestData.MemoryStreamFactory.Create(EmptyBody); " is 123.
Long Statement,Elasticsearch.Net,DateTimeProvider,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\DateTimeProvider.cs,DeadTime,The length of the statement  "			var milliSeconds = Math.Min(timeout.TotalMilliseconds * 2 * Math.Pow(2' attempts * 0.5 - 1)' maxTimeout.TotalMilliseconds); " is 123.
Long Statement,Elasticsearch.Net,RecyclableMemoryStream,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStream.cs,Seek,The length of the statement  "			if (offset > MaxStreamLength) throw new ArgumentOutOfRangeException(nameof(offset)' "offset cannot be larger than " + MaxStreamLength); " is 135.
Long Statement,Elasticsearch.Net,ResponseStatics,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ResponseStatics.cs,DebugAuditTrailExceptions,The length of the statement  "				sb.AppendLine($"# Audit exception in step {a.i + 1} {a.audit.Event.GetStringValue()}:{Environment.NewLine}{a.audit.Exception}"); " is 128.
Long Statement,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The length of the statement  "									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver); " is 120.
Long Statement,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The length of the statement  "									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver); " is 122.
Long Statement,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The length of the statement  "									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver); " is 123.
Long Statement,Elasticsearch.Net,InterfaceReadOnlyCollectionSingleOrEnumerableFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\InterfaceReadOnlyCollectionSingleOrEnumerableFormatter.cs,Deserialize,The length of the statement  "				: new ReadOnlyCollection<T>(new List<T>(1) { formatterResolver.GetFormatter<T>().Deserialize(ref reader' formatterResolver) }); " is 127.
Long Statement,Elasticsearch.Net,PipelineException,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\PipelineException.cs,GetMessage,The length of the statement  "					return "Could not authenticate with the specified node. Try verifying your credentials or check your Shield configuration."; " is 124.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,BadResponse,The length of the statement  "				var s = callDetails?.ResponseBodyInBytes == null ? Stream.Null : _memoryStreamFactory.Create(callDetails.ResponseBodyInBytes); " is 126.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,CallElasticsearch,The length of the statement  "			using (var d = DiagnosticSource.Diagnose<RequestData' IApiCallDetails>(DiagnosticSources.RequestPipeline.CallElasticsearch' requestData)) " is 137.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,CallElasticsearchAsync,The length of the statement  "			using (var d = DiagnosticSource.Diagnose<RequestData' IApiCallDetails>(DiagnosticSources.RequestPipeline.CallElasticsearch' requestData)) " is 137.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,CreateClientException,The length of the statement  "			var innerException = pipelineExceptions.HasAny() ? pipelineExceptions.AsAggregateOrFirst() : callDetails?.OriginalException; " is 124.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,Ping,The length of the statement  "			using (var d = DiagnosticSource.Diagnose<RequestData' IApiCallDetails>(DiagnosticSources.RequestPipeline.Ping' pingData)) " is 121.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,PingAsync,The length of the statement  "			using (var d = DiagnosticSource.Diagnose<RequestData' IApiCallDetails>(DiagnosticSources.RequestPipeline.Ping' pingData)) " is 121.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,Sniff,The length of the statement  "				using (var d = DiagnosticSource.Diagnose<RequestData' IApiCallDetails>(DiagnosticSources.RequestPipeline.Sniff' requestData)) " is 125.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,SniffAsync,The length of the statement  "				using (var d = DiagnosticSource.Diagnose<RequestData' IApiCallDetails>(DiagnosticSources.RequestPipeline.Sniff' requestData)) " is 125.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,ThrowNoNodesAttempted,The length of the statement  "			var clientException = new ElasticsearchClientException(PipelineFailure.NoNodesAttempted' NoNodesAttemptedMessage' (Exception)null); " is 131.
Long Statement,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,CreatePingRequestData,The length of the statement  "			var data = new RequestData(HttpMethod.HEAD' string.Empty' null' _settings' requestParameters' _memoryStreamFactory) { Node = node }; " is 132.
Long Statement,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,ToResponseAsync,The length of the statement  "			var response = await SetBodyAsync<TResponse>(details' requestData' responseStream' mimeType' cancellationToken).ConfigureAwait(false) " is 133.
Long Statement,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,SetBody,The length of the statement  "			var disableDirectStreaming = requestData.PostData?.DisableDirectStreaming ?? requestData.ConnectionSettings.DisableDirectStreaming; " is 131.
Long Statement,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,SetBody,The length of the statement  "				if (details.HttpStatusCode.HasValue && requestData.SkipDeserializationForStatusCodes.Contains(details.HttpStatusCode.Value)) " is 124.
Long Statement,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,SetBodyAsync,The length of the statement  "			var disableDirectStreaming = requestData.PostData?.DisableDirectStreaming ?? requestData.ConnectionSettings.DisableDirectStreaming; " is 131.
Long Statement,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,SetBodyAsync,The length of the statement  "				if (details.HttpStatusCode.HasValue && requestData.SkipDeserializationForStatusCodes.Contains(details.HttpStatusCode.Value)) " is 124.
Long Statement,Elasticsearch.Net,ResponseBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\ResponseBuilder.cs,SetBodyAsync,The length of the statement  "					return await requestData.CustomResponseBuilder.DeserializeResponseAsync(serializer' details' responseStream' cancellationToken).ConfigureAwait(false) as TResponse; " is 163.
Long Statement,Elasticsearch.Net,SerializableData<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\SerializableData.cs,WriteAsync,The length of the statement  "			await settings.RequestResponseSerializer.SerializeAsync(_serializable' stream' indent' cancellationToken).ConfigureAwait(false); " is 128.
Long Statement,Elasticsearch.Net.Diagnostics,TypedDiagnosticObserverBase<TOnNextStart;TOnNextEnd>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Diagnostics\TypedDiagnosticObserverBase.cs,OnNext,The length of the statement  "			if (value.Value is TOnNextStart nextStart) _onNextStart?.Invoke(new KeyValuePair<string' TOnNextStart>(value.Key' nextStart)); " is 126.
Long Statement,Elasticsearch.Net.Diagnostics,TypedDiagnosticObserverBase<TOnNextStart;TOnNextEnd>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Diagnostics\TypedDiagnosticObserverBase.cs,OnNext,The length of the statement  "			else if (value.Key.EndsWith(".Start") && value.Value is null) _onNextStart?.Invoke(new KeyValuePair<string' TOnNextStart>(value.Key' default)); " is 143.
Long Statement,Elasticsearch.Net.Diagnostics,TypedDiagnosticObserverBase<TOnNextStart;TOnNextEnd>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Diagnostics\TypedDiagnosticObserverBase.cs,OnNext,The length of the statement  "			else if (value.Value is TOnNextEnd nextEnd) _onNextEnd?.Invoke(new KeyValuePair<string' TOnNextEnd>(value.Key' nextEnd)); " is 121.
Long Statement,Elasticsearch.Net.Diagnostics,TypedDiagnosticObserverBase<TOnNextStart;TOnNextEnd>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Diagnostics\TypedDiagnosticObserverBase.cs,OnNext,The length of the statement  "			else if (value.Key.EndsWith(".Stop") && value.Value is null) _onNextEnd?.Invoke(new KeyValuePair<string' TOnNextEnd>(value.Key' default)); " is 138.
Long Statement,Elasticsearch.Net.Extensions,TypeExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Extensions\TypeExtensions.cs,CreateInstance,The length of the statement  "				throw new Exception($"Cannot create an instance of {t.FullName} because it has no constructor taking {args.Length} arguments"); " is 127.
Long Statement,Elasticsearch.Net.Utf8Json,JsonFormatterResolverExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\IJsonFormatterResolver.cs,GetFormatterWithVerify,The length of the statement  "                throw new FormatterNotRegisteredException(typeof(T).FullName + " is not registered in this resolver. resolver:" + resolver.GetType().Name); " is 139.
Long Statement,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,CreateParsingException,The length of the statement  "            return new JsonParsingException("expected:'" + expected + "'' actual:'" + actual + "'' at offset:" + pos' bytes' pos' offset' actual); " is 134.
Long Statement,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadNumberSegment,The length of the statement  "					if (NumberConverter.IsENotation(bytes[i]) && (i + 1) < bytes.Length && NumberConverter.IsNumberRepresentation(bytes[i + 1])) " is 124.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,AnonymousFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\AnonymousFormatter.cs,Deserialize,The length of the statement  "            if (this._deserialize == null) throw new InvalidOperationException(this.GetType().Name + " does not support Deserialize."); " is 123.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,InterfaceGroupingFormatter<TKey;TElement>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Serialize,The length of the statement  "				formatterResolver.GetFormatterWithVerify<IEnumerable<TElement>>().Serialize(ref writer' value.AsEnumerable()' formatterResolver); " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,InterfaceGroupingFormatter<TKey;TElement>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Deserialize,The length of the statement  "							resultValue = formatterResolver.GetFormatterWithVerify<IEnumerable<TElement>>().Deserialize(ref reader' formatterResolver); " is 123.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,InterfaceLookupFormatter<TKey;TElement>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Serialize,The length of the statement  "				formatterResolver.GetFormatterWithVerify<IEnumerable<IGrouping<TKey' TElement>>>().Serialize(ref writer' value.AsEnumerable()' formatterResolver); " is 146.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The length of the statement  "                    // should not use `BaseUtcOffset` - https://stackoverflow.com/questions/10019267/is-there-a-generic-timezoneinfo-for-central-europe " is 131.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "                var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 132.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "                var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 132.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "                var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 132.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "            var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 135.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "                return new DateTime(year' month' day' hour' minute' second' DateTimeKind.Utc).AddTicks(ticks).Subtract(offset).ToLocalTime(); " is 125.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "            throw new InvalidOperationException("invalid datetime format. value:" + StringEncoding.UTF8.GetString(str.Array' str.Offset' str.Count)); " is 137.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "                var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 132.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "                var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 132.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "                var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 132.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "            var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0'); " is 135.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "            throw new InvalidOperationException("invalid datetime format. value:" + StringEncoding.UTF8.GetString(str.Array' str.Offset' str.Count)); " is 137.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The length of the statement  "            writer.EnsureCapacity(baseLength + ((maxDayLength == 0) ? 0 : maxDayLength) + ((nanosecond == 0) ? 0 : nanosecLength) + 6); " is 123.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The length of the statement  "            throw new InvalidOperationException("invalid TimeSpan format. value:" + StringEncoding.UTF8.GetString(str.Array' str.Offset' str.Count)); " is 137.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,DictionaryFormatterBase<TKey;TValue;TIntermediate;TEnumerator;TDictionary>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DictionaryFormatter.cs,Deserialize,The length of the statement  "                if (keyFormatter == null) throw new InvalidOperationException(typeof(TKey) + " does not support dictionary key deserialize."); " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,DynamicObjectTypeFallbackFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DynamicObjectTypeFallbackFormatter.cs,Serialize,The length of the statement  "                            throw new FormatterNotRegisteredException(type.FullName + " is not registered in this resolver. resolvers:" + string.Join("' "' innerResolvers.Select(x => x.GetType().Name).ToArray())); " is 185.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,DynamicObjectTypeFallbackFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DynamicObjectTypeFallbackFormatter.cs,Serialize,The length of the statement  "                            var dm = new DynamicMethod("Serialize"' null' new[] { typeof(object)' typeof(JsonWriter).MakeByRefType()' typeof(object)' typeof(IJsonFormatterResolver) }' type.Module' true); " is 175.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,DynamicObjectTypeFallbackFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DynamicObjectTypeFallbackFormatter.cs,Serialize,The length of the statement  "                            // delegate void SerializeMethod(object dynamicFormatter' ref JsonWriter writer' object value' IJsonFormatterResolver formatterResolver); " is 137.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,DynamicObjectTypeFallbackFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DynamicObjectTypeFallbackFormatter.cs,Serialize,The length of the statement  "                            formatterAndDelegate = new KeyValuePair<object' SerializeMethod>(formatter' (SerializeMethod)dm.CreateDelegate(typeof(SerializeMethod))); " is 137.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,EnumFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\EnumFormatter.cs,GetSerializeDelegate,The length of the statement  "			var dynamicMethod = new DynamicMethod("EnumSerializeByUnderlyingValue"' null' new[] { typeof(JsonWriter).MakeByRefType()' type' typeof(IJsonFormatterResolver) }' type.Module' true); " is 181.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,EnumFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\EnumFormatter.cs,GetDeserializeDelegate,The length of the statement  "			var dynamicMethod = new DynamicMethod("EnumDeserializeByUnderlyingValue"' type' new[] { typeof(JsonReader).MakeByRefType()' typeof(IJsonFormatterResolver) }' type.Module' true); " is 177.
Long Statement,Elasticsearch.Net.Utf8Json.Formatters,DecimalFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,Deserialize,The length of the statement  "				return decimal.Parse(StringEncoding.UTF8.GetString(number.Array' number.Offset' number.Count)' NumberStyles.Float' CultureInfo.InvariantCulture); " is 145.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                        key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24 " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                            | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56; " is 132.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24; " is 130.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24 " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24 " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24 " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                        key = (ulong)bytes[offset] << 56 | (ulong)bytes[offset + 1] << 48 | (ulong)bytes[offset + 2] << 40 | (ulong)bytes[offset + 3] << 32 " is 131.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                            | (ulong)bytes[offset + 4] << 24 | (ulong)bytes[offset + 5] << 16 | (ulong)bytes[offset + 6] << 8 | (ulong)bytes[offset + 7]; " is 125.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 24 | (ulong)bytes[offset + 1] << 16 | (ulong)bytes[offset + 2] << 8 | (ulong)bytes[offset + 3] << 0; " is 130.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 32 | (ulong)bytes[offset + 1] << 24 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 8 " is 130.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 40 | (ulong)bytes[offset + 1] << 32 | (ulong)bytes[offset + 2] << 24 | (ulong)bytes[offset + 3] << 16 " is 131.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The length of the statement  "                                    key = (ulong)bytes[offset] << 48 | (ulong)bytes[offset + 1] << 40 | (ulong)bytes[offset + 2] << 32 | (ulong)bytes[offset + 3] << 24 " is 131.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,BinaryUtil,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\BinaryUtil.cs,EnsureCapacity,The length of the statement  "                    throw new InvalidOperationException("byte[] size reached maximum size of array(0x7FFFFFC7)' can not write to single byte[]. Details: https://msdn.microsoft.com/en-us/library/system.array"); " is 189.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break; " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The length of the statement  "                case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break; " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitThrowNotimplemented,The length of the statement  "            il.Emit(OpCodes.Newobj' typeof(NotImplementedException).GetTypeInfo().DeclaredConstructors.First(x => x.GetParameters().Length == 0)); " is 134.
Long Statement,Elasticsearch.Net.Utf8Json.Internal.Emit,Instruction,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILViewer.cs,ToString,The length of the statement  "                    // addition = "(" + string.Join("' "' Enumerable.Range(0' (int)Data).Select(x => "IL_" + (offset + x * 4).ToString("X4")).ToArray()) + ")"; " is 139.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The length of the statement  "            var resolverType = assembly.DefineType("DynamicCompositeResolver_" + id' TypeAttributes.Class | TypeAttributes.NotPublic | TypeAttributes.Sealed' typeof(DynamicCompositeResolver)); " is 180.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The length of the statement  "            var cacheType = assembly.DefineType("DynamicCompositeResolverCache_" + id' TypeAttributes.Class | TypeAttributes.NotPublic | TypeAttributes.Sealed' null); " is 154.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The length of the statement  "            var resolverInstanceField = resolverType.DefineField("instance"' resolverType' FieldAttributes.Public | FieldAttributes.Static); " is 128.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The length of the statement  "            var f = cacheType.DefineField("formatter"' typeof(IJsonFormatter<>).MakeGenericType(genericP)' FieldAttributes.Static | FieldAttributes.Public); " is 144.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The length of the statement  "                var ctor = resolverType.DefineConstructor(MethodAttributes.Public' CallingConventions.Standard' new[] { typeof(IJsonFormatter[])' typeof(IJsonFormatterResolver[]) }); " is 166.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The length of the statement  "                var formatterField = TypeBuilder.GetField(cacheTypeT.MakeGenericType(gpp)' cacheTypeT.GetField("formatter"' BindingFlags.Public | BindingFlags.Static | BindingFlags.GetField)); " is 176.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The length of the statement  "            var finfo = instance.GetType().GetField("instance"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static); " is 120.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The length of the statement  "				else if (isNullable && nullableElementType.GetTypeInfo().IsConstructedGenericType() && nullableElementType.GetGenericTypeDefinition() == typeof(KeyValuePair<'>)) " is 161.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The length of the statement  "				else if (isNullable && nullableElementType.IsConstructedGenericType && nullableElementType.GetGenericTypeDefinition() == typeof(ValueTask<>)) " is 141.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The length of the statement  "				else if (isNullable && nullableElementType.GetTypeInfo().IsConstructedGenericType() && nullableElementType.GetGenericTypeDefinition() == typeof(ArraySegment<>)) " is 160.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The length of the statement  "						&& ti.ImplementedInterfaces.Any(x => x.GetTypeInfo().IsConstructedGenericType() && x.GetGenericTypeDefinition() == typeof(ICollection<>)) " is 137.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The length of the statement  "						&& ti.ImplementedInterfaces.Any(x => x.GetTypeInfo().IsConstructedGenericType() && x.GetGenericTypeDefinition() == typeof(IDictionary<'>)) " is 138.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The length of the statement  "				if (typeof(IList).GetTypeInfo().IsAssignableFrom(ti) && ti.DeclaredConstructors.Any(x => x.GetParameters().Length == 0)) " is 120.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The length of the statement  "				else if (typeof(IDictionary).GetTypeInfo().IsAssignableFrom(ti) && ti.DeclaredConstructors.Any(x => x.GetParameters().Length == 0)) " is 131.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildFormatterToAssembly,The length of the statement  "				return (IJsonFormatter<T>)Activator.CreateInstance(typeof(StaticNullableFormatter<>).MakeGenericType(ti.AsType())' new object[] { innerFormatter }); " is 148.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildFormatterToDynamicMethod,The length of the statement  "				return (IJsonFormatter<T>)Activator.CreateInstance(typeof(StaticNullableFormatter<>).MakeGenericType(ti.AsType())' new object[] { innerFormatter }); " is 148.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildFormatterToDynamicMethod,The length of the statement  "				return DynamicObjectTypeBuilder.BuildAnonymousFormatter(typeof(T)' mutator' propertyMapper' excludeNull' allowPrivate' false); " is 126.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildType,The length of the statement  "			var typeBuilder = assembly.DefineType(ResolverConfig.Namespace + "." + SubtractFullNameRegex.Replace(type.FullName' "").Replace("."' "_") + "Formatter" + Interlocked.Increment(ref nameSequence)' TypeAttributes.NotPublic | TypeAttributes.Sealed' null' new[] { formatterType }); " is 276.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildType,The length of the statement  "				stringByteKeysField = typeBuilder.DefineField("stringByteKeys"' typeof(byte[][])' FieldAttributes.Private | FieldAttributes.InitOnly); " is 134.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildType,The length of the statement  "				customFormatterLookup = BuildConstructor(typeBuilder' serializationInfo' method' stringByteKeysField' il' excludeNull' hasShouldSerialize); " is 139.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildType,The length of the statement  "				var method = typeBuilder.DefineMethod("Serialize"' MethodAttributes.Public | MethodAttributes.Final | MethodAttributes.Virtual' " is 127.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildType,The length of the statement  "				var method = typeBuilder.DefineMethod("Deserialize"' MethodAttributes.Public | MethodAttributes.Final | MethodAttributes.Virtual' " is 129.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildAnonymousFormatter,The length of the statement  "			var serialize = new DynamicMethod("Serialize"' null' new Type[] { typeof(byte[][])' typeof(object[])' typeof(JsonWriter).MakeByRefType()' type' typeof(IJsonFormatterResolver) }' type.Module' true); " is 197.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildAnonymousFormatter,The length of the statement  "			var deserialize = new DynamicMethod("Deserialize"' type' new Type[] { typeof(object[])' typeof(JsonReader).MakeByRefType()' typeof(IJsonFormatterResolver) }' type.Module' true); " is 177.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildAnonymousFormatter,The length of the statement  "				new[] { stringByteKeysField.ToArray()' serializeCustomFormatters.ToArray()' deserializeCustomFormatters.ToArray()' serializeDelegate' deserializeDelegate }); " is 157.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildCustomFormatterField,The length of the statement  "					var f = builder.DefineField(item.Name + "_formatter"' formatterType' FieldAttributes.Private | FieldAttributes.InitOnly); " is 121.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildCustomFormatterField,The length of the statement  "					if (attr.Attribute.FormatterType.IsGenericType && !attr.Attribute.FormatterType.GetTypeInfo().IsConstructedGenericType()) " is 121.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,The length of the statement  "					rawField = (index == 0) ? JsonWriter.GetEncodedPropertyNameWithBeginObject(item.Name) : JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator(item.Name); " is 157.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,The length of the statement  "						il.EmitCall(typeof(UnsafeMemory32).GetRuntimeMethod("WriteRaw" + rawField.Length' new[] { typeof(JsonWriter).MakeByRefType()' typeof(byte[]) })); " is 145.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,The length of the statement  "						il.EmitCall(typeof(UnsafeMemory64).GetRuntimeMethod("WriteRaw" + rawField.Length' new[] { typeof(JsonWriter).MakeByRefType()' typeof(byte[]) })); " is 145.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,EmitSerializeValue,The length of the statement  "				il.EmitCall(typeof(JsonWriter).GetTypeInfo().GetDeclaredMethods("Write" + t.Name).OrderByDescending(x => x.GetParameters().Length).First()); " is 140.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,EmitDeserializeValue,The length of the statement  "				il.EmitCall(typeof(JsonReader).GetTypeInfo().GetDeclaredMethods("Read" + t.Name).OrderByDescending(x => x.GetParameters().Length).First()); " is 139.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,EmitInfo,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,Serialize,The length of the statement  "				return typeof(IJsonFormatter<>).MakeGenericType(type).GetRuntimeMethod("Serialize"' new[] { typeof(Utf8Json.JsonWriter).MakeByRefType()' type' typeof(IJsonFormatterResolver) }); " is 177.
Long Statement,Elasticsearch.Net.Utf8Json.Resolvers,EmitInfo,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,Deserialize,The length of the statement  "				return typeof(IJsonFormatter<>).MakeGenericType(type).GetRuntimeMethod("Deserialize"' new[] { typeof(Utf8Json.JsonReader).MakeByRefType()' typeof(IJsonFormatterResolver) }); " is 173.
Complex Conditional,Elasticsearch.Net,RequestData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestData.cs,CreatePathWithQueryStrings,The conditional expression  "(g == null || g.Count == 0) && (l == null || l.Count == 0)"  is complex.
Complex Conditional,Elasticsearch.Net.Extensions,ArraySegmentBytesExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Extensions\ArraySegmentBytesExtensions.cs,ContainsDateMathSeparator,The conditional expression  "segment.Array != null && (segment.Array[segment.Offset + i] == DateMathSeparator &&  					i + 1 < segment.Count && segment.Array[segment.Offset + i + 1] == DateMathSeparator)"  is complex.
Complex Conditional,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,RoundWeed,The conditional expression  "rest < small_distance &&  // Negated condition 1                     unsafe_interval - rest >= ten_kappa &&  // Negated condition 2                     (rest + ten_kappa < small_distance ||  // buffer{-1} > w_high                      small_distance - rest >= rest + ten_kappa - small_distance)"  is complex.
Complex Conditional,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,RoundWeed,The conditional expression  "rest < big_distance &&                  unsafe_interval - rest >= ten_kappa &&                  (rest + ten_kappa < big_distance ||                   big_distance - rest > rest + ten_kappa - big_distance)"  is complex.
Complex Conditional,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The conditional expression  "ti.GenericTypeArguments.Length == 1  						&& ti.ImplementedInterfaces.Any(x => x.GetTypeInfo().IsConstructedGenericType() && x.GetGenericTypeDefinition() == typeof(ICollection<>))  						&& ti.DeclaredConstructors.Any(x => x.GetParameters().Length == 0)"  is complex.
Complex Conditional,Elasticsearch.Net.Utf8Json.Resolvers,DynamicGenericResolverGetFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicGenericResolver.cs,GetFormatter,The conditional expression  "ti.GenericTypeArguments.Length == 2  						&& ti.ImplementedInterfaces.Any(x => x.GetTypeInfo().IsConstructedGenericType() && x.GetGenericTypeDefinition() == typeof(IDictionary<'>))  						&& ti.DeclaredConstructors.Any(x => x.GetParameters().Length == 0)"  is complex.
Complex Conditional,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildDeserialize,The conditional expression  "info.IsClass && info.BestmatchConstructor == null && !(useGetUninitializedObject && info.IsConcreteClass)"  is complex.
Complex Conditional,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,IsSideEffectFreeConstructorType,The conditional expression  "code != OpCodes.Nop  						&& code != OpCodes.Ldloc_0  						&& code != OpCodes.Ldloc_S  						&& code != OpCodes.Stloc_0  						&& code != OpCodes.Stloc_S  						&& code != OpCodes.Blt  						&& code != OpCodes.Blt_S  						&& code != OpCodes.Bgt  						&& code != OpCodes.Bgt_S"  is complex.
Complex Conditional,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,IsSideEffectFreeConstructorType,The conditional expression  "opCodes.Count == 3  				&& opCodes[0] == System.Reflection.Emit.OpCodes.Ldarg_0  				&& opCodes[1] == System.Reflection.Emit.OpCodes.Call  				&& opCodes[2] == System.Reflection.Emit.OpCodes.Ret"  is complex.
Empty Catch Block,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,CreateParsingException,The method has an empty catch block.
Magic Number,Elasticsearch.Net,CloudConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ConnectionPool\CloudConnectionPool.cs,ParseCloudId,The following statement contains a magic number: var tokens = cloudId.Split(new[] { ':' }' 2);
Magic Number,Elasticsearch.Net,CloudConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ConnectionPool\CloudConnectionPool.cs,ParseCloudId,The following statement contains a magic number: tokens.Length != 2
Magic Number,Elasticsearch.Net,CloudConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\ConnectionPool\CloudConnectionPool.cs,ParseCloudId,The following statement contains a magic number: parts.Length < 2
Magic Number,Elasticsearch.Net,DateTimeProvider,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\DateTimeProvider.cs,DeadTime,The following statement contains a magic number: var milliSeconds = Math.Min(timeout.TotalMilliseconds * 2 * Math.Pow(2' attempts * 0.5 - 1)' maxTimeout.TotalMilliseconds);
Magic Number,Elasticsearch.Net,DateTimeProvider,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\DateTimeProvider.cs,DeadTime,The following statement contains a magic number: var milliSeconds = Math.Min(timeout.TotalMilliseconds * 2 * Math.Pow(2' attempts * 0.5 - 1)' maxTimeout.TotalMilliseconds);
Magic Number,Elasticsearch.Net,DateTimeProvider,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\DateTimeProvider.cs,DeadTime,The following statement contains a magic number: var milliSeconds = Math.Min(timeout.TotalMilliseconds * 2 * Math.Pow(2' attempts * 0.5 - 1)' maxTimeout.TotalMilliseconds);
Magic Number,Elasticsearch.Net,RecyclableMemoryStreamManager,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,RecyclableMemoryStreamManager,The following statement contains a magic number: var numLargePools = useExponentialLargeBuffer  				? (int)Math.Log(maximumBufferSize / largeBufferMultiple' 2) + 1  				: maximumBufferSize / largeBufferMultiple;
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamDisposed,The following statement contains a magic number: WriteEvent(2' guid' tag ?? string.Empty);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamDoubleDispose,The following statement contains a magic number: WriteEvent(3' guid' tag ?? string.Empty' allocationStack ?? string.Empty'  						disposeStack1 ?? string.Empty' disposeStack2 ?? string.Empty);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamFinalized,The following statement contains a magic number: WriteEvent(4' guid' tag ?? string.Empty' allocationStack ?? string.Empty);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamToArray,The following statement contains a magic number: WriteEvent(5' guid' tag ?? string.Empty' stack ?? string.Empty' size);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamManagerInitialized,The following statement contains a magic number: WriteEvent(6' blockSize' largeBufferMultiple' maximumBufferSize);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamNewBlockCreated,The following statement contains a magic number: WriteEvent(7' smallPoolInUseBytes);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamNewLargeBufferCreated,The following statement contains a magic number: WriteEvent(8' requiredSize' largePoolInUseBytes);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamNonPooledLargeBufferCreated,The following statement contains a magic number: WriteEvent(9' requiredSize' tag ?? string.Empty' allocationStack ?? string.Empty);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamDiscardBuffer,The following statement contains a magic number: WriteEvent(10' bufferType' tag ?? string.Empty' reason);
Magic Number,Elasticsearch.Net,Events,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Providers\RecyclableMemoryStreamManager-Events.cs,MemoryStreamOverCapacity,The following statement contains a magic number: WriteEvent(11' requestedCapacity' maxCapacity' tag ?? string.Empty' allocationStack ?? string.Empty);
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.String:  					return new TErrorCause { Reason = reader.ReadString() };  				case JsonToken.BeginObject:  					var count = 0;  					var errorCause = new TErrorCause();  					var additionalProperties = new Dictionary<string' object>();  					errorCause.AdditionalProperties = additionalProperties;  					var formatter = formatterResolver.GetFormatter<object>();  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ErrorCauseFormatterStatics.Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}  						}  						else  						{  							if (!Deserialize(ref reader' ref property' errorCause' formatterResolver))  								additionalProperties.Add(property.Utf8String()' formatter.Deserialize(ref reader' formatterResolver));  						}  					}    					return errorCause;  				default:  					reader.ReadNextBlock();  					return null;  			}
Magic Number,Elasticsearch.Net,ExceptionFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\ExceptionFormatter.cs,FlattenExceptions,The following statement contains a magic number: var maxExceptions = 20;
Magic Number,Elasticsearch.Net,ExceptionFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\ExceptionFormatter.cs,ToDictionary,The following statement contains a magic number: var o = new Dictionary<string' object>(10);
Magic Number,Elasticsearch.Net,ExceptionFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\ExceptionFormatter.cs,WriteStructuredExceptionMethod,The following statement contains a magic number: args.Length != 5
Magic Number,Elasticsearch.Net,ExceptionFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\ExceptionFormatter.cs,WriteStructuredExceptionMethod,The following statement contains a magic number: var assemblyName = args[2];
Magic Number,Elasticsearch.Net,ExceptionFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\ExceptionFormatter.cs,WriteStructuredExceptionMethod,The following statement contains a magic number: var className = args[3];
Magic Number,Elasticsearch.Net,ExceptionFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\ExceptionFormatter.cs,WriteStructuredExceptionMethod,The following statement contains a magic number: var signature = args[4];
Magic Number,Elasticsearch.Net,ExceptionFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Serialization\Formatters\ExceptionFormatter.cs,WriteStructuredExceptionMethod,The following statement contains a magic number: var exceptionMethod = new Dictionary<string' object>(7)  			{  				{ "Name"' name }'  				{ "AssemblyName"' an.Name }'  				{ "AssemblyVersion"' an.Version.ToString() }'  				{ "AssemblyCulture"' an.CultureName }'  				{ "ClassName"' className }'  				{ "Signature"' signature }'  				{ "MemberType"' memberType }  			};
Magic Number,Elasticsearch.Net,RequestData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestData.cs,RequestData,The following statement contains a magic number: KeepAliveInterval = (int)(global.KeepAliveInterval?.TotalMilliseconds ?? 2000);
Magic Number,Elasticsearch.Net,RequestData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestData.cs,RequestData,The following statement contains a magic number: KeepAliveTime = (int)(global.KeepAliveTime?.TotalMilliseconds ?? 2000);
Magic Number,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,NextNode,The following statement contains a magic number: i < 100
Magic Number,Elasticsearch.Net,RequestPipeline,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\Pipeline\RequestPipeline.cs,ThrowBadAuthPipelineExceptionWhenNeeded,The following statement contains a magic number: details?.HttpStatusCode == 401
Magic Number,Elasticsearch.Net.Extensions,NameValueCollectionExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Extensions\NameValueCollectionExtensions.cs,ToQueryString,The following statement contains a magic number: var builder = new StringBuilder("?"' nv.AllKeys.Length * 2 * 5);
Magic Number,Elasticsearch.Net.Extensions,NameValueCollectionExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Extensions\NameValueCollectionExtensions.cs,ToQueryString,The following statement contains a magic number: var builder = new StringBuilder("?"' nv.AllKeys.Length * 2 * 5);
Magic Number,Elasticsearch.Net.Extensions,X509CertificateExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Extensions\X509CertificateExtensions.cs,EncodeHexString,The following statement contains a magic number: var hexOrder = new char[sArray.Length * 2];
Magic Number,Elasticsearch.Net.Extensions,X509CertificateExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Extensions\X509CertificateExtensions.cs,EncodeHexString,The following statement contains a magic number: var digit = (sArray[i] & 0xf0) >> 4;
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,JsonReader,The following statement contains a magic number: this.offset = offset += 3;
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,JsonReader,The following statement contains a magic number: bytes[offset] == bom[0] && bytes[offset + 1] == bom[1] && bytes[offset + 2] == bom[2]
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,JsonReader,The following statement contains a magic number: bytes[offset] == bom[0] && bytes[offset + 1] == bom[1] && bytes[offset + 2] == bom[2]
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,JsonReader,The following statement contains a magic number: bytes.Length >= 3
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCurrentJsonToken,The following statement contains a magic number: switch (c)                  {                      case (byte)'{': return JsonToken.BeginObject;                      case (byte)'}': return JsonToken.EndObject;                      case (byte)'[': return JsonToken.BeginArray;                      case (byte)']': return JsonToken.EndArray;                      case (byte)'t': return JsonToken.True;                      case (byte)'f': return JsonToken.False;                      case (byte)'n': return JsonToken.Null;                      case (byte)''': return JsonToken.ValueSeparator;                      case (byte)':': return JsonToken.NameSeparator;                      case (byte)'-': return JsonToken.Number;                      case (byte)'0': return JsonToken.Number;                      case (byte)'1': return JsonToken.Number;                      case (byte)'2': return JsonToken.Number;                      case (byte)'3': return JsonToken.Number;                      case (byte)'4': return JsonToken.Number;                      case (byte)'5': return JsonToken.Number;                      case (byte)'6': return JsonToken.Number;                      case (byte)'7': return JsonToken.Number;                      case (byte)'8': return JsonToken.Number;                      case (byte)'9': return JsonToken.Number;                      case (byte)'\"': return JsonToken.String;                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                      case 10:                      case 11:                      case 12:                      case 13:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 32:                      case 33:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 46:                      case 47:                      case 59:                      case 60:                      case 61:                      case 62:                      case 63:                      case 64:                      case 65:                      case 66:                      case 67:                      case 68:                      case 69:                      case 70:                      case 71:                      case 72:                      case 73:                      case 74:                      case 75:                      case 76:                      case 77:                      case 78:                      case 79:                      case 80:                      case 81:                      case 82:                      case 83:                      case 84:                      case 85:                      case 86:                      case 87:                      case 88:                      case 89:                      case 90:                      case 92:                      case 94:                      case 95:                      case 96:                      case 97:                      case 98:                      case 99:                      case 100:                      case 101:                      case 103:                      case 104:                      case 105:                      case 106:                      case 107:                      case 108:                      case 109:                      case 111:                      case 112:                      case 113:                      case 114:                      case 115:                      case 117:                      case 118:                      case 119:                      case 120:                      case 121:                      case 122:                      default:                          return JsonToken.None;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,SkipWhiteSpace,The following statement contains a magic number: switch (bytes[i])                  {                      case 0x20: // Space                      case 0x09: // Horizontal tab                      case 0x0A: // Line feed or New line                      case 0x0D: // Carriage return                          continue;                      case (byte)'/': // BeginComment                          i = ReadComment(bytes' i);                          continue;                      // optimize skip jumptable                      case 0:                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 11:                      case 12:                      case 14:                      case 15:                      case 16:                      case 17:                      case 18:                      case 19:                      case 20:                      case 21:                      case 22:                      case 23:                      case 24:                      case 25:                      case 26:                      case 27:                      case 28:                      case 29:                      case 30:                      case 31:                      case 33:                      case 34:                      case 35:                      case 36:                      case 37:                      case 38:                      case 39:                      case 40:                      case 41:                      case 42:                      case 43:                      case 44:                      case 45:                      case 46:                      default:                          offset = i;                          return; // end                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadIsNull,The following statement contains a magic number: bytes[offset + 2] != 'l'
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadIsNull,The following statement contains a magic number: bytes[offset + 3] != 'l'
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadIsNull,The following statement contains a magic number: offset += 4;
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: switch (bytes[i])                  {                      case (byte)'\\': // escape character                          switch ((char)bytes[i + 1])                          {                              case '"':                              case '\\':                              case '/':                                  escapeCharacter = bytes[i + 1];                                  goto COPY;                              case 'b':                                  escapeCharacter = (byte)'\b';                                  goto COPY;                              case 'f':                                  escapeCharacter = (byte)'\f';                                  goto COPY;                              case 'n':                                  escapeCharacter = (byte)'\n';                                  goto COPY;                              case 'r':                                  escapeCharacter = (byte)'\r';                                  goto COPY;                              case 't':                                  escapeCharacter = (byte)'\t';                                  goto COPY;                              case 'u':                                  if (codePointStringBuffer == null) codePointStringBuffer = StringBuilderCache.GetCodePointStringBuffer();                                    if (codePointStringOffet == 0)                                  {                                      if (builder == null) builder = StringBuilderCache.GetBuffer();                                        var copyCount = i - from;                                      BinaryUtil.EnsureCapacity(ref builder' builderOffset' copyCount + 1); // require + 1                                      Buffer.BlockCopy(bytes' from' builder' builderOffset' copyCount);                                      builderOffset += copyCount;                                  }                                    if (codePointStringBuffer.Length == codePointStringOffet)                                  {                                      Array.Resize(ref codePointStringBuffer' codePointStringBuffer.Length * 2);                                  }                                    var a = (char)bytes[i + 2];                                  var b = (char)bytes[i + 3];                                  var c = (char)bytes[i + 4];                                  var d = (char)bytes[i + 5];                                  var codepoint = GetCodePoint(a' b' c' d);                                  codePointStringBuffer[codePointStringOffet++] = (char)codepoint;                                  i += 5;                                  offset += 6;                                  from = offset;                                  continue;                              default:                                  throw CreateParsingExceptionMessage("Bad JSON escape.");                          }                      case (byte)'"': // endtoken                          offset++;                          goto END;                      default: // string                          if (codePointStringOffet != 0)                          {                              if (builder == null) builder = StringBuilderCache.GetBuffer();                              BinaryUtil.EnsureCapacity(ref builder' builderOffset' StringEncoding.UTF8.GetMaxByteCount(codePointStringOffet));                              builderOffset += StringEncoding.UTF8.GetBytes(codePointStringBuffer' 0' codePointStringOffet' builder' builderOffset);                              codePointStringOffet = 0;                          }                          offset++;                          continue;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: switch (bytes[i])                  {                      case (byte)'\\': // escape character                          switch ((char)bytes[i + 1])                          {                              case '"':                              case '\\':                              case '/':                                  escapeCharacter = bytes[i + 1];                                  goto COPY;                              case 'b':                                  escapeCharacter = (byte)'\b';                                  goto COPY;                              case 'f':                                  escapeCharacter = (byte)'\f';                                  goto COPY;                              case 'n':                                  escapeCharacter = (byte)'\n';                                  goto COPY;                              case 'r':                                  escapeCharacter = (byte)'\r';                                  goto COPY;                              case 't':                                  escapeCharacter = (byte)'\t';                                  goto COPY;                              case 'u':                                  if (codePointStringBuffer == null) codePointStringBuffer = StringBuilderCache.GetCodePointStringBuffer();                                    if (codePointStringOffet == 0)                                  {                                      if (builder == null) builder = StringBuilderCache.GetBuffer();                                        var copyCount = i - from;                                      BinaryUtil.EnsureCapacity(ref builder' builderOffset' copyCount + 1); // require + 1                                      Buffer.BlockCopy(bytes' from' builder' builderOffset' copyCount);                                      builderOffset += copyCount;                                  }                                    if (codePointStringBuffer.Length == codePointStringOffet)                                  {                                      Array.Resize(ref codePointStringBuffer' codePointStringBuffer.Length * 2);                                  }                                    var a = (char)bytes[i + 2];                                  var b = (char)bytes[i + 3];                                  var c = (char)bytes[i + 4];                                  var d = (char)bytes[i + 5];                                  var codepoint = GetCodePoint(a' b' c' d);                                  codePointStringBuffer[codePointStringOffet++] = (char)codepoint;                                  i += 5;                                  offset += 6;                                  from = offset;                                  continue;                              default:                                  throw CreateParsingExceptionMessage("Bad JSON escape.");                          }                      case (byte)'"': // endtoken                          offset++;                          goto END;                      default: // string                          if (codePointStringOffet != 0)                          {                              if (builder == null) builder = StringBuilderCache.GetBuffer();                              BinaryUtil.EnsureCapacity(ref builder' builderOffset' StringEncoding.UTF8.GetMaxByteCount(codePointStringOffet));                              builderOffset += StringEncoding.UTF8.GetBytes(codePointStringBuffer' 0' codePointStringOffet' builder' builderOffset);                              codePointStringOffet = 0;                          }                          offset++;                          continue;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: switch (bytes[i])                  {                      case (byte)'\\': // escape character                          switch ((char)bytes[i + 1])                          {                              case '"':                              case '\\':                              case '/':                                  escapeCharacter = bytes[i + 1];                                  goto COPY;                              case 'b':                                  escapeCharacter = (byte)'\b';                                  goto COPY;                              case 'f':                                  escapeCharacter = (byte)'\f';                                  goto COPY;                              case 'n':                                  escapeCharacter = (byte)'\n';                                  goto COPY;                              case 'r':                                  escapeCharacter = (byte)'\r';                                  goto COPY;                              case 't':                                  escapeCharacter = (byte)'\t';                                  goto COPY;                              case 'u':                                  if (codePointStringBuffer == null) codePointStringBuffer = StringBuilderCache.GetCodePointStringBuffer();                                    if (codePointStringOffet == 0)                                  {                                      if (builder == null) builder = StringBuilderCache.GetBuffer();                                        var copyCount = i - from;                                      BinaryUtil.EnsureCapacity(ref builder' builderOffset' copyCount + 1); // require + 1                                      Buffer.BlockCopy(bytes' from' builder' builderOffset' copyCount);                                      builderOffset += copyCount;                                  }                                    if (codePointStringBuffer.Length == codePointStringOffet)                                  {                                      Array.Resize(ref codePointStringBuffer' codePointStringBuffer.Length * 2);                                  }                                    var a = (char)bytes[i + 2];                                  var b = (char)bytes[i + 3];                                  var c = (char)bytes[i + 4];                                  var d = (char)bytes[i + 5];                                  var codepoint = GetCodePoint(a' b' c' d);                                  codePointStringBuffer[codePointStringOffet++] = (char)codepoint;                                  i += 5;                                  offset += 6;                                  from = offset;                                  continue;                              default:                                  throw CreateParsingExceptionMessage("Bad JSON escape.");                          }                      case (byte)'"': // endtoken                          offset++;                          goto END;                      default: // string                          if (codePointStringOffet != 0)                          {                              if (builder == null) builder = StringBuilderCache.GetBuffer();                              BinaryUtil.EnsureCapacity(ref builder' builderOffset' StringEncoding.UTF8.GetMaxByteCount(codePointStringOffet));                              builderOffset += StringEncoding.UTF8.GetBytes(codePointStringBuffer' 0' codePointStringOffet' builder' builderOffset);                              codePointStringOffet = 0;                          }                          offset++;                          continue;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: switch (bytes[i])                  {                      case (byte)'\\': // escape character                          switch ((char)bytes[i + 1])                          {                              case '"':                              case '\\':                              case '/':                                  escapeCharacter = bytes[i + 1];                                  goto COPY;                              case 'b':                                  escapeCharacter = (byte)'\b';                                  goto COPY;                              case 'f':                                  escapeCharacter = (byte)'\f';                                  goto COPY;                              case 'n':                                  escapeCharacter = (byte)'\n';                                  goto COPY;                              case 'r':                                  escapeCharacter = (byte)'\r';                                  goto COPY;                              case 't':                                  escapeCharacter = (byte)'\t';                                  goto COPY;                              case 'u':                                  if (codePointStringBuffer == null) codePointStringBuffer = StringBuilderCache.GetCodePointStringBuffer();                                    if (codePointStringOffet == 0)                                  {                                      if (builder == null) builder = StringBuilderCache.GetBuffer();                                        var copyCount = i - from;                                      BinaryUtil.EnsureCapacity(ref builder' builderOffset' copyCount + 1); // require + 1                                      Buffer.BlockCopy(bytes' from' builder' builderOffset' copyCount);                                      builderOffset += copyCount;                                  }                                    if (codePointStringBuffer.Length == codePointStringOffet)                                  {                                      Array.Resize(ref codePointStringBuffer' codePointStringBuffer.Length * 2);                                  }                                    var a = (char)bytes[i + 2];                                  var b = (char)bytes[i + 3];                                  var c = (char)bytes[i + 4];                                  var d = (char)bytes[i + 5];                                  var codepoint = GetCodePoint(a' b' c' d);                                  codePointStringBuffer[codePointStringOffet++] = (char)codepoint;                                  i += 5;                                  offset += 6;                                  from = offset;                                  continue;                              default:                                  throw CreateParsingExceptionMessage("Bad JSON escape.");                          }                      case (byte)'"': // endtoken                          offset++;                          goto END;                      default: // string                          if (codePointStringOffet != 0)                          {                              if (builder == null) builder = StringBuilderCache.GetBuffer();                              BinaryUtil.EnsureCapacity(ref builder' builderOffset' StringEncoding.UTF8.GetMaxByteCount(codePointStringOffet));                              builderOffset += StringEncoding.UTF8.GetBytes(codePointStringBuffer' 0' codePointStringOffet' builder' builderOffset);                              codePointStringOffet = 0;                          }                          offset++;                          continue;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: switch (bytes[i])                  {                      case (byte)'\\': // escape character                          switch ((char)bytes[i + 1])                          {                              case '"':                              case '\\':                              case '/':                                  escapeCharacter = bytes[i + 1];                                  goto COPY;                              case 'b':                                  escapeCharacter = (byte)'\b';                                  goto COPY;                              case 'f':                                  escapeCharacter = (byte)'\f';                                  goto COPY;                              case 'n':                                  escapeCharacter = (byte)'\n';                                  goto COPY;                              case 'r':                                  escapeCharacter = (byte)'\r';                                  goto COPY;                              case 't':                                  escapeCharacter = (byte)'\t';                                  goto COPY;                              case 'u':                                  if (codePointStringBuffer == null) codePointStringBuffer = StringBuilderCache.GetCodePointStringBuffer();                                    if (codePointStringOffet == 0)                                  {                                      if (builder == null) builder = StringBuilderCache.GetBuffer();                                        var copyCount = i - from;                                      BinaryUtil.EnsureCapacity(ref builder' builderOffset' copyCount + 1); // require + 1                                      Buffer.BlockCopy(bytes' from' builder' builderOffset' copyCount);                                      builderOffset += copyCount;                                  }                                    if (codePointStringBuffer.Length == codePointStringOffet)                                  {                                      Array.Resize(ref codePointStringBuffer' codePointStringBuffer.Length * 2);                                  }                                    var a = (char)bytes[i + 2];                                  var b = (char)bytes[i + 3];                                  var c = (char)bytes[i + 4];                                  var d = (char)bytes[i + 5];                                  var codepoint = GetCodePoint(a' b' c' d);                                  codePointStringBuffer[codePointStringOffet++] = (char)codepoint;                                  i += 5;                                  offset += 6;                                  from = offset;                                  continue;                              default:                                  throw CreateParsingExceptionMessage("Bad JSON escape.");                          }                      case (byte)'"': // endtoken                          offset++;                          goto END;                      default: // string                          if (codePointStringOffet != 0)                          {                              if (builder == null) builder = StringBuilderCache.GetBuffer();                              BinaryUtil.EnsureCapacity(ref builder' builderOffset' StringEncoding.UTF8.GetMaxByteCount(codePointStringOffet));                              builderOffset += StringEncoding.UTF8.GetBytes(codePointStringBuffer' 0' codePointStringOffet' builder' builderOffset);                              codePointStringOffet = 0;                          }                          offset++;                          continue;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: switch (bytes[i])                  {                      case (byte)'\\': // escape character                          switch ((char)bytes[i + 1])                          {                              case '"':                              case '\\':                              case '/':                                  escapeCharacter = bytes[i + 1];                                  goto COPY;                              case 'b':                                  escapeCharacter = (byte)'\b';                                  goto COPY;                              case 'f':                                  escapeCharacter = (byte)'\f';                                  goto COPY;                              case 'n':                                  escapeCharacter = (byte)'\n';                                  goto COPY;                              case 'r':                                  escapeCharacter = (byte)'\r';                                  goto COPY;                              case 't':                                  escapeCharacter = (byte)'\t';                                  goto COPY;                              case 'u':                                  if (codePointStringBuffer == null) codePointStringBuffer = StringBuilderCache.GetCodePointStringBuffer();                                    if (codePointStringOffet == 0)                                  {                                      if (builder == null) builder = StringBuilderCache.GetBuffer();                                        var copyCount = i - from;                                      BinaryUtil.EnsureCapacity(ref builder' builderOffset' copyCount + 1); // require + 1                                      Buffer.BlockCopy(bytes' from' builder' builderOffset' copyCount);                                      builderOffset += copyCount;                                  }                                    if (codePointStringBuffer.Length == codePointStringOffet)                                  {                                      Array.Resize(ref codePointStringBuffer' codePointStringBuffer.Length * 2);                                  }                                    var a = (char)bytes[i + 2];                                  var b = (char)bytes[i + 3];                                  var c = (char)bytes[i + 4];                                  var d = (char)bytes[i + 5];                                  var codepoint = GetCodePoint(a' b' c' d);                                  codePointStringBuffer[codePointStringOffet++] = (char)codepoint;                                  i += 5;                                  offset += 6;                                  from = offset;                                  continue;                              default:                                  throw CreateParsingExceptionMessage("Bad JSON escape.");                          }                      case (byte)'"': // endtoken                          offset++;                          goto END;                      default: // string                          if (codePointStringOffet != 0)                          {                              if (builder == null) builder = StringBuilderCache.GetBuffer();                              BinaryUtil.EnsureCapacity(ref builder' builderOffset' StringEncoding.UTF8.GetMaxByteCount(codePointStringOffet));                              builderOffset += StringEncoding.UTF8.GetBytes(codePointStringBuffer' 0' codePointStringOffet' builder' builderOffset);                              codePointStringOffet = 0;                          }                          offset++;                          continue;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: switch (bytes[i])                  {                      case (byte)'\\': // escape character                          switch ((char)bytes[i + 1])                          {                              case '"':                              case '\\':                              case '/':                                  escapeCharacter = bytes[i + 1];                                  goto COPY;                              case 'b':                                  escapeCharacter = (byte)'\b';                                  goto COPY;                              case 'f':                                  escapeCharacter = (byte)'\f';                                  goto COPY;                              case 'n':                                  escapeCharacter = (byte)'\n';                                  goto COPY;                              case 'r':                                  escapeCharacter = (byte)'\r';                                  goto COPY;                              case 't':                                  escapeCharacter = (byte)'\t';                                  goto COPY;                              case 'u':                                  if (codePointStringBuffer == null) codePointStringBuffer = StringBuilderCache.GetCodePointStringBuffer();                                    if (codePointStringOffet == 0)                                  {                                      if (builder == null) builder = StringBuilderCache.GetBuffer();                                        var copyCount = i - from;                                      BinaryUtil.EnsureCapacity(ref builder' builderOffset' copyCount + 1); // require + 1                                      Buffer.BlockCopy(bytes' from' builder' builderOffset' copyCount);                                      builderOffset += copyCount;                                  }                                    if (codePointStringBuffer.Length == codePointStringOffet)                                  {                                      Array.Resize(ref codePointStringBuffer' codePointStringBuffer.Length * 2);                                  }                                    var a = (char)bytes[i + 2];                                  var b = (char)bytes[i + 3];                                  var c = (char)bytes[i + 4];                                  var d = (char)bytes[i + 5];                                  var codepoint = GetCodePoint(a' b' c' d);                                  codePointStringBuffer[codePointStringOffet++] = (char)codepoint;                                  i += 5;                                  offset += 6;                                  from = offset;                                  continue;                              default:                                  throw CreateParsingExceptionMessage("Bad JSON escape.");                          }                      case (byte)'"': // endtoken                          offset++;                          goto END;                      default: // string                          if (codePointStringOffet != 0)                          {                              if (builder == null) builder = StringBuilderCache.GetBuffer();                              BinaryUtil.EnsureCapacity(ref builder' builderOffset' StringEncoding.UTF8.GetMaxByteCount(codePointStringOffet));                              builderOffset += StringEncoding.UTF8.GetBytes(codePointStringBuffer' 0' codePointStringOffet' builder' builderOffset);                              codePointStringOffet = 0;                          }                          offset++;                          continue;                  }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadStringSegmentCore,The following statement contains a magic number: offset += 2;
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCodePoint,The following statement contains a magic number: return (((((ToNumber(a) * 16) + ToNumber(b)) * 16) + ToNumber(c)) * 16) + ToNumber(d);
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCodePoint,The following statement contains a magic number: return (((((ToNumber(a) * 16) + ToNumber(b)) * 16) + ToNumber(c)) * 16) + ToNumber(d);
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCodePoint,The following statement contains a magic number: return (((((ToNumber(a) * 16) + ToNumber(b)) * 16) + ToNumber(c)) * 16) + ToNumber(d);
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadBoolean,The following statement contains a magic number: bytes[offset + 2] != 'u'
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadBoolean,The following statement contains a magic number: bytes[offset + 3] != 'e'
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadBoolean,The following statement contains a magic number: offset += 4;
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,IsWordBreak,The following statement contains a magic number: switch (c)              {                  case (byte)' ':                  case (byte)'{':                  case (byte)'}':                  case (byte)'[':                  case (byte)']':                  case (byte)''':                  case (byte)':':                  case (byte)'\"':                      return true;                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 33:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 45:                  case 46:                  case 47:                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 92:                  case 94:                  case 95:                  case 96:                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                  case 103:                  case 104:                  case 105:                  case 106:                  case 107:                  case 108:                  case 109:                  case 110:                  case 111:                  case 112:                  case 113:                  case 114:                  case 115:                  case 116:                  case 117:                  case 118:                  case 119:                  case 120:                  case 121:                  case 122:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadNextCore,The following statement contains a magic number: switch (token)              {                  case JsonToken.BeginObject:                  case JsonToken.BeginArray:                  case JsonToken.ValueSeparator:                  case JsonToken.NameSeparator:                  case JsonToken.EndObject:                  case JsonToken.EndArray:                      offset += 1;                      break;                  case JsonToken.True:                  case JsonToken.Null:                      offset += 4;                      break;                  case JsonToken.False:                      offset += 5;                      break;                  case JsonToken.String:                      offset += 1; // position is "\"";                      for (int i = offset; i < bytes.Length; i++)                      {                          if (bytes[i] == '\"')                          {  							// backtrack and count escape characters  							var count = 0;  							for (var j = i - 1; j >= offset; j--)  							{  								if (bytes[j] != '\\')  									break;    								count++;  							}    							// even number of escape characters means this " is not escaped.  							if (count % 2 == 0)  							{  								offset = i + 1;  								return; // end  							}                          }                      }                      throw CreateParsingExceptionMessage("not found end string.");                  case JsonToken.Number:                      for (int i = offset; i < bytes.Length; i++)                      {                          if (IsWordBreak(bytes[i]))                          {                              offset = i;                              return;                          }                      }                      offset = bytes.Length;                      break;                  case JsonToken.None:                  default:                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadNextCore,The following statement contains a magic number: switch (token)              {                  case JsonToken.BeginObject:                  case JsonToken.BeginArray:                  case JsonToken.ValueSeparator:                  case JsonToken.NameSeparator:                  case JsonToken.EndObject:                  case JsonToken.EndArray:                      offset += 1;                      break;                  case JsonToken.True:                  case JsonToken.Null:                      offset += 4;                      break;                  case JsonToken.False:                      offset += 5;                      break;                  case JsonToken.String:                      offset += 1; // position is "\"";                      for (int i = offset; i < bytes.Length; i++)                      {                          if (bytes[i] == '\"')                          {  							// backtrack and count escape characters  							var count = 0;  							for (var j = i - 1; j >= offset; j--)  							{  								if (bytes[j] != '\\')  									break;    								count++;  							}    							// even number of escape characters means this " is not escaped.  							if (count % 2 == 0)  							{  								offset = i + 1;  								return; // end  							}                          }                      }                      throw CreateParsingExceptionMessage("not found end string.");                  case JsonToken.Number:                      for (int i = offset; i < bytes.Length; i++)                      {                          if (IsWordBreak(bytes[i]))                          {                              offset = i;                              return;                          }                      }                      offset = bytes.Length;                      break;                  case JsonToken.None:                  default:                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadNextCore,The following statement contains a magic number: switch (token)              {                  case JsonToken.BeginObject:                  case JsonToken.BeginArray:                  case JsonToken.ValueSeparator:                  case JsonToken.NameSeparator:                  case JsonToken.EndObject:                  case JsonToken.EndArray:                      offset += 1;                      break;                  case JsonToken.True:                  case JsonToken.Null:                      offset += 4;                      break;                  case JsonToken.False:                      offset += 5;                      break;                  case JsonToken.String:                      offset += 1; // position is "\"";                      for (int i = offset; i < bytes.Length; i++)                      {                          if (bytes[i] == '\"')                          {  							// backtrack and count escape characters  							var count = 0;  							for (var j = i - 1; j >= offset; j--)  							{  								if (bytes[j] != '\\')  									break;    								count++;  							}    							// even number of escape characters means this " is not escaped.  							if (count % 2 == 0)  							{  								offset = i + 1;  								return; // end  							}                          }                      }                      throw CreateParsingExceptionMessage("not found end string.");                  case JsonToken.Number:                      for (int i = offset; i < bytes.Length; i++)                      {                          if (IsWordBreak(bytes[i]))                          {                              offset = i;                              return;                          }                      }                      offset = bytes.Length;                      break;                  case JsonToken.None:                  default:                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadNextBlock,The following statement contains a magic number: switch (token)              {                  case JsonToken.BeginObject:                  case JsonToken.BeginArray:                      offset++;                      stack++;                      goto AGAIN;                  case JsonToken.EndObject:                  case JsonToken.EndArray:                      offset++;                      stack--;                      if (stack != 0)                      {                          goto AGAIN;                      }                      break;                  case JsonToken.True:                  case JsonToken.False:                  case JsonToken.Null:                  case JsonToken.String:                  case JsonToken.Number:                  case JsonToken.NameSeparator:                  case JsonToken.ValueSeparator:                      do                      {                          ReadNextCore(token);                          token = GetCurrentJsonToken();                      } while (stack != 0 && !((int)token < 5)); // !(None' Begin/EndObject' Begin/EndArray)                        if (stack != 0)                      {                          goto AGAIN;                      }                      break;                  case JsonToken.None:                  default:                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json,JsonReader,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,ReadComment,The following statement contains a magic number: offset += 2;
Magic Number,Elasticsearch.Net.Utf8Json,StringBuilderCache,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetBuffer,The following statement contains a magic number: buffer = new byte[65535];
Magic Number,Elasticsearch.Net.Utf8Json,StringBuilderCache,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonReader.cs,GetCodePointStringBuffer,The following statement contains a magic number: codePointStringBuffer = new char[65535];
Magic Number,Elasticsearch.Net.Utf8Json,JsonSerializer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.cs,DeserializeAsync,The following statement contains a magic number: BinaryUtil.FastResize(ref buf' length * 2);
Magic Number,Elasticsearch.Net.Utf8Json,JsonSerializer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.cs,FillFromStream,The following statement contains a magic number: BinaryUtil.FastResize(ref buffer' length * 2);
Magic Number,Elasticsearch.Net.Utf8Json,CompiledMethods,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.NonGeneric.cs,CompiledMethods,The following statement contains a magic number: il.EmitLdarg(2);
Magic Number,Elasticsearch.Net.Utf8Json,CompiledMethods,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.NonGeneric.cs,CompiledMethods,The following statement contains a magic number: il.EmitLdarg(2);
Magic Number,Elasticsearch.Net.Utf8Json,CompiledMethods,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.NonGeneric.cs,CompiledMethods,The following statement contains a magic number: il.EmitLdarg(2);
Magic Number,Elasticsearch.Net.Utf8Json,CompiledMethods,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonSerializer.NonGeneric.cs,CompiledMethods,The following statement contains a magic number: il.EmitLdarg(2);
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,GetEncodedPropertyNameWithoutQuotation,The following statement contains a magic number: var result = new byte[buf.Count - 2];
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteNull,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 4);
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteNull,The following statement contains a magic number: buffer[offset + 2] = (byte)'l';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteNull,The following statement contains a magic number: buffer[offset + 3] = (byte)'l';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteNull,The following statement contains a magic number: offset += 4;
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteBoolean,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 4);
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteBoolean,The following statement contains a magic number: buffer[offset + 2] = (byte)'u';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteBoolean,The following statement contains a magic number: buffer[offset + 3] = (byte)'e';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteBoolean,The following statement contains a magic number: offset += 4;
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteTrue,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 4);
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteTrue,The following statement contains a magic number: buffer[offset + 2] = (byte)'u';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteTrue,The following statement contains a magic number: buffer[offset + 3] = (byte)'e';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteTrue,The following statement contains a magic number: offset += 4;
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteFalse,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 5);
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteFalse,The following statement contains a magic number: buffer[offset + 2] = (byte)'l';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteFalse,The following statement contains a magic number: buffer[offset + 3] = (byte)'s';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteFalse,The following statement contains a magic number: buffer[offset + 4] = (byte)'e';
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteFalse,The following statement contains a magic number: offset += 5;
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: var max = StringEncoding.UTF8.GetMaxByteCount(value.Length) + 2;
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: switch (value[i])                  {                      case '"':                          escapeChar = (byte)'"';                          break;                      case '\\':                          escapeChar = (byte)'\\';                          break;                      case '\b':                          escapeChar = (byte)'b';                          break;                      case '\f':                          escapeChar = (byte)'f';                          break;                      case '\n':                          escapeChar = (byte)'n';                          break;                      case '\r':                          escapeChar = (byte)'r';                          break;                      case '\t':                          escapeChar = (byte)'t';                          break;  					case (char)0:  					case (char)1:  					case (char)2:  					case (char)3:  					case (char)4:  					case (char)5:  					case (char)6:  					case (char)7:  					case (char)11:  					case (char)14:  					case (char)15:  					case (char)16:  					case (char)17:  					case (char)18:  					case (char)19:  					case (char)20:  					case (char)21:  					case (char)22:  					case (char)23:  					case (char)24:  					case (char)25:  					case (char)26:  					case (char)27:  					case (char)28:  					case (char)29:  					case (char)30:  					case (char)31:  					case '\u0085':  					case '\u2028':  					case '\u2029':  						break;  					default:  						continue;  				}
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: max += escapeChar == default ? 6 : 2;
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,WriteString,The following statement contains a magic number: max += escapeChar == default ? 6 : 2;
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,ToUnicode,The following statement contains a magic number: buffer[offset++] = (byte)CharUtils.HexDigit((c >> 12) & '\x000f');
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,ToUnicode,The following statement contains a magic number: buffer[offset++] = (byte)CharUtils.HexDigit((c >> 8) & '\x000f');
Magic Number,Elasticsearch.Net.Utf8Json,JsonWriter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\JsonWriter.cs,ToUnicode,The following statement contains a magic number: buffer[offset++] = (byte)CharUtils.HexDigit((c >> 4) & '\x000f');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Deserialize,The following statement contains a magic number: Array.Resize<T>(ref array' array.Length * 2);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ArraySegmentFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Deserialize,The following statement contains a magic number: Array.Resize<T>(ref array' array.Length * 2);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,StackFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Create,The following statement contains a magic number: return new ArrayBuffer<T>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ReadOnlyCollectionFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Create,The following statement contains a magic number: return new ArrayBuffer<T>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,InterfaceEnumerableFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Create,The following statement contains a magic number: return new ArrayBuffer<T>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,InterfaceReadOnlyListFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Create,The following statement contains a magic number: return new ArrayBuffer<T>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,InterfaceReadOnlyCollectionFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Create,The following statement contains a magic number: return new ArrayBuffer<T>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ConcurrentStackFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\CollectionFormatters.cs,Create,The following statement contains a magic number: return new ArrayBuffer<T>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int baseLength = 19 + 2;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int baseLength = 19 + 2;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int nanosecLength = 8;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: switch (value.Kind)              {                  case DateTimeKind.Local:                      // +{Hour}:{Minute}                      writer.EnsureCapacity(baseLength + ((nanosec == 0) ? 0 : nanosecLength) + 6);                      break;                  case DateTimeKind.Utc:                      // Z                      writer.EnsureCapacity(baseLength + ((nanosec == 0) ? 0 : nanosecLength) + 1);                      break;                  case DateTimeKind.Unspecified:                  default:                      writer.EnsureCapacity(baseLength + ((nanosec == 0) ? 0 : nanosecLength));                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: year < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: month < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: day < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: hour < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: minute < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: second < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosec < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: switch (value.Kind)              {                  case DateTimeKind.Local:                      // should not use `BaseUtcOffset` - https://stackoverflow.com/questions/10019267/is-there-a-generic-timezoneinfo-for-central-europe                      var localOffset = TimeZoneInfo.Local.GetUtcOffset(value);                      var minus = (localOffset < TimeSpan.Zero);                      if (minus) localOffset = localOffset.Negate();                      var h = localOffset.Hours;                      var m = localOffset.Minutes;                      writer.WriteRawUnsafe(minus ? (byte)'-' : (byte)'+');                      if (h < 10)                      {                          writer.WriteRawUnsafe((byte)'0');                      }                      writer.WriteInt32(h);                      writer.WriteRawUnsafe((byte)':');                      if (m < 10)                      {                          writer.WriteRawUnsafe((byte)'0');                      }                      writer.WriteInt32(m);                      break;                  case DateTimeKind.Utc:                      writer.WriteRawUnsafe((byte)'Z');                      break;                  case DateTimeKind.Unspecified:                  default:                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: switch (value.Kind)              {                  case DateTimeKind.Local:                      // should not use `BaseUtcOffset` - https://stackoverflow.com/questions/10019267/is-there-a-generic-timezoneinfo-for-central-europe                      var localOffset = TimeZoneInfo.Local.GetUtcOffset(value);                      var minus = (localOffset < TimeSpan.Zero);                      if (minus) localOffset = localOffset.Negate();                      var h = localOffset.Hours;                      var m = localOffset.Minutes;                      writer.WriteRawUnsafe(minus ? (byte)'-' : (byte)'+');                      if (h < 10)                      {                          writer.WriteRawUnsafe((byte)'0');                      }                      writer.WriteInt32(h);                      writer.WriteRawUnsafe((byte)':');                      if (m < 10)                      {                          writer.WriteRawUnsafe((byte)'0');                      }                      writer.WriteInt32(m);                      break;                  case DateTimeKind.Utc:                      writer.WriteRawUnsafe((byte)'Z');                      break;                  case DateTimeKind.Unspecified:                  default:                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: len == 4
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var m = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: len == 7
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var m = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var d = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: len == 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: len < 19
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var month = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var day = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var hour = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var minute = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var second = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 1000000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 100000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 10000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 1000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 100;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 10;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int baseLength = 19 + 2;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int baseLength = 19 + 2;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int nanosecLength = 8;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: writer.EnsureCapacity(baseLength + ((nanosec == 0) ? 0 : nanosecLength) + 6);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: year < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: month < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: day < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: hour < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: minute < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: second < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosec < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: h < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: m < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: len == 4
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var m = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: len == 7
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var y = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var m = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var d = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: len == 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: array.Length < 19
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var year = (array[i++] - (byte)'0') * 1000 + (array[i++] - (byte)'0') * 100 + (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var month = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var day = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var hour = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var minute = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var second = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 1000000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 100000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 10000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 1000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 100;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 10;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var h = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601DateTimeOffsetFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var m = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int maxDayLength = 8 + 1;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int baseLength = 8 + 2;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int baseLength = 8 + 2;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: const int nanosecLength = 8;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: writer.EnsureCapacity(baseLength + ((maxDayLength == 0) ? 0 : maxDayLength) + ((nanosecond == 0) ? 0 : nanosecLength) + 6);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: hour < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: minute < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: second < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosecond < 10
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosecond < 100
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosecond < 1000
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosecond < 10000
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosecond < 100000
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Serialize,The following statement contains a magic number: nanosecond < 1000000
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var hour = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var minute = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: var second = (array[i++] - (byte)'0') * 10 + (array[i++] - (byte)'0');
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 1000000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 100000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 10000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 1000;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 100;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ISO8601TimeSpanFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DateTimeFormatter.cs,Deserialize,The following statement contains a magic number: ticks += (array[i] - (byte)'0') * 10;
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,DynamicObjectTypeFallbackFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DynamicObjectTypeFallbackFormatter.cs,Serialize,The following statement contains a magic number: il.EmitLdarg(2);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,DynamicObjectTypeFallbackFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\DynamicObjectTypeFallbackFormatter.cs,Serialize,The following statement contains a magic number: il.EmitLdarg(3);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TwoDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var buffer = new ArrayBuffer<ArrayBuffer<T>>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TwoDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var innerArray = new ArrayBuffer<T>(guessInnerLength == 0 ? 4 : guessInnerLength);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ThreeDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var buffer = new ArrayBuffer<ArrayBuffer<ArrayBuffer<T>>>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ThreeDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var innerArray = new ArrayBuffer<ArrayBuffer<T>>(guessInnerLength == 0 ? 4 : guessInnerLength);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ThreeDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var innerArray2 = new ArrayBuffer<T>(guessInnerLength2 == 0 ? 4 : guessInnerLength2);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,FourDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var buffer = new ArrayBuffer<ArrayBuffer<ArrayBuffer<ArrayBuffer<T>>>>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,FourDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var innerArray = new ArrayBuffer<ArrayBuffer<ArrayBuffer<T>>>(guessInnerLength == 0 ? 4 : guessInnerLength);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,FourDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var innerArray2 = new ArrayBuffer<ArrayBuffer<T>>(guessInnerLength2 == 0 ? 4 : guessInnerLength2);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,FourDimentionalArrayFormatter<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\MultiDimentionalArrayFormatter.cs,Deserialize,The following statement contains a magic number: var innerArray3 = new ArrayBuffer<T>(guessInnerLength3 == 0 ? 4 : guessInnerLength3);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Serialize,The following statement contains a magic number: switch (key)                  {                      case 0: writer.WriteBoolean((bool)value); return;                      case 1: CharFormatter.Default.Serialize(ref writer' (char)value' formatterResolver); return;                      case 2: writer.WriteSByte((sbyte)value); return;                      case 3: writer.WriteByte((byte)value); return;                      case 4: writer.WriteInt16((Int16)value); return;                      case 5: writer.WriteUInt16((UInt16)value); return;                      case 6: writer.WriteInt32((int)value); return;                      case 7: writer.WriteUInt32((UInt32)value); return;                      case 8: writer.WriteInt64((long)value); return;                      case 9: writer.WriteUInt64((UInt64)value); return;                      case 10: writer.WriteSingle((float)value); return;                      case 11: writer.WriteDouble((double)value); return;                      case 12: ISO8601DateTimeFormatter.Default.Serialize(ref writer' (DateTime)value' formatterResolver); return;                      case 13: writer.WriteString((string)value); return;                      case 14: ByteArrayFormatter.Default.Serialize(ref writer' (byte[])value' formatterResolver); return;                      default:                          break;                  }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,PrimitiveObjectFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\PrimitiveObjectFormatter.cs,Deserialize,The following statement contains a magic number: switch (token)              {                  case JsonToken.BeginObject:                      {                          var dict = new Dictionary<string' object>();                          reader.ReadIsBeginObjectWithVerify();                          var count = 0;                          while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref count))                          {                              var key = reader.ReadPropertyName();                              var value = Deserialize(ref reader' formatterResolver);                              dict.Add(key' value);                          }                          return dict;                      }                  case JsonToken.BeginArray:                      {                          var list = new List<object>(4);                          reader.ReadIsBeginArrayWithVerify();                          var count = 0;                          while (!reader.ReadIsEndArrayWithSkipValueSeparator(ref count))                          {                              list.Add(Deserialize(ref reader' formatterResolver));                          }                          return list;                      }                  case JsonToken.Number:  					var numberSegment = reader.ReadNumberSegment();  					// conditional operator here would cast both to double' so don't use.  					if (numberSegment.IsDouble())  						return NumberConverter.ReadDouble(numberSegment.Array' numberSegment.Offset' out _);    					// potential overflow if larger than int64  					return NumberConverter.ReadInt64(numberSegment.Array' numberSegment.Offset' out _);  				case JsonToken.String:                      return reader.ReadString();                  case JsonToken.True:                      return reader.ReadBoolean(); // require advance                  case JsonToken.False:                      return reader.ReadBoolean(); // require advance                  case JsonToken.ValueSeparator:                  case JsonToken.NameSeparator:                  case JsonToken.EndArray:                  case JsonToken.EndObject:                      throw new InvalidOperationException("Invalid Json Token:" + token);                  case JsonToken.Null:                      reader.ReadIsNull();                      return null;                  case JsonToken.None:                  default:                      return null;              }
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,GuidFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,Serialize,The following statement contains a magic number: writer.EnsureCapacity(38);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,GuidFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,Serialize,The following statement contains a magic number: writer.AdvanceOffset(36);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,BitArrayFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\StandardClassLibraryFormatters.cs,Deserialize,The following statement contains a magic number: var buffer = new ArrayBuffer<bool>(4);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary3 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary4 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary4 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary5 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary5 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary5 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,TupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[2]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[2]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[3]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[2]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[3]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[4]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[2]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[3]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[4]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[5]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[2]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[3]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[4]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[5]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[6]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[2]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[3]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[4]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[5]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[6]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Serialize,The following statement contains a magic number: writer.WriteRaw(cache[7]);
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					case 7:  						item8 = formatterResolver.GetFormatterWithVerify<TRest>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					case 7:  						item8 = formatterResolver.GetFormatterWithVerify<TRest>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					case 7:  						item8 = formatterResolver.GetFormatterWithVerify<TRest>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					case 7:  						item8 = formatterResolver.GetFormatterWithVerify<TRest>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					case 7:  						item8 = formatterResolver.GetFormatterWithVerify<TRest>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,TupleFormatter<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\TupleFormatter.cs,Deserialize,The following statement contains a magic number: switch (key)  				{  					case 0:  						item1 = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						item2 = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						item3 = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						item4 = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader' formatterResolver);  						break;  					case 4:  						item5 = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader' formatterResolver);  						break;  					case 5:  						item6 = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader' formatterResolver);  						break;  					case 6:  						item7 = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader' formatterResolver);  						break;  					case 7:  						item8 = formatterResolver.GetFormatterWithVerify<TRest>().Deserialize(ref reader' formatterResolver);  						break;  					default:  						reader.ReadNextBlock();  						break;  				}
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary3 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary4 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary4 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary5 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary5 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary5 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary6 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary7 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Formatters,ValueTupleFormatterHelper,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Formatters\ValueTupleFormatter.cs,ValueTupleFormatterHelper,The following statement contains a magic number: dictionary8 = new AutomataDictionary  			{  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item1")' 0 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item2")' 1 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item3")' 2 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item4")' 3 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item5")' 4 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item6")' 5 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Item7")' 6 }'  				{JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rest")' 7 }'  			};
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ArrayBuffer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ArrayBuffer.cs,Add,The following statement contains a magic number: Array.Resize(ref Buffer' Size * 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ArrayPool<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ArrayPool.cs,ArrayPool,The following statement contains a magic number: this.buffers = new T[4][];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ArrayPool<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ArrayPool.cs,Rent,The following statement contains a magic number: Array.Resize(ref buffers' buffers.Length * 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataDictionary,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,ToStringCore,The following statement contains a magic number: sb.Append(' '' depth * 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,Add,The following statement contains a magic number: Array.Resize<AutomataNode>(ref nexts' (count == 0) ? 4 : (count * 2));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,Add,The following statement contains a magic number: Array.Resize<AutomataNode>(ref nexts' (count == 0) ? 4 : (count * 2));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,Add,The following statement contains a magic number: Array.Resize<ulong>(ref nextKeys' (count == 0) ? 4 : (count * 2));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,Add,The following statement contains a magic number: Array.Resize<ulong>(ref nextKeys' (count == 0) ? 4 : (count * 2));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,SearchNext,The following statement contains a magic number: count < 4
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,SearchNextSafe,The following statement contains a magic number: count < 4
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,EmitSearchNextCore,The following statement contains a magic number: count < 4
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKey,The following statement contains a magic number: readSize = 8;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKey,The following statement contains a magic number: rest >= 8
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: key = (ulong)bytes[offset] << 0 | (ulong)bytes[offset + 1] << 8 | (ulong)bytes[offset + 2] << 16 | (ulong)bytes[offset + 3] << 24                              | (ulong)bytes[offset + 4] << 32 | (ulong)bytes[offset + 5] << 40 | (ulong)bytes[offset + 6] << 48 | (ulong)bytes[offset + 7] << 56;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: readSize = 8;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,AutomataKeyGen,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\AutomataDictionary.cs,GetKeySafe,The following statement contains a magic number: rest >= 8
Magic Number,Elasticsearch.Net.Utf8Json.Internal,BinaryUtil,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\BinaryUtil.cs,EnsureCapacity,The following statement contains a magic number: num = 256;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,BinaryUtil,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\BinaryUtil.cs,EnsureCapacity,The following statement contains a magic number: num < 256
Magic Number,Elasticsearch.Net.Utf8Json.Internal,BinaryUtil,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\BinaryUtil.cs,EnsureCapacity,The following statement contains a magic number: var newSize = unchecked((current * 2));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayComparer,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayComparer.cs,Equals,The following statement contains a magic number: fixed (byte* p2 = &ys[ysOffset])              {                  switch (xsCount)                  {                      case 0:                          return true;                      case 1:                          return *p1 == *p2;                      case 2:                          return *(short*)p1 == *(short*)p2;                      case 3:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(short*)(p1 + 1) == *(short*)(p2 + 1);                      case 4:                          return *(int*)p1 == *(int*)p2;                      case 5:                          if (*(byte*)p1 != *(byte*)p2) return false;                          return *(int*)(p1 + 1) == *(int*)(p2 + 1);                      case 6:                          if (*(short*)p1 != *(short*)p2) return false;                          return *(int*)(p1 + 2) == *(int*)(p2 + 2);                      case 7:                          if (*(byte*)p1 != *(byte*)p2) return false;                          if (*(short*)(p1 + 1) != *(short*)(p2 + 1)) return false;                          return *(int*)(p1 + 3) == *(int*)(p2 + 3);                      default:                          {                              var x1 = p1;                              var x2 = p2;                                byte* xEnd = p1 + xsCount - 8;                              byte* yEnd = p2 + ysCount - 8;                                while (x1 < xEnd)                              {                                  if (*(long*)x1 != *(long*)x2)                                  {                                      return false;                                  }                                    x1 += 8;                                  x2 += 8;                              }                                return *(long*)xEnd == *(long*)yEnd;                          }                  }              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayStringHashTable<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayStringHashTable.cs,CalculateCapacity,The following statement contains a magic number: return 8;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ByteArrayStringHashTable<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ByteArrayStringHashTable.cs,CalculateCapacity,The following statement contains a magic number: capacity < 8
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: count <= 4
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Rotate32,The following statement contains a magic number: return shift == 0 ? val : ((val >> shift) | (val << (32 - shift)));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,fmix,The following statement contains a magic number: h ^= h >> 16;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,fmix,The following statement contains a magic number: h ^= h >> 13;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,fmix,The following statement contains a magic number: h ^= h >> 16;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Mur,The following statement contains a magic number: a = Rotate32(a' 17);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Mur,The following statement contains a magic number: h = Rotate32(h' 19);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Mur,The following statement contains a magic number: return h * 5 + 0xe6546b64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len0to4,The following statement contains a magic number: uint c = 9;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len5to12,The following statement contains a magic number: uint a = len' b = len * 5' c = 9' d = b;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len5to12,The following statement contains a magic number: uint a = len' b = len * 5' c = 9' d = b;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len5to12,The following statement contains a magic number: b += Fetch32(s + len - 4);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len5to12,The following statement contains a magic number: c += Fetch32(s + ((len >> 1) & 4));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len13to24,The following statement contains a magic number: uint a = Fetch32(s - 4 + (len >> 1));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len13to24,The following statement contains a magic number: uint b = Fetch32(s + 4);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len13to24,The following statement contains a magic number: uint c = Fetch32(s + len - 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len13to24,The following statement contains a magic number: uint f = Fetch32(s + len - 4);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len13to24,The following statement contains a magic number: a = Rotate32(a' 12) + f;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len13to24,The following statement contains a magic number: a = Rotate32(a' 3) + c;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32Len13to24,The following statement contains a magic number: a = Rotate32(a + f' 12) + d;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: return len <= 12 ? Hash32Len5to12(s' len) : Hash32Len13to24(s' len);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: len <= 24
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a0 = Rotate32(Fetch32(s + len - 4) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a0 = Rotate32(Fetch32(s + len - 4) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a1 = Rotate32(Fetch32(s + len - 8) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a1 = Rotate32(Fetch32(s + len - 8) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a2 = Rotate32(Fetch32(s + len - 16) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a2 = Rotate32(Fetch32(s + len - 16) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a3 = Rotate32(Fetch32(s + len - 12) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a3 = Rotate32(Fetch32(s + len - 12) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a4 = Rotate32(Fetch32(s + len - 20) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint a4 = Rotate32(Fetch32(s + len - 20) * c1' 17) * c2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = Rotate32(h' 19);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = h * 5 + 0xe6546b64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = Rotate32(h' 19);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = h * 5 + 0xe6546b64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: g = Rotate32(g' 19);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: g = g * 5 + 0xe6546b64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: g = Rotate32(g' 19);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: g = g * 5 + 0xe6546b64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: f = Rotate32(f' 19) + 113;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: f = Rotate32(f' 19) + 113;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint iters = (len - 1) / 20;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint b = Fetch32(s + 4);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint c = Fetch32(s + 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint d = Fetch32(s + 12);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: uint e = Fetch32(s + 16);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: s += 20;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: g = Rotate32(g' 11) * c1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: g = Rotate32(g' 17) * c1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: f = Rotate32(f' 11) * c1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: f = Rotate32(f' 17) * c1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = Rotate32(h + g' 19);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = h * 5 + 0xe6546b64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = Rotate32(h' 17) * c1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = Rotate32(h + f' 19);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = h * 5 + 0xe6546b64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash32,The following statement contains a magic number: h = Rotate32(h' 17) * c1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Rotate64,The following statement contains a magic number: return shift == 0 ? val : (val >> shift) | (val << (64 - shift));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,ShiftMix,The following statement contains a magic number: return val ^ (val >> 47);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen16,The following statement contains a magic number: a ^= a >> 47;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen16,The following statement contains a magic number: b ^= b >> 47;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64,The following statement contains a magic number: len <= 16
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64,The following statement contains a magic number: len <= 32
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64,The following statement contains a magic number: len <= 64
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64,The following statement contains a magic number: len <= 96
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64,The following statement contains a magic number: len <= 256
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: ulong mul = k2 + len * 2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: ulong b = Fetch64(s + len - 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: ulong c = Rotate64(b' 37) * mul + a;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: ulong d = (Rotate64(a' 25) + b) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: len >= 8
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: ulong mul = k2 + len * 2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: return HashLen16(len + (a << 3)' Fetch32(s + len - 4)' mul);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: return HashLen16(len + (a << 3)' Fetch32(s + len - 4)' mul);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: len >= 4
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: uint y = a + ((uint)b << 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen0to16,The following statement contains a magic number: uint z = len + ((uint)c << 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen17to32,The following statement contains a magic number: ulong mul = k2 + len * 2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen17to32,The following statement contains a magic number: ulong b = Fetch64(s + 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen17to32,The following statement contains a magic number: ulong c = Fetch64(s + len - 8) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen17to32,The following statement contains a magic number: ulong d = Fetch64(s + len - 16) * k2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen17to32,The following statement contains a magic number: return HashLen16(Rotate64(a + b' 43) + Rotate64(c' 30) + d'                                   a + Rotate64(b + k2' 18) + c' mul);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen17to32,The following statement contains a magic number: return HashLen16(Rotate64(a + b' 43) + Rotate64(c' 30) + d'                                   a + Rotate64(b + k2' 18) + c' mul);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen17to32,The following statement contains a magic number: return HashLen16(Rotate64(a + b' 43) + Rotate64(c' 30) + d'                                   a + Rotate64(b + k2' 18) + c' mul);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H32,The following statement contains a magic number: ulong b = Fetch64(s + 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H32,The following statement contains a magic number: ulong c = Fetch64(s + len - 8) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H32,The following statement contains a magic number: ulong d = Fetch64(s + len - 16) * k2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H32,The following statement contains a magic number: ulong u = Rotate64(a + b' 43) + Rotate64(c' 30) + d + seed0;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H32,The following statement contains a magic number: ulong u = Rotate64(a + b' 43) + Rotate64(c' 30) + d + seed0;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H32,The following statement contains a magic number: ulong v = a + Rotate64(b + k2' 18) + c + seed1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen33to64,The following statement contains a magic number: const ulong mul0 = k2 - 30;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen33to64,The following statement contains a magic number: ulong mul1 = k2 - 30 + 2 * len;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen33to64,The following statement contains a magic number: ulong mul1 = k2 - 30 + 2 * len;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen33to64,The following statement contains a magic number: ulong h0 = H32(s' 32' mul0);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen33to64,The following statement contains a magic number: ulong h1 = H32(s + len - 32' 32' mul1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen33to64,The following statement contains a magic number: ulong h1 = H32(s + len - 32' 32' mul1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: const ulong mul0 = k2 - 114;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: ulong mul1 = k2 - 114 + 2 * len;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: ulong mul1 = k2 - 114 + 2 * len;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: ulong h0 = H32(s' 32' mul0);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: ulong h1 = H32(s + 32' 32' mul1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: ulong h1 = H32(s + 32' 32' mul1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: ulong h2 = H32(s + len - 32' 32' mul1' h0' h1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: ulong h2 = H32(s + len - 32' 32' mul1' h0' h1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: return (h2 * 9 + (h0 >> 17) + (h1 >> 21)) * mul1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: return (h2 * 9 + (h0 >> 17) + (h1 >> 21)) * mul1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,HashLen65to96,The following statement contains a magic number: return (h2 * 9 + (h0 >> 17) + (h1 >> 21)) * mul1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: b = Rotate64(b + a + z' 21);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: b += Rotate64(a' 44);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: return WeakHashLen32WithSeeds(Fetch64(s)'                                            Fetch64(s + 8)'                                            Fetch64(s + 16)'                                            Fetch64(s + 24)'                                            a'                                            b);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: return WeakHashLen32WithSeeds(Fetch64(s)'                                            Fetch64(s + 8)'                                            Fetch64(s + 16)'                                            Fetch64(s + 24)'                                            a'                                            b);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: return WeakHashLen32WithSeeds(Fetch64(s)'                                            Fetch64(s + 8)'                                            Fetch64(s + 16)'                                            Fetch64(s + 24)'                                            a'                                            b);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: const ulong seed = 81;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: ulong y = seed * k1 + 113;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: ulong z = ShiftMix(y * k2 + 113) * k2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: byte* end = s + ((len - 1) / 64) * 64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: byte* end = s + ((len - 1) / 64) * 64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: byte* last64 = end + ((len - 1) & 63) - 63;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: byte* last64 = end + ((len - 1) & 63) - 63;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: x = Rotate64(x + y + v.first + Fetch64(s + 8)' 37) * k1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: x = Rotate64(x + y + v.first + Fetch64(s + 8)' 37) * k1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: y = Rotate64(y + v.second + Fetch64(s + 48)' 42) * k1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: y = Rotate64(y + v.second + Fetch64(s + 48)' 42) * k1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: y += v.first + Fetch64(s + 40);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: z = Rotate64(z + w.first' 33) * k1;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: w = WeakHashLen32WithSeeds(s + 32' z + w.second' y + Fetch64(s + 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: w = WeakHashLen32WithSeeds(s + 32' z + w.second' y + Fetch64(s + 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: s += 64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: w.first += ((len - 1) & 63);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: x = Rotate64(x + y + v.first + Fetch64(s + 8)' 37) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: x = Rotate64(x + y + v.first + Fetch64(s + 8)' 37) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: y = Rotate64(y + v.second + Fetch64(s + 48)' 42) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: y = Rotate64(y + v.second + Fetch64(s + 48)' 42) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: x ^= w.second * 9;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: y += v.first * 9 + Fetch64(s + 40);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: y += v.first * 9 + Fetch64(s + 40);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: z = Rotate64(z + w.first' 33) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: w = WeakHashLen32WithSeeds(s + 32' z + w.second' y + Fetch64(s + 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64NA,The following statement contains a magic number: w = WeakHashLen32WithSeeds(s + 32' z + w.second' y + Fetch64(s + 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,H,The following statement contains a magic number: a ^= (a >> 47);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: const ulong seed0 = 81;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong y = seed1 * k2 + 113;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: byte* end = s + ((len - 1) / 64) * 64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: byte* end = s + ((len - 1) / 64) * 64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: byte* last64 = end + ((len - 1) & 63) - 63;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: byte* last64 = end + ((len - 1) & 63) - 63;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong a1 = Fetch64(s + 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong a2 = Fetch64(s + 16);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong a3 = Fetch64(s + 24);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong a4 = Fetch64(s + 32);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong a5 = Fetch64(s + 40);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong a6 = Fetch64(s + 48);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: ulong a7 = Fetch64(s + 56);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: x = Rotate64(x' 26);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: x *= 9;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: y = Rotate64(y' 29);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: v.first = Rotate64(v.first' 33);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: v.second = Rotate64(v.second' 30);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: w.first *= 9;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: z = Rotate64(z' 32);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: z *= 9;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: w.second = Rotate64(w.second' 34);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: s += 64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: u *= 9;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: v.second = Rotate64(v.second' 28);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: v.first = Rotate64(v.first' 20);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: w.first += ((len - 1) & 63);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: x = Rotate64(y - x + v.first + Fetch64(s + 8)' 37) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: x = Rotate64(y - x + v.first + Fetch64(s + 8)' 37) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: y = Rotate64(y ^ v.second ^ Fetch64(s + 48)' 42) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: y = Rotate64(y ^ v.second ^ Fetch64(s + 48)' 42) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: x ^= w.second * 9;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: y += v.first + Fetch64(s + 40);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: z = Rotate64(z + w.first' 33) * mul;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: w = WeakHashLen32WithSeeds(s + 32' z + w.second' y + Fetch64(s + 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: w = WeakHashLen32WithSeeds(s + 32' z + w.second' y + Fetch64(s + 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: return H(HashLen16(v.first + x' w.first ^ y' mul) + z - u'                           H(v.second + y' w.second + z' k2' 30) ^ x'                           k2'                           31);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,FarmHash,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\FarmHash.cs,Hash64UO,The following statement contains a magic number: return H(HashLen16(v.first + x' w.first ^ y' mul) + z - u'                           H(v.second + y' w.second + z' k2' 30) ^ x'                           k2'                           31);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte0 = Parse(array' offset + 6);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte1 = Parse(array' offset + 4);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte2 = Parse(array' offset + 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte4 = Parse(array' offset + 10);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte5 = Parse(array' offset + 8);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte6 = Parse(array' offset + 14);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte7 = Parse(array' offset + 12);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte8 = Parse(array' offset + 16);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte9 = Parse(array' offset + 18);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte10 = Parse(array' offset + 20);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte11 = Parse(array' offset + 22);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte12 = Parse(array' offset + 24);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte13 = Parse(array' offset + 26);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte14 = Parse(array' offset + 28);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: this.Byte15 = Parse(array' offset + 30);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,GuidBits,The following statement contains a magic number: utf8string.Count == 32
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Parse,The following statement contains a magic number: return unchecked((byte)(SwitchParse(bytes[highOffset]) * 16 + SwitchParse(bytes[highOffset + 1])));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,SwitchParse,The following statement contains a magic number: switch (b)              {                  case 48:                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57:                      return unchecked((byte)((b - 48)));                  case 65:                  case 66:                  case 67:                  case 68:                  case 69:                  case 70:                      return unchecked((byte)((b - 55)));                  case 97:                  case 98:                  case 99:                  case 100:                  case 101:                  case 102:                      return unchecked((byte)((b - 87)));                  case 0:                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                  case 11:                  case 12:                  case 13:                  case 14:                  case 15:                  case 16:                  case 17:                  case 18:                  case 19:                  case 20:                  case 21:                  case 22:                  case 23:                  case 24:                  case 25:                  case 26:                  case 27:                  case 28:                  case 29:                  case 30:                  case 31:                  case 32:                  case 33:                  case 34:                  case 35:                  case 36:                  case 37:                  case 38:                  case 39:                  case 40:                  case 41:                  case 42:                  case 43:                  case 44:                  case 45:                  case 46:                  case 47:                  case 58:                  case 59:                  case 60:                  case 61:                  case 62:                  case 63:                  case 64:                  case 71:                  case 72:                  case 73:                  case 74:                  case 75:                  case 76:                  case 77:                  case 78:                  case 79:                  case 80:                  case 81:                  case 82:                  case 83:                  case 84:                  case 85:                  case 86:                  case 87:                  case 88:                  case 89:                  case 90:                  case 91:                  case 92:                  case 93:                  case 94:                  case 95:                  case 96:                  default:                      throw new ArgumentException("Invalid Guid Pattern.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 6] = byteToHexStringHigh[Byte0];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 7] = byteToHexStringLow[Byte0];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 4] = byteToHexStringHigh[Byte1];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 5] = byteToHexStringLow[Byte1];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 2] = byteToHexStringHigh[Byte2];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 3] = byteToHexStringLow[Byte2];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 8] = (byte)'-';
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 11] = byteToHexStringHigh[Byte4];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 12] = byteToHexStringLow[Byte4];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 9] = byteToHexStringHigh[Byte5];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 10] = byteToHexStringLow[Byte5];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 13] = (byte)'-';
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 16] = byteToHexStringHigh[Byte6];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 17] = byteToHexStringLow[Byte6];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 14] = byteToHexStringHigh[Byte7];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 15] = byteToHexStringLow[Byte7];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 18] = (byte)'-';
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 19] = byteToHexStringHigh[Byte8];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 20] = byteToHexStringLow[Byte8];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 21] = byteToHexStringHigh[Byte9];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 22] = byteToHexStringLow[Byte9];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 23] = (byte)'-';
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 24] = byteToHexStringHigh[Byte10];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 25] = byteToHexStringLow[Byte10];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 26] = byteToHexStringHigh[Byte11];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 27] = byteToHexStringLow[Byte11];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 28] = byteToHexStringHigh[Byte12];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 29] = byteToHexStringLow[Byte12];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 30] = byteToHexStringHigh[Byte13];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 31] = byteToHexStringLow[Byte13];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 32] = byteToHexStringHigh[Byte14];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 33] = byteToHexStringLow[Byte14];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 34] = byteToHexStringHigh[Byte15];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,GuidBits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\GuidBits.cs,Write,The following statement contains a magic number: buffer[offset + 35] = byteToHexStringLow[Byte15];
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,IsNumberRepresentation,The following statement contains a magic number: switch (c)              {                  case 43: // +                  case 45: // -                  case 46: // .                  case 48: // 0                  case 49:                  case 50:                  case 51:                  case 52:                  case 53:                  case 54:                  case 55:                  case 56:                  case 57: // 9                      return true;                  case 44:                  case 47:                  default:                      return false;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,ReadInt64,The following statement contains a magic number: value = unchecked(value * 10 + (bytes[i] - '0'));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,ReadUInt64,The following statement contains a magic number: value = checked(value * 10 + (ulong)(bytes[i] - '0'));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: num1 < 10
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: num1 < 100
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 3);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: num1 < 1000
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 4);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: num1 < 10000
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 8389UL) >> 23));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 8389UL) >> 23));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: num1 -= div * 1000;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 5243UL) >> 19));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 5243UL) >> 19));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: num1 -= div * 100;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 6554UL) >> 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 6554UL) >> 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteUInt64,The following statement contains a magic number: num1 -= div * 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 20);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: num1 < 10
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: num1 < 100
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 3);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: num1 < 1000
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: BinaryUtil.EnsureCapacity(ref buffer' offset' 4);
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: num1 < 10000
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 8389L) >> 23));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 8389L) >> 23));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: num1 -= div * 1000;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 5243L) >> 19));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 5243L) >> 19));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: num1 -= div * 100;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 6554L) >> 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: buffer[offset++] = (byte)('0' + (div = (num1 * 6554L) >> 16));
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,WriteInt64,The following statement contains a magic number: num1 -= div * 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,ReadBoolean,The following statement contains a magic number: bytes[offset + 2] != 'u'
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,ReadBoolean,The following statement contains a magic number: bytes[offset + 3] != 'e'
Magic Number,Elasticsearch.Net.Utf8Json.Internal,NumberConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\NumberConverter.cs,ReadBoolean,The following statement contains a magic number: readCount = 4;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ThreadsafeTypeKeyHashTable<TValue>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ThreadsafeTypeKeyHashTable.cs,CalculateCapacity,The following statement contains a magic number: return 8;
Magic Number,Elasticsearch.Net.Utf8Json.Internal,ThreadsafeTypeKeyHashTable<TValue>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\ThreadsafeTypeKeyHashTable.cs,CalculateCapacity,The following statement contains a magic number: capacity < 8
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw6,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 2) = *(int*)(pSrc + 2);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw6,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 2) = *(int*)(pSrc + 2);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw7,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 3) = *(int*)(pSrc + 3);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw7,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 3) = *(int*)(pSrc + 3);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw8,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw8,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw9,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 5) = *(int*)(pSrc + 5);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw9,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 5) = *(int*)(pSrc + 5);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw9,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 5) = *(int*)(pSrc + 5);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw9,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 5) = *(int*)(pSrc + 5);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw10,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 6) = *(int*)(pSrc + 6);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw10,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 6) = *(int*)(pSrc + 6);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw10,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 6) = *(int*)(pSrc + 6);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw10,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 6) = *(int*)(pSrc + 6);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw11,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 7) = *(int*)(pSrc + 7);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw11,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 7) = *(int*)(pSrc + 7);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw11,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 7) = *(int*)(pSrc + 7);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw11,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 7) = *(int*)(pSrc + 7);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw12,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw12,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw12,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw12,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 9) = *(int*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 9) = *(int*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 9) = *(int*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 9) = *(int*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 9) = *(int*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 9) = *(int*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 10) = *(int*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 10) = *(int*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 10) = *(int*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 10) = *(int*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 10) = *(int*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 10) = *(int*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 11) = *(int*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 11) = *(int*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 11) = *(int*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 11) = *(int*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 11) = *(int*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 11) = *(int*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 13) = *(int*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 14) = *(int*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 15) = *(int*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 17) = *(int*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 18) = *(int*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 19) = *(int*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 21) = *(int*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 22) = *(int*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 23) = *(int*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 25) = *(int*)(pSrc + 25);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 26) = *(int*)(pSrc + 26);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory32,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 4) = *(int*)(pSrc + 4);                  *(int*)(pDst + 8) = *(int*)(pSrc + 8);                  *(int*)(pDst + 12) = *(int*)(pSrc + 12);                  *(int*)(pDst + 16) = *(int*)(pSrc + 16);                  *(int*)(pDst + 20) = *(int*)(pSrc + 20);                  *(int*)(pDst + 24) = *(int*)(pSrc + 24);                  *(int*)(pDst + 27) = *(int*)(pSrc + 27);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw10,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 2) = *(long*)(pSrc + 2);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw10,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 2) = *(long*)(pSrc + 2);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw11,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 3) = *(long*)(pSrc + 3);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw11,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 3) = *(long*)(pSrc + 3);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw12,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 4) = *(long*)(pSrc + 4);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw12,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 4) = *(long*)(pSrc + 4);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 5) = *(long*)(pSrc + 5);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw13,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 5) = *(long*)(pSrc + 5);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 6) = *(long*)(pSrc + 6);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw14,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 6) = *(long*)(pSrc + 6);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 7) = *(long*)(pSrc + 7);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw15,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 7) = *(long*)(pSrc + 7);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw16,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 9) = *(long*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 9) = *(long*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 9) = *(long*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw17,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 9) = *(long*)(pSrc + 9);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 10) = *(long*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 10) = *(long*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 10) = *(long*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw18,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 10) = *(long*)(pSrc + 10);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 11) = *(long*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 11) = *(long*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 11) = *(long*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw19,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 11) = *(long*)(pSrc + 11);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 12) = *(long*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 12) = *(long*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 12) = *(long*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw20,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 12) = *(long*)(pSrc + 12);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 13) = *(long*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 13) = *(long*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 13) = *(long*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw21,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 13) = *(long*)(pSrc + 13);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 14) = *(long*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 14) = *(long*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 14) = *(long*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw22,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 14) = *(long*)(pSrc + 14);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 15) = *(long*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 15) = *(long*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 15) = *(long*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw23,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 15) = *(long*)(pSrc + 15);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw24,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 17) = *(long*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 17) = *(long*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 17) = *(long*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 17) = *(long*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 17) = *(long*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw25,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 17) = *(long*)(pSrc + 17);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 18) = *(long*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 18) = *(long*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 18) = *(long*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 18) = *(long*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 18) = *(long*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw26,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 18) = *(long*)(pSrc + 18);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 19) = *(long*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 19) = *(long*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 19) = *(long*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 19) = *(long*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 19) = *(long*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw27,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 19) = *(long*)(pSrc + 19);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 20) = *(long*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 20) = *(long*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 20) = *(long*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 20) = *(long*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 20) = *(long*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw28,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 20) = *(long*)(pSrc + 20);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 21) = *(long*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 21) = *(long*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 21) = *(long*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 21) = *(long*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 21) = *(long*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw29,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 21) = *(long*)(pSrc + 21);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 22) = *(long*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 22) = *(long*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 22) = *(long*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 22) = *(long*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 22) = *(long*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw30,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 22) = *(long*)(pSrc + 22);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 23) = *(long*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 23) = *(long*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 23) = *(long*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 23) = *(long*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 23) = *(long*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw31,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(long*)(pDst + 0) = *(long*)(pSrc + 0);                  *(long*)(pDst + 8) = *(long*)(pSrc + 8);                  *(long*)(pDst + 16) = *(long*)(pSrc + 16);                  *(long*)(pDst + 23) = *(long*)(pSrc + 23);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw6,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 2) = *(int*)(pSrc + 2);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw6,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 2) = *(int*)(pSrc + 2);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw7,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 3) = *(int*)(pSrc + 3);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory64,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.cs,WriteRaw7,The following statement contains a magic number: fixed (byte* pDst = &writer.buffer[writer.offset])              {                  *(int*)(pDst + 0) = *(int*)(pSrc + 0);                  *(int*)(pDst + 3) = *(int*)(pSrc + 3);              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal,UnsafeMemory,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\UnsafeMemory.Low.cs,WriteRaw,The following statement contains a magic number: switch (src.Length)              {                  case 0: break;                  case 1: if (Is32Bit) { UnsafeMemory32.WriteRaw1(ref writer' src); } else { UnsafeMemory64.WriteRaw1(ref writer' src); } break;                  case 2: if (Is32Bit) { UnsafeMemory32.WriteRaw2(ref writer' src); } else { UnsafeMemory64.WriteRaw2(ref writer' src); } break;                  case 3: if (Is32Bit) { UnsafeMemory32.WriteRaw3(ref writer' src); } else { UnsafeMemory64.WriteRaw3(ref writer' src); } break;                  case 4: if (Is32Bit) { UnsafeMemory32.WriteRaw4(ref writer' src); } else { UnsafeMemory64.WriteRaw4(ref writer' src); } break;                  case 5: if (Is32Bit) { UnsafeMemory32.WriteRaw5(ref writer' src); } else { UnsafeMemory64.WriteRaw5(ref writer' src); } break;                  case 6: if (Is32Bit) { UnsafeMemory32.WriteRaw6(ref writer' src); } else { UnsafeMemory64.WriteRaw6(ref writer' src); } break;                  case 7: if (Is32Bit) { UnsafeMemory32.WriteRaw7(ref writer' src); } else { UnsafeMemory64.WriteRaw7(ref writer' src); } break;                  case 8: if (Is32Bit) { UnsafeMemory32.WriteRaw8(ref writer' src); } else { UnsafeMemory64.WriteRaw8(ref writer' src); } break;                  case 9: if (Is32Bit) { UnsafeMemory32.WriteRaw9(ref writer' src); } else { UnsafeMemory64.WriteRaw9(ref writer' src); } break;                  case 10: if (Is32Bit) { UnsafeMemory32.WriteRaw10(ref writer' src); } else { UnsafeMemory64.WriteRaw10(ref writer' src); } break;                  case 11: if (Is32Bit) { UnsafeMemory32.WriteRaw11(ref writer' src); } else { UnsafeMemory64.WriteRaw11(ref writer' src); } break;                  case 12: if (Is32Bit) { UnsafeMemory32.WriteRaw12(ref writer' src); } else { UnsafeMemory64.WriteRaw12(ref writer' src); } break;                  case 13: if (Is32Bit) { UnsafeMemory32.WriteRaw13(ref writer' src); } else { UnsafeMemory64.WriteRaw13(ref writer' src); } break;                  case 14: if (Is32Bit) { UnsafeMemory32.WriteRaw14(ref writer' src); } else { UnsafeMemory64.WriteRaw14(ref writer' src); } break;                  case 15: if (Is32Bit) { UnsafeMemory32.WriteRaw15(ref writer' src); } else { UnsafeMemory64.WriteRaw15(ref writer' src); } break;                  case 16: if (Is32Bit) { UnsafeMemory32.WriteRaw16(ref writer' src); } else { UnsafeMemory64.WriteRaw16(ref writer' src); } break;                  case 17: if (Is32Bit) { UnsafeMemory32.WriteRaw17(ref writer' src); } else { UnsafeMemory64.WriteRaw17(ref writer' src); } break;                  case 18: if (Is32Bit) { UnsafeMemory32.WriteRaw18(ref writer' src); } else { UnsafeMemory64.WriteRaw18(ref writer' src); } break;                  case 19: if (Is32Bit) { UnsafeMemory32.WriteRaw19(ref writer' src); } else { UnsafeMemory64.WriteRaw19(ref writer' src); } break;                  case 20: if (Is32Bit) { UnsafeMemory32.WriteRaw20(ref writer' src); } else { UnsafeMemory64.WriteRaw20(ref writer' src); } break;                  case 21: if (Is32Bit) { UnsafeMemory32.WriteRaw21(ref writer' src); } else { UnsafeMemory64.WriteRaw21(ref writer' src); } break;                  case 22: if (Is32Bit) { UnsafeMemory32.WriteRaw22(ref writer' src); } else { UnsafeMemory64.WriteRaw22(ref writer' src); } break;                  case 23: if (Is32Bit) { UnsafeMemory32.WriteRaw23(ref writer' src); } else { UnsafeMemory64.WriteRaw23(ref writer' src); } break;                  case 24: if (Is32Bit) { UnsafeMemory32.WriteRaw24(ref writer' src); } else { UnsafeMemory64.WriteRaw24(ref writer' src); } break;                  case 25: if (Is32Bit) { UnsafeMemory32.WriteRaw25(ref writer' src); } else { UnsafeMemory64.WriteRaw25(ref writer' src); } break;                  case 26: if (Is32Bit) { UnsafeMemory32.WriteRaw26(ref writer' src); } else { UnsafeMemory64.WriteRaw26(ref writer' src); } break;                  case 27: if (Is32Bit) { UnsafeMemory32.WriteRaw27(ref writer' src); } else { UnsafeMemory64.WriteRaw27(ref writer' src); } break;                  case 28: if (Is32Bit) { UnsafeMemory32.WriteRaw28(ref writer' src); } else { UnsafeMemory64.WriteRaw28(ref writer' src); } break;                  case 29: if (Is32Bit) { UnsafeMemory32.WriteRaw29(ref writer' src); } else { UnsafeMemory64.WriteRaw29(ref writer' src); } break;                  case 30: if (Is32Bit) { UnsafeMemory32.WriteRaw30(ref writer' src); } else { UnsafeMemory64.WriteRaw30(ref writer' src); } break;                  case 31: if (Is32Bit) { UnsafeMemory32.WriteRaw31(ref writer' src); } else { UnsafeMemory64.WriteRaw31(ref writer' src); } break;                  default:                      MemoryCopy(ref writer' src);                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: ulong a = f >> 32;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: ulong c = other.f >> 32;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: ulong tmp = (bd >> 32) + (ad & kM32) + (bc & kM32);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: tmp += 1U << 31;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: ulong result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: ulong result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: ulong result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Multiply,The following statement contains a magic number: e += other.e + 64;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Normalize,The following statement contains a magic number: significand <<= 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DiyFp,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DiyFp.cs,Normalize,The following statement contains a magic number: exponent -= 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,GetToStringBuffer,The following statement contains a magic number: toStringBuffer = new byte[24];
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,RoundWeed,The following statement contains a magic number: return (2 * unit <= rest) && (rest <= unsafe_interval - 4 * unit);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,RoundWeed,The following statement contains a magic number: return (2 * unit <= rest) && (rest <= unsafe_interval - 4 * unit);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,BiggestPowerTen,The following statement contains a magic number: int exponent_plus_one_guess = ((number_bits + 1) * 1233 >> 12);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,BiggestPowerTen,The following statement contains a magic number: int exponent_plus_one_guess = ((number_bits + 1) * 1233 >> 12);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,DigitGen,The following statement contains a magic number: divisor /= 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,DigitGen,The following statement contains a magic number: fractionals *= 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,DigitGen,The following statement contains a magic number: unit *= 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,DigitGen,The following statement contains a magic number: unsafe_interval.f = (unsafe_interval.f * 10);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,CreateExponentialRepresentation,The following statement contains a magic number: const int kMaxExponentLength = 5;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,CreateExponentialRepresentation,The following statement contains a magic number: buffer[--first_char_pos] = (byte)((byte)'0' + (exponent % 10));
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,DoubleToStringConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\DoubleToStringConverter.cs,CreateExponentialRepresentation,The following statement contains a magic number: exponent /= 10;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,Double,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\IEEE.cs,UpperBoundary,The following statement contains a magic number: return new DiyFp(Significand() * 2 + 1' Exponent() - 1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,Double,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\IEEE.cs,NormalizedBoundaries,The following statement contains a magic number: m_minus = new DiyFp((v.f << 2) - 1' v.e - 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,Double,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\IEEE.cs,NormalizedBoundaries,The following statement contains a magic number: m_minus = new DiyFp((v.f << 2) - 1' v.e - 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,Single,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\IEEE.cs,NormalizedBoundaries,The following statement contains a magic number: m_minus = new DiyFp((v.f << 2) - 1' v.e - 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,Single,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\IEEE.cs,NormalizedBoundaries,The following statement contains a magic number: m_minus = new DiyFp((v.f << 2) - 1' v.e - 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,Single,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\IEEE.cs,UpperBoundary,The following statement contains a magic number: return new DiyFp(Significand() * 2 + 1' Exponent() - 1);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,ReadUint64,The following statement contains a magic number: result = 10 * result + (ulong)digit;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,ReadUint64,The following statement contains a magic number: i < buffer.length() && result <= (kMaxUint64 / 10 - 1)
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,AdjustmentPowerOfTen,The following statement contains a magic number: switch (exponent)              {                  case 1: return new DiyFp(0xa000000000000000' -60);                  case 2: return new DiyFp(0xc800000000000000' -57);                  case 3: return new DiyFp(0xfa00000000000000' -54);                  case 4: return new DiyFp(0x9c40000000000000' -50);                  case 5: return new DiyFp(0xc350000000000000' -47);                  case 6: return new DiyFp(0xf424000000000000' -44);                  case 7: return new DiyFp(0x9896800000000000' -40);                  default:                      throw new Exception("unreached code.");              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,DiyFpStrtod,The following statement contains a magic number: const int kDenominatorLog = 3;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,DiyFpStrtod,The following statement contains a magic number: uint64_t error = (ulong)(remaining_decimals == 0 ? 0 : kDenominator / 2);
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,DiyFpStrtod,The following statement contains a magic number: int error_b = kDenominator / 2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDouble,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDouble.cs,DiyFpStrtod,The following statement contains a magic number: int fixed_error = kDenominator / 2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,GetFallbackBuffer,The following statement contains a magic number: fallbackBuffer = new byte[99];
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,isWhitespace,The following statement contains a magic number: x < 128
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,StringToIeee,The following statement contains a magic number: const int max_exponent = int.MaxValue / 2;
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,StringToIeee,The following statement contains a magic number: num >= max_exponent / 10                          && !(num == max_exponent / 10 && digit <= max_exponent % 10)
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,StringToIeee,The following statement contains a magic number: num >= max_exponent / 10                          && !(num == max_exponent / 10 && digit <= max_exponent % 10)
Magic Number,Elasticsearch.Net.Utf8Json.Internal.DoubleConversion,StringToDoubleConverter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\DoubleConversion\StringToDoubleConverter.cs,StringToIeee,The following statement contains a magic number: num >= max_exponent / 10                          && !(num == max_exponent / 10 && digit <= max_exponent % 10)
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdloc,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Ldloc_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldloc_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldloc_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldloc_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdloc,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Ldloc_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldloc_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldloc_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldloc_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdloc,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Ldloc_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldloc_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldloc_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldloc_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitStloc,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Stloc_0);                      break;                  case 1:                      il.Emit(OpCodes.Stloc_1);                      break;                  case 2:                      il.Emit(OpCodes.Stloc_2);                      break;                  case 3:                      il.Emit(OpCodes.Stloc_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitStloc,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Stloc_0);                      break;                  case 1:                      il.Emit(OpCodes.Stloc_1);                      break;                  case 2:                      il.Emit(OpCodes.Stloc_2);                      break;                  case 3:                      il.Emit(OpCodes.Stloc_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitStloc,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Stloc_0);                      break;                  case 1:                      il.Emit(OpCodes.Stloc_1);                      break;                  case 2:                      il.Emit(OpCodes.Stloc_2);                      break;                  case 3:                      il.Emit(OpCodes.Stloc_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdloca,The following statement contains a magic number: index <= 255
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdc_I4,The following statement contains a magic number: switch (value)              {                  case -1:                      il.Emit(OpCodes.Ldc_I4_M1);                      break;                  case 0:                      il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdarg,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldarg_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldarg' index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdarg,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldarg_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldarg' index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdarg,The following statement contains a magic number: switch (index)              {                  case 0:                      il.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      il.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      il.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      il.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldarg_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldarg' index);                      }                      break;              }
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitLdarga,The following statement contains a magic number: index <= 255
Magic Number,Elasticsearch.Net.Utf8Json.Internal.Emit,ILGeneratorExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Internal\Emit\ILGeneratorExtensions.cs,EmitStarg,The following statement contains a magic number: index <= 255
Magic Number,Elasticsearch.Net.Utf8Json.Resolvers,DynamicCompositeResolver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\CompositeResolver.cs,Create,The following statement contains a magic number: il.EmitLdarg(2);
Magic Number,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildAnonymousFormatter,The following statement contains a magic number: BuildSerialize(type' serializationInfo' il' () =>  				{  					il.EmitLdarg(0);  				}' (index' member) =>  				{  					if (serializeCustomFormatters.Count == 0) return false;  					if (serializeCustomFormatters[index] == null) return false;    					il.EmitLdarg(1); // read object[]  					il.EmitLdc_I4(index);  					il.Emit(OpCodes.Ldelem_Ref); // object  					il.Emit(OpCodes.Castclass' serializeCustomFormatters[index].GetType());  					return true;  				}' excludeNull' hasShouldSerialize' 2);
Magic Number,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,The following statement contains a magic number: var argResolver = new ArgumentField(il' firstArgIndex + 2);
Magic Number,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,BuildSerialize,The following statement contains a magic number: rawField.Length < 32
Magic Number,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,IsSideEffectFreeConstructorType,The following statement contains a magic number: opCodes.Count == 4
Magic Number,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,IsSideEffectFreeConstructorType,The following statement contains a magic number: opCodes.Count == 3  				&& opCodes[0] == System.Reflection.Emit.OpCodes.Ldarg_0  				&& opCodes[1] == System.Reflection.Emit.OpCodes.Call  				&& opCodes[2] == System.Reflection.Emit.OpCodes.Ret
Magic Number,Elasticsearch.Net.Utf8Json.Resolvers,DynamicObjectTypeBuilder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Utf8Json\Resolvers\DynamicObjectResolver.cs,IsSideEffectFreeConstructorType,The following statement contains a magic number: opCodes.Count == 3  				&& opCodes[0] == System.Reflection.Emit.OpCodes.Ldarg_0  				&& opCodes[1] == System.Reflection.Emit.OpCodes.Call  				&& opCodes[2] == System.Reflection.Emit.OpCodes.Ret
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case Refresh.True:  					return "true";  				case Refresh.False:  					return "false";  				case Refresh.WaitFor:  					return "wait_for";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case Bytes.B:  					return "b";  				case Bytes.K:  					return "k";  				case Bytes.Kb:  					return "kb";  				case Bytes.M:  					return "m";  				case Bytes.Mb:  					return "mb";  				case Bytes.G:  					return "g";  				case Bytes.Gb:  					return "gb";  				case Bytes.T:  					return "t";  				case Bytes.Tb:  					return "tb";  				case Bytes.P:  					return "p";  				case Bytes.Pb:  					return "pb";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case Health.Green:  					return "green";  				case Health.Yellow:  					return "yellow";  				case Health.Red:  					return "red";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case Size.Raw:  					return "";  				case Size.K:  					return "k";  				case Size.M:  					return "m";  				case Size.G:  					return "g";  				case Size.T:  					return "t";  				case Size.P:  					return "p";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case ExpandWildcards.Open:  					return "open";  				case ExpandWildcards.Closed:  					return "closed";  				case ExpandWildcards.None:  					return "none";  				case ExpandWildcards.All:  					return "all";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case Level.Cluster:  					return "cluster";  				case Level.Indices:  					return "indices";  				case Level.Shards:  					return "shards";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case WaitForEvents.Immediate:  					return "immediate";  				case WaitForEvents.Urgent:  					return "urgent";  				case WaitForEvents.High:  					return "high";  				case WaitForEvents.Normal:  					return "normal";  				case WaitForEvents.Low:  					return "low";  				case WaitForEvents.Languid:  					return "languid";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case WaitForStatus.Green:  					return "green";  				case WaitForStatus.Yellow:  					return "yellow";  				case WaitForStatus.Red:  					return "red";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case DefaultOperator.And:  					return "AND";  				case DefaultOperator.Or:  					return "OR";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case VersionType.Internal:  					return "internal";  				case VersionType.External:  					return "external";  				case VersionType.ExternalGte:  					return "external_gte";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case Conflicts.Abort:  					return "abort";  				case Conflicts.Proceed:  					return "proceed";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case SearchType.QueryThenFetch:  					return "query_then_fetch";  				case SearchType.DfsQueryThenFetch:  					return "dfs_query_then_fetch";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case OpType.Index:  					return "index";  				case OpType.Create:  					return "create";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case IndicesShardStoresStatus.Green:  					return "green";  				case IndicesShardStoresStatus.Yellow:  					return "yellow";  				case IndicesShardStoresStatus.Red:  					return "red";  				case IndicesShardStoresStatus.All:  					return "all";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case ThreadType.Cpu:  					return "cpu";  				case ThreadType.Wait:  					return "wait";  				case ThreadType.Block:  					return "block";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case SuggestMode.Missing:  					return "missing";  				case SuggestMode.Popular:  					return "popular";  				case SuggestMode.Always:  					return "always";  			}
Missing Default,Elasticsearch.Net,KnownEnums,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Api\Enums.Generated.cs,GetStringValue,The following switch statement is missing a default case: switch (enumValue)  			{  				case GroupBy.Nodes:  					return "nodes";  				case GroupBy.Parents:  					return "parents";  				case GroupBy.None:  					return "none";  			}
Missing Default,Elasticsearch.Net,ErrorFormatter,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\Error.cs,Deserialize,The following switch statement is missing a default case: switch (fieldValue)  				{  					case 0:  						value.Headers = formatterResolver.GetFormatter<Dictionary<string' string>>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						value.RootCause = formatterResolver.GetFormatter<List<ErrorCause>>()  							.Deserialize(ref reader' formatterResolver);  						break;  				}
Missing Default,Elasticsearch.Net,ErrorCauseFormatter<TErrorCause>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Responses\ServerException\ErrorCause.cs,Deserialize,The following switch statement is missing a default case: switch (value)  							{  								case 0:  									errorCause.BytesLimit = reader.ReadInt64();  									break;  								case 1:  									errorCause.BytesWanted = reader.ReadInt64();  									break;  								case 2:  									errorCause.CausedBy = ErrorCauseFormatterStatics.ErrorCausePropertyFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 3:  									errorCause.Column = reader.ReadInt32();  									break;  								case 4:  									errorCause.FailedShards = formatterResolver.GetFormatter<List<ShardFailure>>()  										.Deserialize(ref reader' formatterResolver);  									break;  								case 5:  									errorCause.Grouped = reader.ReadBoolean();  									break;  								case 6:  									errorCause.Index = reader.ReadString();  									break;  								case 7:  									errorCause.IndexUUID = reader.ReadString();  									break;  								case 8:  									errorCause.Language = reader.ReadString();  									break;  								case 9:  									errorCause.LicensedExpiredFeature = reader.ReadString();  									break;  								case 10:  									errorCause.Line = reader.ReadInt32();  									break;  								case 11:  									errorCause.Phase = reader.ReadString();  									break;  								case 12:  									errorCause.Reason = reader.ReadString();  									break;  								case 13:  									errorCause.ResourceId = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 14:  									errorCause.ResourceType = reader.ReadString();  									break;  								case 15:  									errorCause.Script = reader.ReadString();  									break;  								case 16:  									errorCause.ScriptStack = ErrorCauseFormatterStatics.SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 17:  									errorCause.Shard = ErrorCauseFormatterStatics.ShardFormatter.Deserialize(ref reader' formatterResolver);  									break;  								case 18:  									errorCause.StackTrace = reader.ReadString();  									break;  								case 19:  									errorCause.Type = reader.ReadString();  									break;  							}
Missing Default,Elasticsearch.Net,PostData<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\PostData.cs,Write,The following switch statement is missing a default case: switch (Type)  			{  				case PostType.ByteArray:  					ms = settings.MemoryStreamFactory.Create(WrittenBytes);  					break;  				case PostType.LiteralString:  					ms = !string.IsNullOrEmpty(_literalString) ? settings.MemoryStreamFactory.Create(_literalString?.Utf8Bytes()) : null;  					break;  				case PostType.EnumerableOfString:  					ms = _enumerableOfStrings.HasAny()  						? settings.MemoryStreamFactory.Create((string.Join(NewLineString' _enumerableOfStrings) + NewLineString).Utf8Bytes())  						: null;  					break;  				case PostType.EnumerableOfObject:  					if (!_enumerableOfObject.HasAny()) return;    					Stream stream;  					if (DisableDirectStreaming ?? settings.DisableDirectStreaming)  					{  						ms = settings.MemoryStreamFactory.Create();  						stream = ms;  					}  					else stream = writableStream;  					foreach (var o in _enumerableOfObject)  					{  						settings.RequestResponseSerializer.Serialize(o' stream' SerializationFormatting.None);  						stream.Write(NewLineByteArray' 0' 1);  					}  					break;  				case PostType.Serializable:  					throw new Exception("PostData is not expected/capable to handle contain serializable' use SerializableData instead");  			}
Missing Default,Elasticsearch.Net,PostData<T>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Elasticsearch.Net\Transport\PostData.cs,WriteAsync,The following switch statement is missing a default case: switch (Type)  			{  				case PostType.ByteArray:  					ms = settings.MemoryStreamFactory.Create(WrittenBytes);  					break;  				case PostType.LiteralString:  					ms = !string.IsNullOrEmpty(_literalString) ? settings.MemoryStreamFactory.Create(_literalString.Utf8Bytes()) : null;  					break;  				case PostType.EnumerableOfString:  					ms = _enumerableOfStrings.HasAny()  						? settings.MemoryStreamFactory.Create((string.Join(NewLineString' _enumerableOfStrings) + NewLineString).Utf8Bytes())  						: null;  					break;  				case PostType.EnumerableOfObject:  					if (!_enumerableOfObject.HasAny()) return;    					Stream stream;  					if (DisableDirectStreaming ?? settings.DisableDirectStreaming)  					{  						ms = settings.MemoryStreamFactory.Create();  						stream = ms;  					}  					else stream = writableStream;  					foreach (var o in _enumerableOfObject)  					{  						await settings.RequestResponseSerializer.SerializeAsync(o' stream' SerializationFormatting.None' cancellationToken)  							.ConfigureAwait(false);  						await stream.WriteAsync(NewLineByteArray' 0' 1' cancellationToken).ConfigureAwait(false);  					}  					break;  				case PostType.Serializable:  					throw new Exception("PostData is not expected/capable to handle contain serializable' use SerializableData instead");  			}
