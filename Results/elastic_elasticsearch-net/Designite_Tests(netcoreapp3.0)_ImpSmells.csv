Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The method has 106 lines of code.
Long Method,Tests.ClientConcepts.HighLevel.Mapping,FluentMapping,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\FluentMapping.doc.cs,OverridingAutoMappedAttributes,The method has 158 lines of code.
Long Method,Tests.Search.Hits,HitsSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Hits\HitsSerializationTests.cs,CanDeserializeNestedNestedTopHits,The method has 280 lines of code.
Long Method,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,BoolQuery,The method has 119 lines of code.
Long Method,Tests.XPack.Watcher.GetWatch,GetWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\GetWatch\GetWatchApiTests.cs,PutWatch,The method has 177 lines of code.
Complex Method,Tests.CodeStandards,Descriptors,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Descriptors.doc.cs,DescriptorMethodsAcceptNullableBoolsForQueriesWithNullableBoolProperties,Cyclomatic complexity of the method is 8
Complex Method,Tests.CodeStandards,Responses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Responses.doc.cs,FindPropertiesBreakingRule,Cyclomatic complexity of the method is 8
Complex Method,Tests.Search.Request,HighlightingUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\HighlightingUsageTests.cs,ExpectResponse,Cyclomatic complexity of the method is 9
Complex Method,Tests.Search.Search,SearchProfileApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Search\SearchProfileApiTests.cs,ExpectResponse,Cyclomatic complexity of the method is 8
Long Parameter List,Tests.ClientConcepts.Connection,HttpWebRequestConnectionTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\HttpWebRequestConnectionTests.cs,CreateRequestData,The method has 5 parameters. Parameters: requestTimeout' proxyAddress' disableAutomaticProxyDetection' httpCompression' transferEncodingChunked
Long Parameter List,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Assert,The method has 5 parameters. Parameters: expectedFactor' expectedInterval' expectedMilliseconds' expectedSerialized' times
Long Parameter List,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAll,The method has 5 parameters. Parameters: index' documents' size' pages' numberOfDocuments
Long Parameter List,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,Calls,The method has 6 parameters. Parameters: initializerBody' fluentBody' fluent' fluentAsync' request' requestAsync
Long Parameter List,Tests.Framework.EndpointTests.TestState,CoordinatedUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\TestState\CoordinatedUsage.cs,Calls,The method has 6 parameters. Parameters: initializerBody' fluentBody' fluent' fluentAsync' request' requestAsync
Long Parameter List,Tests.Framework.EndpointTests.TestState,CoordinatedUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\TestState\CoordinatedUsage.cs,CallAllClientMethodsOverloads,The method has 7 parameters. Parameters: initializerBody' fluentBody' fluent' fluentAsync' request' requestAsync' client
Long Parameter List,Tests.Framework.EndpointTests.TestState,SingleEndpointUsage<TResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\TestState\EndpointUsage.cs,SingleEndpointUsage,The method has 5 parameters. Parameters: fluent' fluentAsync' request' requestAsync' valuePrefix
Long Parameter List,Tests.Framework.Extensions,UriExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\UriExtensions.cs,AssertSpecialQueryStringValues,The method has 5 parameters. Parameters: expectedUri' expectedParameters' actualUri' actualParameters' origin
Long Parameter List,Tests.QueryDsl.BoolDsl.Operators,AndOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorOnManualBoolsTests.cs,CombineBothWays,The method has 7 parameters. Parameters: ois1' ois2' lambda1' lambda2' assertLeft' assertRight' assertContainer
Long Parameter List,Tests.QueryDsl.BoolDsl.Operators,OrOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorOnManualBoolsTests.cs,CombineBothWays,The method has 7 parameters. Parameters: ois1' ois2' lambda1' lambda2' assertLeft' assertRight' assertContainer
Long Identifier,Tests.ClientConcepts.Connection,HttpWebRequestConnectionTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\HttpWebRequestConnectionTests.cs,CreateRequestData,The length of the parameter disableAutomaticProxyDetection is 30.
Long Identifier,Tests.ClientConcepts.HighLevel.Inference,IndicesPaths,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IndicesPaths.doc.cs,ImplicitConversions,The length of the parameter multipleIndicesFromStringArray is 30.
Long Identifier,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,,The length of the parameter utf8BytesOfCollectionOfObjects is 30.
Long Identifier,Tests.CodeStandards,ElasticClientStandards,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\ElasticClient.doc.cs,ConsistentFluentParameterNames,The length of the parameter fluentParametersNotNamedSelector is 32.
Long Identifier,Tests.CodeStandards,ElasticClientStandards,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\ElasticClient.doc.cs,ConsistentInitializerParameterNames,The length of the parameter requestParametersNotNamedRequest is 32.
Long Identifier,Tests.CodeStandards,ElasticClientStandards,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\ElasticClient.doc.cs,ConcreteClientOptionalParametersMatchInterfaceClient,The length of the parameter concreteMethodParametersDoNotMatchInterface is 43.
Long Identifier,Tests.CodeStandards,NamingConventions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\NamingConventions.doc.cs,AbstractClassNamesEndWithBase,The length of the parameter abstractClassesNotEndingInBase is 30.
Long Identifier,Tests.CodeStandards,NamingConventions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\NamingConventions.doc.cs,AllElasticsearchNetTypesAreInElasticsearchNetNamespace,The length of the parameter typesNotIElasticsearchNetNamespace is 34.
Long Identifier,Tests.Search.Hits,HitsSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Hits\HitsSerializationTests.cs,CanDeserializeNestedNestedTopHits,The length of the parameter nestedGrandChildrenAggregation is 30.
Long Identifier,Tests.XPack.CrossClusterReplication.AutoFollow.GetAutoFollowPattern,GetAutoFollowPatternApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\CrossClusterReplication\AutoFollow\GetAutoFollowPattern\GetAutoFollowPatternApiTests.cs,IntegrationSetup,The length of the parameter createAutoFollowPatternResponse is 31.
Long Identifier,Tests.XPack.MachineLearning,MachineLearningSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningSeeder.cs,,The length of the parameter MachineLearningTestsIndexTemplateName is 37.
Long Identifier,Tests.XPack.Slm,SlmApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Slm\SlmApiTests.cs,,The length of the parameter GetSnapshotLifecycleAfterExecuteStep is 36.
Long Statement,Tests.Aggregations.Metric.TopHits,TopHitsAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Metric\TopHits\TopHitsAggregationUsageTests.cs,ExpectResponse,The length of the statement  "				projects.Should().OnlyContain(p => string.IsNullOrWhiteSpace(p.Description)' "source filter does NOT include description"); " is 123.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,SingleNode,The length of the statement  "			/** This type of pool is hardwired to opt out of reseeding (<<sniffing-behaviour' sniffing>>) as well as <<pinging-behaviour' pinging>> */ " is 138.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,CloudConnectionPool,The length of the statement  "			var credentials = new BasicAuthenticationCredentials("username"' "password"); // <1> a username and password that can access Elasticsearch service on Elastic Cloud " is 163.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,CloudConnectionPool,The length of the statement  "			var pool = new CloudConnectionPool(cloudId' credentials); // <2> `cloudId` is a value that can be retrieved from the Elastic Cloud web console " is 142.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Sniffing,The length of the statement  "			/** This type of pool is hardwired to opt in to reseeding (<<sniffing-behaviour' sniffing>>)' and <<pinging-behaviour' pinging>> */ " is 131.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Sticky,The length of the statement  "			/** This type of pool is hardwired to opt out of reseeding (<<sniffing-behaviour' sniffing>>)' but does support <<pinging-behaviour' pinging>>. */ " is 146.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,SniffingSortedSticky,The length of the statement  "			/** a sniffing sorted sticky pool takes a second parameter' a delegate of `Func<Node' float>`' that takes a Node and returns a weight. " is 134.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,Transports,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\Transports.Doc.cs,InterfaceExplained,The length of the statement  "			* The only two methods on `ITransport` are `Request()` and `RequestAsync()`; the default `ITransport` implementation is responsible for introducing " is 147.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,Transports,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\Transports.Doc.cs,InterfaceExplained,The length of the statement  "			* many of the building blocks in the client. If you feel that the defaults do not work for you then you can swap them out for your own " is 134.
Long Statement,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,Transports,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\Transports.Doc.cs,InterfaceExplained,The length of the statement  "			* custom `ITransport` implementation and if you do' {github}/issues[please let us know] as we'd love to learn why you've go down this route! " is 140.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,UnexpectedExceptionsBubbleOut,The length of the statement  "				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!"))) // <2> where node 2 on port 9201 always throws an exception " is 128.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The length of the statement  "				.ClientCalls(r => r.OnPort(9200).FailAlways(new System.Net.Http.HttpRequestException("recover"))) // <1> calls on 9200 set up to throw a `HttpRequestException` or a `WebException` " is 179.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The length of the statement  "				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!"))) // <2> calls on 9201 set up to throw an `Exception` " is 120.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The length of the statement  "					{ AuditEvent.BadResponse' 9201 }' // <3> Assert that the audit trail for the client call includes the bad response from 9200 and 9201 " is 133.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The length of the statement  "					var pingException = e.AuditTrail.First(a => a.Event == AuditEvent.PingFailure).Exception; // <3> An exception can be hard to relate back to a point in time' so the exception is also available on the audit trail " is 210.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseIsIgnored,The length of the statement  "				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response' "application/json")) // <1> Always return a 401 bad response with a HTML response on client calls " is 174.
Long Statement,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The length of the statement  "					{ MaxRetriesReached } // <2> The client call trace returns an `MaxRetriesReached` audit after the initial attempt and the number of retries allowed " is 147.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The length of the statement  "						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead " is 142.
Long Statement,Tests.ClientConcepts.ConnectionPooling.RoundRobin,RoundRobin,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\RoundRobin.doc.cs,AssertCreateView,The length of the statement  "			* . Thread A calls `CreateView()` first without a local cursor and takes the current value from the internal global cursor' which is `0` " is 136.
Long Statement,Tests.ClientConcepts.ConnectionPooling.RoundRobin,RoundRobin,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\RoundRobin.doc.cs,AssertCreateView,The length of the statement  "			* . After this' each thread should walk the nodes in successive order using their local cursor. For example' Thread A might " is 123.
Long Statement,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The length of the statement  "					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202 " is 136.
Long Statement,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The length of the statement  "					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes " is 196.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The length of the statement  "				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once " is 276.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The length of the statement  "					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible. " is 282.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The length of the statement  "			* with a sniff failure on 9200 and 9201' followed by a sniff success on 9202. A ping and then healthy response are made on " is 122.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The length of the statement  "				.Sniff(s => s.OnPort(9202).Succeeds(Always' VirtualClusterWith.Nodes(8' startFrom: 9204))) // <1> Sniffing returns 8 nodes' starting from 9204 " is 142.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The length of the statement  "					nodes.Count().Should().Be(20' "Master nodes are included in the registration of nodes since we still favor sniffing on them"); " is 126.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The length of the statement  "			seenNodes.Should().HaveCount(totalNodesInTheCluster - masterNodes.Length); // <1> `seenNodes` is a hash set of all the ports we hit. assert that this is equal to `known total nodes - known master only nodes` " is 207.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The length of the statement  "				AssertPoolAfterStartup = pool => // <3> After sniffing on startup' assert that the pool of nodes that the client will execute API calls against only contains the three nodes that are in `rack_one` " is 196.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,CustomPredicateYieldingNothingThrows,The length of the statement  "				{ NoNodesAttempted } // <3> when trying to do an actual API call however' the predicate prevents any nodes from being attempted " is 127.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,CustomPredicateYieldingNothingThrows,The length of the statement  "			 * # FailureReason: Unrecoverable/Unexpected NoNodesAttempted while attempting POST on default-index/project/_search on an empty node' likely a node predicate on ConnectionSettings not matching ANY nodes " is 202.
Long Statement,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The length of the statement  "			/** If we forward our clock 2 days the node that was marked dead until tomorrow (or yesterday!) should be resurrected */ " is 120.
Long Statement,Tests.ClientConcepts.Connection,HttpWebRequestConnectionTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\HttpWebRequestConnectionTests.cs,CreateRequestData,The length of the statement  "			var requestData = new RequestData(HttpMethod.POST' "/_search"' "{ \"query\": { \"match_all\" : { } } }"' connectionSettings' " is 124.
Long Statement,Tests.ClientConcepts.Connection,ModifyingTheDefaultConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,InMemoryConnectionOverloadedCtor,The length of the statement  "			var connection = new InMemoryConnection(responseBytes' 200); // <1> `InMemoryConnection` is configured to **always** return `responseBytes` along with a 200 HTTP status code " is 173.
Long Statement,Tests.ClientConcepts.Exceptions,ExceptionTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Exceptions\ExceptionTests.cs,ServerTestWhenThrowExceptionsEnabled,The length of the statement  "			var exception = Assert.Throws<ElasticsearchClientException>(() => client.Indices.GetMapping<Project>(s => s.Index("doesntexist"))); " is 131.
Long Statement,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The length of the statement  "				.Index("analysis-index") // <1> Since we added the custom analyzer to the "analysis-index" index' we need to target this index to test it " is 137.
Long Statement,Tests.ClientConcepts.HighLevel.Caching,CachePerformance,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,CachedVsNonCached,The length of the statement  "				_output.WriteLine(_timings.Aggregate(new StringBuilder().AppendLine()' (sb' s) => sb.AppendLine(s.ToString())' sb => sb.ToString())); " is 133.
Long Statement,Tests.ClientConcepts.HighLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\GettingStarted.doc.cs,Indexing,The length of the statement  "			var asyncIndexResponse = await client.IndexDocumentAsync(person); //<2> asynchronous method that returns a `Task<IndexResponse>` that can be awaited " is 148.
Long Statement,Tests.ClientConcepts.HighLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\GettingStarted.doc.cs,ObjectInitializerSyntax,The length of the statement  "			var searchRequest = new SearchRequest<Person>(Nest.Indices.All) //<1> All indices and types are specified in the constructor " is 124.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,SingleDocument,The length of the statement  "			var indexResponseAsync = await client.IndexDocumentAsync(person); //<2> asynchronous method that returns a Task<IIndexResponse> that can be awaited " is 147.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,IndexManyDocuments,The length of the statement  "			if (indexManyResponse.Errors) //<2> the response can be inspected to see if any of the bulk operations resulted in an error " is 123.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,IndexManyDocuments,The length of the statement  "				foreach (var itemWithError in indexManyResponse.ItemsWithErrors) //<3> If there are errors' they can be enumerated and inspected " is 128.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,IndexManyDocuments,The length of the statement  "			var indexManyAsyncResponse = await client.IndexManyAsync(people); //<4> asynchronous method that returns a Task<IBulkResponse> that can be awaited " is 146.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,BulkIndexDocuments,The length of the statement  "				.IndexMany(people)); //<1> synchronous method that returns an IBulkResponse' the same as IndexMany and can be inspected in the same way for errors " is 146.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,BulkDocumentsWithObservableHelper,The length of the statement  "			.Wait(TimeSpan.FromMinutes(15)' next => //<4> perform the indexing and wait up to 15 minutes' whilst the BulkAll calls are asynchronous this is a blocking operation " is 164.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,AdvancedBulkIndexing,The length of the statement  "				  .BufferToBulk((descriptor' list) => //<1> customise the individual operations in the bulk request before it is dispatched " is 121.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,IngestNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IngestNodes.doc.cs,SniffingConnectionPool,The length of the statement  "			var settings = new ConnectionSettings(pool).NodePredicate(n => n.IngestEnabled); //<2> predicate to select only nodes with ingest capabilities " is 142.
Long Statement,Tests.ClientConcepts.HighLevel.Indexing,IngestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\Pipelines.doc.cs,IngestionPipeline,The length of the statement  "			var indexResponse = client.Index(person' p => p.Index("people").Pipeline("person-pipeline")); //<8> index the document using the created pipeline " is 145.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,UsingConstructorAlsoSetsComparisonValue,The length of the statement  "			fieldStringWithBoostTwo.Should().Be(fieldStringWithBoostTwo); //<1> <<field-name-with-boost'Fields can constructed with a name that contains a boost>> " is 150.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,ComplexFieldNameExpressions,The length of the statement  "			/** When dealing with collection indexers' the indexer access is ignored allowing you to traverse into properties of collections */ " is 131.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,AppendingSuffixToExpressions,The length of the statement  "				expressions.Select<Expression<Func<Project' object>>' Field>(e => e.AppendSuffix("raw").AppendSuffix("evendeeper")).ToList(); " is 125.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,PrecedenceIsAsExpected,The length of the statement  "				.DefaultFieldNameInferrer(p => p.ToUpperInvariant()) // <2> Default inference for a field' if no other rules apply or are specified for a given field " is 149.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,PrecedenceIsAsExpected,The length of the statement  "			).WithPropertyMappingProvider(new CustomPropertyMappingProvider()); // <3> Hook up the custom `IPropertyMappingProvider` " is 120.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,IdsInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IdsInference.doc.cs,CanGetIdFromAttribute,The length of the statement  "			/** Now when we infer the id we expect it to be the value of the `Name` property without doing any configuration on the `ConnectionSettings` */ " is 143.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,IndicesPaths,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IndicesPaths.doc.cs,ImplicitConversions,The length of the statement  "			Nest.Indices singleIndexFromType = typeof(Project); //<2> The `Project` type has been mapped to a specific index name using <<index-name-type-mapping'`.DefaultMappingFor<Project>`>> " is 181.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,IndicesPaths,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IndicesPaths.doc.cs,MultipleIndices,The length of the statement  "			((IUrlParameter)manyTypedRequest.Index).GetString(this.Client.ConnectionSettings).Should().Be("project'devs"); // <3> The index names here come from the Connection Settings passed to `TestClient`. See the documentation on <<index-name-inference' Index Name Inference>> for more details. " is 286.
Long Statement,Tests.ClientConcepts.HighLevel.Inference,RoutingInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\RoutingInference.doc.cs,CanGetRoutingFromJoinField,The length of the statement  "			 * Here we link this instance as the root (parent) of the relation. NEST infers that the default routing for this instance " is 121.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,IgnoringProperties,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\IgnoringProperties.doc.cs,Ignoring,The length of the statement  "			var connectionSettings = new ConnectionSettings(new InMemoryConnection()) // <1> we're using an in-memory connection' but in your application' you'll want to use an `IConnection` that actually sends a request. " is 209.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,IgnoringProperties,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\IgnoringProperties.doc.cs,Ignoring,The length of the statement  "				.DisableDirectStreaming() // <2> we disable direct streaming here to capture the request and response bytes. In a production application' you would likely not call this as it adds overhead to each call. " is 202.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,IgnoringProperties,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\IgnoringProperties.doc.cs,OverridingInheritedProperties,The length of the statement  "			var connectionSettings = new ConnectionSettings(new InMemoryConnection()) // <1> we're using an _in memory_ connection for this example. In your production application though' you'll want to use an `IConnection` that actually sends a request. " is 242.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,IgnoringProperties,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\IgnoringProperties.doc.cs,OverridingInheritedProperties,The length of the statement  "				.DisableDirectStreaming() // <2> we disable direct streaming here to capture the request and response bytes. In your production application however' you'll likely not want to do this' since it causes the request and response bytes to be buffered in memory. " is 256.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,SimpleParentChildMapping,The length of the statement  "			var connectionSettings = new ConnectionSettings(connectionPool' new InMemoryConnection()) // <1> for the purposes of this example' an in memory connection is used which doesn't actually send a request. In your application' you'd use the default connection or your own implementation that actually sends a request. " is 313.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,SimpleParentChildMapping,The length of the statement  "			* With the `ConnectionSettings` set up' we can proceed to map `MyParent` and `MyChild` as part of the create index request. " is 123.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,SimpleParentChildMapping,The length of the statement  "					.RoutingField(r => r.Required()) // <1> recommended to make the routing field mandatory so you can not accidentally forget " is 122.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,SimpleParentChildMapping,The length of the statement  "			* We call `AutoMap()` for both types to discover properties of both .NET types. `AutoMap()` won't automatically setup the " is 121.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,SimpleParentChildMapping,The length of the statement  "			* In this case we setup `MyChild` to be child of `MyParent`. `.Join()` has many overloads so be sure to check them out if you " is 125.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,SimpleParentChildMapping,The length of the statement  "			* Note how `MyParent`'s relation name is `parent` because of the mapping on connection settings. This also comes in handy " is 121.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Indexing,The length of the statement  "			* In the first we explicitly call `JoinField.Root` to mark this document as the root of a parent child relationship namely " is 122.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Inference,The length of the statement  "			 * The same goes for when we index a child' we can pass the instance directly to `Routing` and NEST will use the parent id " is 121.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Inference,The length of the statement  "			 * already specified on `child`. Here we use the static import `using static Nest.Infer` and it's `Route()` static method to " is 123.
Long Statement,Tests.ClientConcepts.HighLevel.Mapping,VisitorPattern,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\VisitorPatternMapping.doc.cs,UsingACustomPropertyVisitor,The length of the statement  "			/** and any time the client maps a property of the POCO (Employee in this example) as a number (INumberProperty) or boolean (IBooleanProperty)' " is 143.
Long Statement,Tests.ClientConcepts.HighLevel.Serialization,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Serialization\CustomSerialization.doc.cs,UsingJsonNetSerializer,The length of the statement  "				connection: new InMemoryConnection()' // <1> an _in-memory_ connection is used here for example purposes. In your production application' you would use an `IConnection` implementation that actually sends a request. " is 214.
Long Statement,Tests.ClientConcepts.HighLevel.Serialization,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Serialization\CustomSerialization.doc.cs,MySecondJsonNetSerializer,The length of the statement  "			 * Per the https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_TypeNameHandling.htm[Json.NET documentation on TypeNameHandling]' " is 135.
Long Statement,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,Indexing,The length of the statement  "			var ndexResponse = lowlevelClient.Index<BytesResponse>("people"' "1"' PostData.Serializable(person)); //<1> synchronous method that returns an `IndexResponse` " is 158.
Long Statement,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,Indexing,The length of the statement  "			var asyncIndexResponse = await lowlevelClient.IndexAsync<StringResponse>("people"' "1"' PostData.Serializable(person)); //<2> asynchronous method that returns a `Task<IndexResponse>` that can be awaited " is 202.
Long Statement,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,ResponseProperties,The length of the statement  "			var success = searchResponse.Success; // <1> Response is in the 200 range' or an expected response for the given request " is 120.
Long Statement,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,ResponseProperties,The length of the statement  "			var successOrKnownError = searchResponse.SuccessOrKnownError; // <2> Response is successful' or has a response code between 400-599 that indicates the request cannot be retried. " is 177.
Long Statement,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,ResponseProperties,The length of the statement  "			var exception = searchResponse.OriginalException; // <3> If the response is unsuccessful' will hold the original exception. " is 123.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,ImplicitConversions,The length of the statement  "			fromByteArray.WrittenBytes.Should().BeSameAs(bytes); // <1> `WrittenBytes` will always be set if it originated from `byte[]` " is 124.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,AssertOn,The length of the statement  "			await Post(() => PostData.MultiJson(collectionOfStrings)' writes: utf8BytesOfListOfStrings' writtenBytesIsSet: true' settings: settings); " is 137.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,AssertOn,The length of the statement  "			* that needs to be serialized individually to json and joined with newline feeds. As with the collection of strings' the client ensures that " is 140.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,AssertOn,The length of the statement  "			await Post(() => PostData.MultiJson(collectionOfObjects)' writes: utf8BytesOfCollectionOfObjects' writtenBytesIsSet: false' settings: settings); " is 144.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,AssertOn,The length of the statement  "			await Post(() => PostData.Serializable(@object)' writes: utf8ObjectBytes' writtenBytesIsSet: false' settings: settings); " is 120.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,AssertOn,The length of the statement  "			* If you want to maintain a copy of the request that went out' you can set `DisableDirectStreaming`  on `ConnectionConfiguration`. " is 130.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,AssertOn,The length of the statement  "			* In doing so' the serialized bytes are first written to a private `MemoryStream` so that the client can get hold of the serialized bytes " is 137.
Long Statement,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,AssertOn,The length of the statement  "			await Post(() => PostData.MultiJson(collectionOfObjects)' writes: utf8BytesOfCollectionOfObjects' writtenBytesIsSet: true' settings: settings); " is 143.
Long Statement,Tests.ClientConcepts.Troubleshooting,AuditTrail,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\AuditTrail.doc.cs,AvailableOnResponse,The length of the statement  "			 * <Request stream not captured or already read to completion by serializer. Set DisableDirectStreaming() on ConnectionSettings to force it to be set on the response.> " is 166.
Long Statement,Tests.ClientConcepts.Troubleshooting,AuditTrail,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\AuditTrail.doc.cs,AvailableOnResponse,The length of the statement  "			 * <Response stream not captured or already read to completion by serializer. Set DisableDirectStreaming() on ConnectionSettings to force it to be set on the response.> " is 167.
Long Statement,Tests.ClientConcepts.Troubleshooting,DebuggerDisplayTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DebuggerDisplayTests.cs,DebugFor,The length of the statement  "			var property = o.GetType().GetProperty("DebugDisplay"' BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.FlattenHierarchy); " is 135.
Long Statement,Tests.ClientConcepts.Troubleshooting,DeprecationLogging,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DeprecationLogging.doc.cs,RequestWithMultipleWarning,The length of the statement  "			response.DebugInformation.Should().Contain("Deprecated aggregation order key"); // <1> `DebugInformation` also contains the deprecation warnings " is 144.
Long Statement,Tests.ClientConcepts.Troubleshooting,DiagnosticSourceUsageDocumentation,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DiagnosticSource.doc.cs,SubscribeToTopics,The length of the statement  "				var pool = new SniffingConnectionPool(new []{ TestConnectionSettings.CreateUri() }); // <1> use a sniffing connection pool that sniffs on startup and pings before first usage' so our diagnostics will emit most topics. " is 217.
Long Statement,Tests.ClientConcepts.Troubleshooting,ListenerObserver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DiagnosticSource.doc.cs,OnNext,The length of the statement  "				void TrySubscribe(string sourceName' Func<IObserver<KeyValuePair<string' object>>> listener) // <1> By inspecting the name' we can selectively subscribe only to the topics `Elasticsearch.Net` emit " is 196.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedIsCalled,The length of the statement  "			var client = new ElasticClient(new AlwaysInMemoryConnectionSettings().OnRequestCompleted(r => counter++)); // <1> Construct a client " is 132.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedIsCalledWhenExceptionIsThrown,The length of the statement  "			var client = FixedResponseClient.Create( // <1> Configure a client with a connection that **always returns a HTTP 500 response " is 126.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedIsCalledWhenExceptionIsThrown,The length of the statement  "			Assert.Throws<ElasticsearchClientException>(() => client.RootNodeInfo()); // <3> Assert an exception is thrown and the counter is incremented " is 141.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,UsingOnRequestCompletedForLogging,The length of the statement  "			var settings = new ConnectionSettings(connectionPool' new InMemoryConnection()) // <1> Here we use `InMemoryConnection` but in a real application' you'd use an `IConnection` that _actually_ sends the request' such as `HttpConnection` " is 233.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,UsingOnRequestCompletedForLogging,The length of the statement  "				.OnRequestCompleted(apiCallDetails => // <3> Perform some action when a request completes. Here' we're just adding to a list' but in your application you may be logging to a file. " is 179.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,UsingOnRequestCompletedForLogging,The length of the statement  "			list.Should().BeEquivalentTo(new[] // <6> Assert the list contains the contents written in the delegate passed to `OnRequestCompleted` " is 134.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedPerRequest,The length of the statement  "			var syncResponse = client.Search<object>(s => s // <1> Make a synchronous call where the request and response bytes will not be buffered " is 136.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedPerRequest,The length of the statement  "			var asyncResponse = await client.SearchAsync<object>(s => s // <2> Make an asynchronous call where `DisableDirectStreaming()` is enabled " is 136.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedPerRequest,The length of the statement  "				@"POST http://localhost:9200/_all/_search?typed_keys=true&scroll=2m"' // <3> Only the method and url for the first request is captured " is 134.
Long Statement,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedPerRequest,The length of the statement  "				@"POST http://localhost:9200/_all/_search?typed_keys=true&scroll=10m {""sort"":[{""_doc"":{""order"":""asc""}}]}"' // <4> the body of the second request is captured " is 164.
Long Statement,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The length of the statement  "								reason = "failed to run inline script [use(java.lang.Exception) {throw new Exception(\"Customized Exception\")}] using lang [groovy]"' " is 134.
Long Statement,Tests.Cluster.TaskManagement.GetTask,GetTaskApiCompletedTaskTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\TaskManagement\GetTask\GetTaskApiTests.cs,IntegrationSetup,The length of the statement  "				throw new Exception($"failure in setting up integration for {nameof(GetTaskApiCompletedTaskTests)}. {bulkResponse.DebugInformation}"); " is 134.
Long Statement,Tests.CodeStandards,Descriptors,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Descriptors.doc.cs,DescriptorMethodsTakingSingleValueTypeShouldBeNullable,The length of the statement  "				where !(m.Name == nameof(FunctionScoreQueryDescriptor<object>.ConditionlessWhen) && dt == typeof(FunctionScoreQueryDescriptor<>)) " is 129.
Long Statement,Tests.CodeStandards,Descriptors,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Descriptors.doc.cs,DescriptorMethodsTakingSingleValueTypeShouldBeNullable,The length of the statement  "				where !(m.Name == nameof(ClrTypeMappingDescriptor<object>.DisableIdInference) && dt == typeof(ClrTypeMappingDescriptor<>)) " is 122.
Long Statement,Tests.CodeStandards,Descriptors,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Descriptors.doc.cs,DescriptorMethodsTakingSingleValueTypeShouldBeNullable,The length of the statement  "				where !(m.Name == nameof(RankFeatureLogarithmFunctionDescriptor.ScalingFactor) && dt == typeof(RankFeatureLogarithmFunctionDescriptor)) " is 135.
Long Statement,Tests.CodeStandards,Descriptors,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Descriptors.doc.cs,DescriptorMethodsTakingSingleValueTypeShouldBeNullable,The length of the statement  "				where !(m.Name == nameof(RankFeatureSigmoidFunctionDescriptor.Exponent) && dt == typeof(RankFeatureSigmoidFunctionDescriptor)) " is 126.
Long Statement,Tests.CodeStandards,Descriptors,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Descriptors.doc.cs,DescriptorMethodsTakingSingleValueTypeShouldBeNullable,The length of the statement  "				where !(m.Name == nameof(RankFeatureSigmoidFunctionDescriptor.Pivot) && dt == typeof(RankFeatureSigmoidFunctionDescriptor)) " is 123.
Long Statement,Tests.CodeStandards,ElasticClientStandards,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\ElasticClient.doc.cs,ConsistentFluentParameterNames,The length of the statement  "				select $"method '{nameof(IElasticClient)}.{m.Name}' should have parameter name of 'selector' or 'mapper' but has a name of '{p.Name}'"; " is 135.
Long Statement,Tests.CodeStandards,ElasticClientStandards,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\ElasticClient.doc.cs,ConsistentInitializerParameterNames,The length of the statement  "				select $"method '{nameof(IElasticClient)}.{m.Name}' should have parameter name of 'request' but has a name of '{p.Name}'"; " is 122.
Long Statement,Tests.CodeStandards,ElasticClientStandards,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\ElasticClient.doc.cs,ConcreteClientOptionalParametersMatchInterfaceClient,The length of the statement  "							$"'{interfaceParameter.Name}' parameter on concrete implementation of '{nameof(ElasticClient)}.{interfaceMethodInfo.Name}' to {(interfaceParameter.HasDefaultValue ? string.Empty : "NOT")} be optional"); " is 202.
Long Statement,Tests.CodeStandards,ElasticClientStandards,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\ElasticClient.doc.cs,ConsistentOptionalParametersForSyncAndAsyncMethods,The length of the statement  "					var parameters = asyncMethod.MethodInfo.GetParameters().Where(p => p.ParameterType != typeof(CancellationToken)).ToArray(); " is 123.
Long Statement,Tests.CodeStandards,Responses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Responses.doc.cs,ResponsesShouldNotHaveInterfaceUnlessThatInterfaceIsCovariant,The length of the statement  "			offenders.Should().BeEmpty("Responses may only have a same named interface if that interface is used to provide covariance"); " is 125.
Long Statement,Tests.CodeStandards,Responses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Responses.doc.cs,FindPropertiesBreakingRule,The length of the statement  "						 (propertyInfo.PropertyType.Namespace.StartsWith("Nest") || propertyInfo.PropertyType.Namespace.StartsWith("Elasticsearch.Net")) " is 127.
Long Statement,Tests.Document.Single.Index,IndexUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexUrlTests.cs,Urls,The length of the statement  "			//no explicit ID is provided and none can be inferred on the anonymous object so this falls back to a POST to /index/type " is 121.
Long Statement,Tests.Framework.EndpointTests.TestState,CoordinatedUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\TestState\CoordinatedUsage.cs,Calls,The length of the statement  "					async () => await CallAllClientMethodsOverloads(initializerBody' fluentBody' fluent' fluentAsync' request' requestAsync' client)) " is 129.
Long Statement,Tests.Framework.Extensions,UriExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\UriExtensions.cs,AssertSpecialQueryStringValues,The length of the statement  "				new[] { key' actual }.Should().BeEquivalentTo(new[] { key' expected }' $"query value for '{{0}}' should be equal{eol}{{1}}"' key' because); " is 139.
Long Statement,Tests.Framework.SerializationTests,CompositeKeySerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\CompositeKeySerializationTests.cs,NullValuesAreSerialized,The length of the statement  "			var json = serializer.SerializeToString(compositeKey' TestClient.Default.ConnectionSettings.MemoryStreamFactory' SerializationFormatting.None); " is 143.
Long Statement,Tests.Framework.SerializationTests,DictionarySerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\DictionarySerializationTests.cs,CanSerializeIgnoresDefaultFieldNameInferrer,The length of the statement  "			client.RequestResponseSerializer.SerializeToString(dictionary).Should().Be("{\"Key1\":\"value1\"'\"Key2\":\"value2\"}"); " is 120.
Long Statement,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,ExpectResponse,The length of the statement  "			/** For backwards compatible reasons you can still ask per type mappings' this is obsolete and will be removed in 8.0 **/ " is 121.
Long Statement,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,Bool,The length of the statement  "			var initializerAsync = await client.SearchAsync<BoolCluster.A>(new SearchRequest<BoolCluster.A> { Query = initializerQuery }); " is 126.
Long Statement,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The length of the statement  "				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)' " is 130.
Long Statement,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The length of the statement  "				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2' " is 128.
Long Statement,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,MustNotOperatorAnd,The length of the statement  "				c => c.Bool.MustNot.Should().HaveCount(2)); // <3> assert the resulting `bool` query in each case has two `must_not` clauses " is 124.
Long Statement,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,AssertAndIsNotViral,The length of the statement  "			original.Bool.Must.Should().HaveCount(2' $"query composed using {origin} should still have 2 must clauses after composition"); " is 126.
Long Statement,Tests.QueryDsl.Compound.Bool,BoolDslComplexQueryUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Compound\Bool\BoolDslComplexQueryUsageTests.cs,AssertShape,The length of the statement  "			var mustNotsBool = complexNestedBool.Should.Cast<IQueryContainer>().FirstOrDefault(q => q.Bool != null && q.Bool.MustNot != null)?.Bool; " is 136.
Long Statement,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The length of the statement  "					"MULTIPOLYGON (((102 2' 103 2' 103 3' 102 3' 102 2))' ((100 0' 101 0' 101 1' 100 1' 100 0)' (100.2 0.2' 100.8 0.2' 100.8 0.8' 100.2 0.8' 100.2 0.2)))"); " is 152.
Long Statement,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,MalformedPolygonThrowsGeoWKTException,The length of the statement  "			action.Should().Throw<GeoWKTException>().Which.Message.Should().Be("Expected number but found: ' at line 1' position 14"); " is 122.
Long Statement,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,GeoWKTExceptionReturnsCorrectLineNumberAndPosition,The length of the statement  "			action.Should().Throw<GeoWKTException>().Which.Message.Should().Be("Expected number but found: ' at line 2' position 5"); " is 121.
Long Statement,Tests.Search.MultiSearch,MultiSearchLowLevelPostDataTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\MultiSearch\MultiSearchLowLevelPostDataTests.cs,PostEnumerableOfStrings,The length of the statement  "				.Select(s => _client.RequestResponseSerializer.SerializeToString(s' _client.ConnectionSettings.MemoryStreamFactory' SerializationFormatting.None)) " is 146.
Long Statement,Tests.Search.MultiSearch,MultiSearchLowLevelPostDataTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\MultiSearch\MultiSearchLowLevelPostDataTests.cs,PostString,The length of the statement  "				.Select(s => _client.RequestResponseSerializer.SerializeToString(s' _client.ConnectionSettings.MemoryStreamFactory' SerializationFormatting.None)) " is 146.
Long Statement,Tests.Search.MultiSearch,MultiSearchLowLevelPostDataTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\MultiSearch\MultiSearchLowLevelPostDataTests.cs,PostByteArray,The length of the statement  "				.Select(s => _client.RequestResponseSerializer.SerializeToString(s' _client.ConnectionSettings.MemoryStreamFactory' SerializationFormatting.None)) " is 146.
Long Statement,Tests.Search.Request,SourceFilteringSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\SourceFilteringUsageTests.cs,CanDeserializeObject,The length of the statement  "			var o = Expect("{ \"_source\": { \"includes\": [\"obj.*\"]' \"excludes\": [\"foo.*\"] } }").DeserializesTo<WithSourceFilterProperty>(); " is 135.
Long Statement,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,BoolQuery,The length of the statement  "					) && +q // <2> wrap a query in a `bool` query filter clause using the unary `+` operator and combine using the binary `&&` operator " is 131.
Long Statement,Tests.XPack.CrossClusterReplication.AutoFollow.GetAutoFollowPattern,GetAutoFollowPatternApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\CrossClusterReplication\AutoFollow\GetAutoFollowPattern\GetAutoFollowPatternApiTests.cs,IntegrationSetup,The length of the statement  "			var createAutoFollowPatternResponse = client.CrossClusterReplication.CreateAutoFollowPattern(AutoPattern("getauto-1")' c => c " is 125.
Long Statement,Tests.XPack.CrossClusterReplication.AutoFollow.GetAutoFollowPattern,GetAutoFollowPatternApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\CrossClusterReplication\AutoFollow\GetAutoFollowPattern\GetAutoFollowPatternApiTests.cs,IntegrationSetup,The length of the statement  "			createAutoFollowPatternResponse = client.CrossClusterReplication.CreateAutoFollowPattern(AutoPattern("getauto-2")' c => c " is 121.
Long Statement,Tests.XPack.MachineLearning.DeleteForecast,DeleteForecastApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\DeleteForecast\DeleteForecastApiTests.cs,IntegrationSetup,The length of the statement  "					throw new Exception($"Problem putting job {callUniqueValue.Value} for integration test: {putJobResponse.DebugInformation}"); " is 124.
Long Statement,Tests.XPack.MachineLearning.DeleteForecast,DeleteForecastUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\DeleteForecast\DeleteForecastUrlTests.cs,Urls,The length of the statement  "				.RequestAsync(c => c.MachineLearning.DeleteForecastAsync(new DeleteForecastRequest("job_id"' "forecast_id'forecast_id2"))); " is 123.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,DeleteFilter,The length of the statement  "				throw new Exception($"Problem deleting filter {filterId} for integration test: {deleteFilterResponse.DebugInformation}"); " is 121.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PutCalendar,The length of the statement  "				throw new Exception($"Problem putting calendar {calendarId} for integration test: {putCalendarResponse.DebugInformation}"); " is 123.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PostCalendarEvent,The length of the statement  "				throw new Exception($"Problem posting calendar event for calendar {calendarId} for integration test: {postCalendarEventsResponse.DebugInformation}"); " is 149.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PostCalendarEvents,The length of the statement  "			var postCalendarEventsResponse = client.MachineLearning.PostCalendarEvents(calendarId' f => f.Events(GetScheduledEvents(calendarId))); " is 134.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PostCalendarEvents,The length of the statement  "				throw new Exception($"Problem posting calendar events {calendarId} for integration test: {postCalendarEventsResponse.DebugInformation}"); " is 137.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PutCalendarJob,The length of the statement  "				throw new Exception($"Problem putting calendar job {calendarId} / {jobId} for integration test: {putCalendarJobResponse.DebugInformation}"); " is 140.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PutDatafeed,The length of the statement  "				throw new Exception($"Problem putting datafeed for job {jobId} for integration test: {putDataFeedResponse.DebugInformation}"); " is 126.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,StartDatafeed,The length of the statement  "				throw new Exception($"Problem starting datafeed for job {jobId} for integration test: {startDatafeedResponse.DebugInformation}"); " is 129.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,StopDatafeed,The length of the statement  "				throw new Exception($"Problem stopping datafeed for job {jobId} for integration test: {stopDatafeedResponse.DebugInformation}"); " is 128.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The length of the statement  "				' i => i.Id($"{jobId}_model_forecast_{forecastId}_1486591300000_1800_0_961_0").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor)); " is 135.
Long Statement,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The length of the statement  "				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor)); " is 122.
Long Statement,Tests.XPack.MachineLearning.ForecastJob,ForecastJobApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\ForecastJob\ForecastJobApiTests.cs,IntegrationSetup,The length of the statement  "					throw new Exception($"Problem putting job {callUniqueValue.Value} for integration test: {putJobResponse.DebugInformation}"); " is 124.
Long Statement,Tests.XPack.MachineLearning.GetOverallBuckets,GetOverallBucketsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetOverallBuckets\GetOverallBucketsApiTests.cs,IntegrationSetup,The length of the statement  "					throw new Exception($"Problem putting job {callUniqueValue.Value} for integration test: {putJobResponse.DebugInformation}"); " is 124.
Long Statement,Tests.XPack.MachineLearning.UpdateModelSnapshot,UpdateModelSnapshotApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\UpdateModelSnapshot\UpdateModelSnapshotApiTests.cs,IntegrationSetup,The length of the statement  "			foreach (var callUniqueValue in values) IndexSnapshot(client' callUniqueValue.Value' callUniqueValue.Value + "-snapshot"); " is 122.
Long Statement,Tests.XPack.Migration.DeprecationInfo,DeprecationInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Migration\DeprecationInfo\DeprecationInfoApiTests.cs,ShouldDeserialize,The length of the statement  "							"https://www.elastic.co/guide/en/elasticsearch/reference/6.0/breaking_60_indices_changes.html#_index_templates_use_literal_index_patterns_literal_instead_of_literal_template_literal"' " is 183.
Long Statement,Tests.XPack.Migration.DeprecationInfo,DeprecationInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Migration\DeprecationInfo\DeprecationInfoApiTests.cs,ShouldDeserialize,The length of the statement  "							"templates using <literal>template</literal> field: watches'.monitoring-alerts'.watch-history-6'.ml-notifications'security-index-template'triggered_watches'.monitoring-es'.ml-meta'.ml-state'.monitoring-logstash'.ml-anomalies-'.monitoring-kibana" " is 245.
Long Statement,Tests.XPack.Migration.DeprecationInfo,DeprecationInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Migration\DeprecationInfo\DeprecationInfoApiTests.cs,ShouldDeserialize,The length of the statement  "									"https://www.elastic.co/guide/en/elasticsearch/reference/6.0/breaking_60_mappings_changes.html#_coercion_of_boolean_fields"' " is 124.
Long Statement,Tests.XPack.Migration.DeprecationInfo,DeprecationInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Migration\DeprecationInfo\DeprecationInfoApiTests.cs,ShouldDeserialize,The length of the statement  "					"https://www.elastic.co/guide/en/elasticsearch/reference/6.0/breaking_60_indices_changes.html#_index_templates_use_literal_index_patterns_literal_instead_of_literal_template_literal"); " is 184.
Long Statement,Tests.XPack.Migration.DeprecationInfo,DeprecationInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Migration\DeprecationInfo\DeprecationInfoApiTests.cs,ShouldDeserialize,The length of the statement  "					"templates using <literal>template</literal> field: watches'.monitoring-alerts'.watch-history-6'.ml-notifications'security-index-template'triggered_watches'.monitoring-es'.ml-meta'.ml-state'.monitoring-logstash'.ml-anomalies-'.monitoring-kibana"); " is 247.
Long Statement,Tests.XPack.Migration.DeprecationInfo,DeprecationInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Migration\DeprecationInfo\DeprecationInfoApiTests.cs,ShouldDeserialize,The length of the statement  "				.Be("https://www.elastic.co/guide/en/elasticsearch/reference/6.0/breaking_60_mappings_changes.html#_coercion_of_boolean_fields"); " is 129.
Long Statement,Tests.XPack.Security.ClearCachedRealms,ClearCachedRealmsUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\ClearCachedRealms\ClearCachedRealmsUrlTests.cs,Urls,The length of the statement  "					.RequestAsync(c => c.Security.ClearCachedRealmsAsync(new ClearCachedRealmsRequest("mpdreamz") { Usernames = new[] { users } })) " is 127.
Long Statement,Tests.XPack.Slm.GetLifecycle,GetLifecycleUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Slm\GetLifecycle\GetLifecycleUrlTests.cs,Urls,The length of the statement  "					.RequestAsync(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycleAsync(new GetSnapshotLifecycleRequest("policy_id"))) " is 121.
Long Statement,Tests.XPack.Slm.GetLifecycle,GetLifecycleUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Slm\GetLifecycle\GetLifecycleUrlTests.cs,Urls,The length of the statement  "					.Request(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycle(new GetSnapshotLifecycleRequest(new [] { "policy_id1"'"policy_id2" }))) " is 136.
Long Statement,Tests.XPack.Slm.GetLifecycle,GetLifecycleUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Slm\GetLifecycle\GetLifecycleUrlTests.cs,Urls,The length of the statement  "					.RequestAsync(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycleAsync(new GetSnapshotLifecycleRequest("policy_id1'policy_id2"))) " is 133.
Long Statement,Tests.XPack.Watcher.AcknowledgeWatch,AcknowledgeWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\AcknowledgeWatch\AcknowledgeWatchApiTests.cs,IntegrationSetup,The length of the statement  "				getWatchResponse.Status.Actions["test_index"].Acknowledgement.State.Should().Be(AcknowledgementState.AwaitsSuccessfulExecution); " is 128.
Long Statement,Tests.XPack.Watcher.AcknowledgeWatch,AcknowledgeWatchUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\AcknowledgeWatch\AcknowledgeWatchUrlTests.cs,Urls,The length of the statement  "					.RequestAsync(c => c.Watcher.AcknowledgeAsync(new AcknowledgeWatchRequest("watch_id"' new[] { "action_1"' "action_2" }))) " is 121.
Long Statement,Tests.XPack.Watcher.GetWatch,GetWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\GetWatch\GetWatchApiTests.cs,PutWatch,The length of the statement  "											"{\"query\" : {\"range\": {\"@timestamp\" : {\"from\": \"{{ctx.trigger.triggered_time}}||-5m\"'\"to\": \"{{ctx.trigger.triggered_time}}\"}}}}") " is 143.
Complex Conditional,Tests.CodeStandards,Responses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Responses.doc.cs,FindPropertiesBreakingRule,The conditional expression  "genericTypeDefinition == typeof(IDictionary<'>) ||  						genericTypeDefinition == typeof(Dictionary<'>) ||  						genericTypeDefinition == typeof(IEnumerable<>) ||  						genericTypeDefinition == typeof(IList<>) ||  						genericTypeDefinition == typeof(ICollection<>)"  is complex.
Complex Conditional,Tests.CodeStandards,Responses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Responses.doc.cs,FindPropertiesBreakingRule,The conditional expression  "propertyInfo.PropertyType.IsClass &&  						 (propertyInfo.PropertyType.Namespace.StartsWith("Nest") || propertyInfo.PropertyType.Namespace.StartsWith("Elasticsearch.Net"))  						 //Do not traverse known response dictionaries  						 && !ResponseDictionaries.Contains(propertyInfo.PropertyType)"  is complex.
Complex Conditional,Tests.Framework.EndpointTests,ApiIntegrationTestBase<TCluster;TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\ApiIntegrationTestBase.cs,AssertOnAllResponses,The conditional expression  "TestClient.Configuration.RunIntegrationTests && !r.IsValid && r.ApiCall.OriginalException != null  					&& !(r.ApiCall.OriginalException is ElasticsearchClientException)"  is complex.
Complex Conditional,Tests.Framework.EndpointTests,CoordinatedIntegrationTestBase<TCluster>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CoordinatedIntegrationTestBase.cs,AssertOnAllResponses,The conditional expression  "TestClient.Configuration.RunIntegrationTests && !r.IsValid && r.ApiCall.OriginalException != null  					&& !(r.ApiCall.OriginalException is ElasticsearchClientException)"  is complex.
Complex Conditional,Tests.Framework.EndpointTests.TestState,SingleEndpointUsage<TResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\TestState\EndpointUsage.cs,AssertOnAllResponses,The conditional expression  "TestClient.Configuration.RunIntegrationTests && !r.IsValid && r.ApiCall.OriginalException != null  					&& !(r.ApiCall.OriginalException is ElasticsearchClientException)"  is complex.
Magic Number,Tests.Aggregations.Bucket.Composite,CompositeAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\Composite\CompositeAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: composite.AfterKey.Should()  					.HaveCount(3)  					.And.ContainKeys("branches"' "started"' "branch_count");
Magic Number,Tests.Aggregations.Bucket.DateHistogram,DateHistogramAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\DateHistogram\DateHistogramAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: dateHistogram.Buckets.Count.Should().BeGreaterThan(10);
Magic Number,Tests.Aggregations.Bucket.DateHistogram,DateHistogramAggregationNoSubAggregationsUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\DateHistogram\DateHistogramAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: dateHistogram.Buckets.Count.Should().BeGreaterThan(10);
Magic Number,Tests.Aggregations.Bucket.DateRange,DateRangeAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\DateRange\DateRangeAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: dateHistogram.Buckets.Count.Should().Be(3);
Magic Number,Tests.Aggregations.Bucket.Filters,AnonymousFiltersUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\Filters\FiltersAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: results.Count.Should().Be(4);
Magic Number,Tests.Aggregations.Bucket.Filters,AnonymousFiltersUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\Filters\FiltersAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: results.Take(3)
Magic Number,Tests.Aggregations.Bucket.IpRange,IpRangeAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\IpRange\IpRangeAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: ipRanges.Buckets.Count.Should().Be(2);
Magic Number,Tests.Aggregations.Bucket.Range,RangeAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Bucket\Range\RangeAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: commitRanges.Buckets.Count.Should().Be(3);
Magic Number,Tests.Aggregations.Matrix.MatrixStats,MatrixStatsAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Matrix\MatrixStats\MatrixStatsAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: matrix.Fields.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.Aggregations.Matrix.MatrixStats,MatrixStatsAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Matrix\MatrixStats\MatrixStatsAggregationUsageTests.cs,AssertField,The following statement contains a magic number: stats.Covariance.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.Aggregations.Matrix.MatrixStats,MatrixStatsAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Matrix\MatrixStats\MatrixStatsAggregationUsageTests.cs,AssertField,The following statement contains a magic number: stats.Correlation.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.Aggregations.Metric.Cardinality,CardinalityAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Metric\Cardinality\CardinalityAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: projectCount.Value.Should().Be(3);
Magic Number,Tests.Aggregations.Pipeline.BucketSelector,BucketSelectorAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Pipeline\BucketSelector\BucketSelectorAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: commits.Value.Should().BeGreaterOrEqualTo(500);
Magic Number,Tests.Aggregations.Pipeline.BucketSort,BucketSortAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Pipeline\BucketSort\BucketSortAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: projectsPerMonth.Buckets.Count.Should().Be(3);
Magic Number,Tests.Aggregations.Pipeline.MovingAverage,MovingAverageHoltWintersUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Pipeline\MovingAverage\MovingAverageHoltWintersAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: bucketCount <= 4
Magic Number,Tests.Aggregations.Pipeline.SerialDifferencing,SerialDifferencingAggregationUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Aggregations\Pipeline\SerialDifferencing\SerialDifferencingAggregationUsageTests.cs,ExpectResponse,The following statement contains a magic number: differenceCount <= 2
Magic Number,Tests.Cat.CatFielddata,CatFielddataApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cat\CatFielddata\CatFielddataApiTests.cs,IntegrationSetup,The following statement contains a magic number: _initialSearchResponse = client.Search<Project>(s => s  				.Query(q => q  					.Terms(t => t  						.Field(p => p.CuratedTags.First().Name)  						.Terms(Project.Projects.SelectMany(p => p.CuratedTags).Take(50).ToList())  					)  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,SingleNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,CloudConnectionPool,The following statement contains a magic number: node.Uri.Port.Should().Be(443);
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Static,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Static,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,RandomizedInitialNodes,The following statement contains a magic number: var connectionPools = CreateSeededPools(100' 100).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,RandomizedInitialNodes,The following statement contains a magic number: var connectionPools = CreateSeededPools(100' 100).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,RandomizedInitialNodes,The following statement contains a magic number: connectionPools.Should().HaveCount(100);
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Sniffing,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Sniffing,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Sticky,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,Sticky,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,SniffingSortedSticky,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,SniffingSortedSticky,The following statement contains a magic number: var uris = Enumerable.Range(9200' 5)  				.Select(port => new Uri($"http://localhost:{port}"));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,SniffingSortedSticky,The following statement contains a magic number: var pool = new StickySniffingConnectionPool(uris' node =>  			{  				var weight = 0f;    				if (node.ClientNode)  					weight += 10;    				if (node.Settings.TryGetValue("node.attr.rack_id"' out var rackId) && rackId.ToString() == "rack_one")  					weight += 10;    				return weight;  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,ConnectionPooling,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\ConnectionPooling.doc.cs,SniffingSortedSticky,The following statement contains a magic number: var pool = new StickySniffingConnectionPool(uris' node =>  			{  				var weight = 0f;    				if (node.ClientNode)  					weight += 10;    				if (node.Settings.TryGetValue("node.attr.rack_id"' out var rackId) && rackId.ToString() == "rack_one")  					weight += 10;    				return weight;  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,DateTimeProviders,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\DateTimeProviders.Doc.cs,DeadTimeoutCalculation,The following statement contains a magic number: var maxTimeout = TimeSpan.FromMinutes(30);
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,DateTimeProviders,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\DateTimeProviders.Doc.cs,DeadTimeoutCalculation,The following statement contains a magic number: var timeouts = Enumerable.Range(0' 30)  				.Select(attempt => dateTimeProvider.DeadTime(attempt' timeout' maxTimeout))  				.ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,DateTimeProviders,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\DateTimeProviders.Doc.cs,DeadTimeoutCalculation,The following statement contains a magic number: timeouts.Take(10)
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,KeepingTrackOfNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\KeepingTrackOfNodes.Doc.cs,Creating,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,KeepingTrackOfNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\KeepingTrackOfNodes.Doc.cs,BuildingPaths,The following statement contains a magic number: node.Uri.Port.Should().Be(80);
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,KeepingTrackOfNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\KeepingTrackOfNodes.Doc.cs,MarkNodes,The following statement contains a magic number: i<10
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,RequestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\RequestPipelines.doc.cs,CreatePipeline,The following statement contains a magic number: var pool = setupPool(new[] { TestConnectionSettings.CreateUri()' TestConnectionSettings.CreateUri(9201) });
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,RequestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\RequestPipelines.doc.cs,FirstUsageCheckConcurrentThreads,The following statement contains a magic number: var sniffingPipeline = CreatePipeline(  				uris => new SniffingConnectionPool(uris)'  				connection: inMemoryConnection'  				settingsSelector: s => s.RequestTimeout(TimeSpan.FromSeconds(2)));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,RequestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\RequestPipelines.doc.cs,SniffsOnStaleCluster,The following statement contains a magic number: dateTime.ChangeTime(d => d.Add(TimeSpan.FromHours(2)));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,RequestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\RequestPipelines.doc.cs,IsTakingTooLong,The following statement contains a magic number: dateTime.ChangeTime(d => d.Add(TimeSpan.FromHours(2)));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,RequestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\RequestPipelines.doc.cs,IsTakingTooLong,The following statement contains a magic number: (dateTime.Now() - singleNodePipeline.StartedOn).Should().BePositive().And.BeCloseTo(TimeSpan.FromHours(2));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,RequestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\RequestPipelines.doc.cs,IsTakingTooLong,The following statement contains a magic number: (dateTime.Now() - staticPipeline.StartedOn).Should().BePositive().And.BeCloseTo(TimeSpan.FromHours(2));
Magic Number,Tests.ClientConcepts.ConnectionPooling.BuildingBlocks,RequestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\BuildingBlocks\RequestPipelines.doc.cs,IsTakingTooLong,The following statement contains a magic number: (dateTime.Now() - sniffingPipeline.StartedOn).Should().BePositive().And.BeCloseTo(TimeSpan.FromHours(2));
Magic Number,Tests.ClientConcepts.ConnectionPooling.Dispose,ResponseBuilderDisposeTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Dispose\ResponseBuilderDisposeTests.cs,AssertRegularResponse,The following statement contains a magic number: memoryStreamFactory.Created.Count().Should().Be(disableDirectStreaming ? 2 : 0);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Dispose,ResponseBuilderDisposeTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Dispose\ResponseBuilderDisposeTests.cs,AssertStreamResponse,The following statement contains a magic number: memoryStreamFactory.Created.Count().Should().Be(disableDirectStreaming ? 2 : 0);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,UnexpectedExceptionsBubbleOut,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith // <1> set up a cluster with 10 nodes  				.Nodes(10)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!"))) // <2> where node 2 on port 9201 always throws an exception  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,UnexpectedExceptionsBubbleOut,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith // <1> set up a cluster with 10 nodes  				.Nodes(10)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!"))) // <2> where node 2 on port 9201 always throws an exception  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,UnexpectedExceptionsBubbleOut,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.HealthyResponse' 9200 }' // <3> The first call to 9200 returns a healthy response  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,UnexpectedExceptionsBubbleOut,The following statement contains a magic number: audit = await audit.TraceUnexpectedException(  				new ClientCall {  					{ AuditEvent.BadResponse' 9201 }' // <4> ...but the second call' to 9201' returns a bad response  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.Unexpected);  					e.InnerException.Should().NotBeNull();  					e.InnerException.Message.Should().Be("boom!");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  #if DOTNETCORE  				.ClientCalls(r => r.OnPort(9200).FailAlways(new System.Net.Http.HttpRequestException("recover"))) // <1> calls on 9200 set up to throw a `HttpRequestException` or a `WebException`  #else  				.ClientCalls(r => r.OnPort(9200).FailAlways(new System.Net.WebException("recover"))) // <1>  #endif  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!"))) // <2> calls on 9201 set up to throw an `Exception`  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  #if DOTNETCORE  				.ClientCalls(r => r.OnPort(9200).FailAlways(new System.Net.Http.HttpRequestException("recover"))) // <1> calls on 9200 set up to throw a `HttpRequestException` or a `WebException`  #else  				.ClientCalls(r => r.OnPort(9200).FailAlways(new System.Net.WebException("recover"))) // <1>  #endif  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!"))) // <2> calls on 9201 set up to throw an `Exception`  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  #if DOTNETCORE  				.ClientCalls(r => r.OnPort(9200).FailAlways(new System.Net.Http.HttpRequestException("recover"))) // <1> calls on 9200 set up to throw a `HttpRequestException` or a `WebException`  #else  				.ClientCalls(r => r.OnPort(9200).FailAlways(new System.Net.WebException("recover"))) // <1>  #endif  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!"))) // <2> calls on 9201 set up to throw an `Exception`  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The following statement contains a magic number: audit = await audit.TraceUnexpectedException(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.BadResponse' 9201 }' // <3> Assert that the audit trail for the client call includes the bad response from 9200 and 9201  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.Unexpected);  					e.InnerException.Should().NotBeNull();  					e.InnerException.Message.Should().Be("boom!");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,WillFailOverKnowConnectionExceptionButNotUnexpected,The following statement contains a magic number: audit = await audit.TraceUnexpectedException(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.BadResponse' 9201 }' // <3> Assert that the audit trail for the client call includes the bad response from 9200 and 9201  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.Unexpected);  					e.InnerException.Should().NotBeNull();  					e.InnerException.Message.Should().Be("boom!");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.OnPort(9200).FailAlways(new Exception("ping exception")))  				.Ping(r => r.OnPort(9201).SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!")))  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.OnPort(9200).FailAlways(new Exception("ping exception")))  				.Ping(r => r.OnPort(9201).SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!")))  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.OnPort(9200).FailAlways(new Exception("ping exception")))  				.Ping(r => r.OnPort(9201).SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!")))  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.OnPort(9200).FailAlways(new Exception("ping exception")))  				.Ping(r => r.OnPort(9201).SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).FailAlways(new Exception("boom!")))  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The following statement contains a magic number: audit = await audit.TraceUnexpectedException(  				new ClientCall {  					{ AuditEvent.PingFailure' 9200 }'  					{ AuditEvent.PingSuccess' 9201 }'  					{ AuditEvent.BadResponse' 9201 }'  				}'  				e =>  				{  					e.FailureReason.Should().Be(PipelineFailure.Unexpected);    					e.InnerException.Should().NotBeNull();  					e.InnerException.Message.Should().Be("boom!"); // <1> `InnerException` is the exception that brought the request down    					e.SeenExceptions.Should().NotBeEmpty(); // <2> The hard exception that happened on ping is still available though  					var pipelineException = e.SeenExceptions.First();  					pipelineException.FailureReason.Should().Be(PipelineFailure.PingFailure);  					pipelineException.InnerException.Message.Should().Be("ping exception");    					var pingException = e.AuditTrail.First(a => a.Event == AuditEvent.PingFailure).Exception; // <3> An exception can be hard to relate back to a point in time' so the exception is also available on the audit trail  					pingException.Should().NotBeNull();  					pingException.Message.Should().Be("ping exception");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The following statement contains a magic number: audit = await audit.TraceUnexpectedException(  				new ClientCall {  					{ AuditEvent.PingFailure' 9200 }'  					{ AuditEvent.PingSuccess' 9201 }'  					{ AuditEvent.BadResponse' 9201 }'  				}'  				e =>  				{  					e.FailureReason.Should().Be(PipelineFailure.Unexpected);    					e.InnerException.Should().NotBeNull();  					e.InnerException.Message.Should().Be("boom!"); // <1> `InnerException` is the exception that brought the request down    					e.SeenExceptions.Should().NotBeEmpty(); // <2> The hard exception that happened on ping is still available though  					var pipelineException = e.SeenExceptions.First();  					pipelineException.FailureReason.Should().Be(PipelineFailure.PingFailure);  					pipelineException.InnerException.Message.Should().Be("ping exception");    					var pingException = e.AuditTrail.First(a => a.Event == AuditEvent.PingFailure).Exception; // <3> An exception can be hard to relate back to a point in time' so the exception is also available on the audit trail  					pingException.Should().NotBeNull();  					pingException.Message.Should().Be("ping exception");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnexpectedExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnexpectedExceptions.doc.cs,PingUnexceptedExceptionDoesFailOver,The following statement contains a magic number: audit = await audit.TraceUnexpectedException(  				new ClientCall {  					{ AuditEvent.PingFailure' 9200 }'  					{ AuditEvent.PingSuccess' 9201 }'  					{ AuditEvent.BadResponse' 9201 }'  				}'  				e =>  				{  					e.FailureReason.Should().Be(PipelineFailure.Unexpected);    					e.InnerException.Should().NotBeNull();  					e.InnerException.Message.Should().Be("boom!"); // <1> `InnerException` is the exception that brought the request down    					e.SeenExceptions.Should().NotBeEmpty(); // <2> The hard exception that happened on ping is still available though  					var pipelineException = e.SeenExceptions.First();  					pipelineException.FailureReason.Should().Be(PipelineFailure.PingFailure);  					pipelineException.InnerException.Message.Should().Be("ping exception");    					var pingException = e.AuditTrail.First(a => a.Event == AuditEvent.PingFailure).Exception; // <3> An exception can be hard to relate back to a point in time' so the exception is also available on the audit trail  					pingException.Should().NotBeNull();  					pingException.Message.Should().Be("ping exception");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationIsUnrecoverable,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways()) // <1> Always succeed on ping  				.ClientCalls(r => r.FailAlways(401)) // <2> ...but always fail on calls with a 401 Bad Authentication response  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationIsUnrecoverable,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways()) // <1> Always succeed on ping  				.ClientCalls(r => r.FailAlways(401)) // <2> ...but always fail on calls with a 401 Bad Authentication response  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationIsUnrecoverable,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }' // <1> First call results in a successful ping  					{ AuditEvent.BadResponse' 9200 }' // <2> Second call results in a bad response  				}'  				exception =>  				{  					exception.FailureReason  						.Should().Be(PipelineFailure.BadAuthentication); // <3> The reason for the bad response is Bad Authentication  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationIsUnrecoverable,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }' // <1> First call results in a successful ping  					{ AuditEvent.BadResponse' 9200 }' // <2> Second call results in a bad response  				}'  				exception =>  				{  					exception.FailureReason  						.Should().Be(PipelineFailure.BadAuthentication); // <3> The reason for the bad response is Bad Authentication  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseIsIgnored,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response' "application/json")) // <1> Always return a 401 bad response with a HTML response on client calls  				.StaticConnectionPool()  				.Settings(s => s.SkipDeserializationForStatusCodes(401))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseIsIgnored,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response' "application/json")) // <1> Always return a 401 bad response with a HTML response on client calls  				.StaticConnectionPool()  				.Settings(s => s.SkipDeserializationForStatusCodes(401))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseIsIgnored,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response' "application/json")) // <1> Always return a 401 bad response with a HTML response on client calls  				.StaticConnectionPool()  				.Settings(s => s.SkipDeserializationForStatusCodes(401))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseIsIgnored,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9201 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().BeNull(); // <2> Assert that the response body bytes are null  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseIsIgnored,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9201 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().BeNull(); // <2> Assert that the response body bytes are null  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseIsIgnored,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9201 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().BeNull(); // <2> Assert that the response body bytes are null  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseStillExposedWhenUsingDisableDirectStreaming,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response' "text/html"))  				.StaticConnectionPool()  				.Settings(s => s.DisableDirectStreaming())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseStillExposedWhenUsingDisableDirectStreaming,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response' "text/html"))  				.StaticConnectionPool()  				.Settings(s => s.DisableDirectStreaming())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseStillExposedWhenUsingDisableDirectStreaming,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9200 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().NotBeNull(); // <1> Response bytes are set on the response  					var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);  					responseString.Should().Contain("nginx/"); // <2> Assert that the response contains `"nginx/"`  					e.DebugInformation.Should().Contain("nginx/");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseStillExposedWhenUsingDisableDirectStreaming,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9200 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().NotBeNull(); // <1> Response bytes are set on the response  					var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);  					responseString.Should().Contain("nginx/"); // <2> Assert that the response contains `"nginx/"`  					e.DebugInformation.Should().Contain("nginx/");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthenticationHtmlResponseStillExposedWhenUsingDisableDirectStreaming,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9200 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().NotBeNull(); // <1> Response bytes are set on the response  					var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);  					responseString.Should().Contain("nginx/"); // <2> Assert that the response contains `"nginx/"`  					e.DebugInformation.Should().Contain("nginx/");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthOnGetClientCallDoesNotThrowSerializationException,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response))  				.StaticConnectionPool()  				.Settings(s => s.DisableDirectStreaming().SkipDeserializationForStatusCodes(401))  				.ClientProxiesTo(  					(c' r) => c.Get<GetResponse<Project>>("default"' "1")'  					async (c' r) => await c.GetAsync<GetResponse<Project>>("default-index"' "1") as IResponse  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthOnGetClientCallDoesNotThrowSerializationException,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response))  				.StaticConnectionPool()  				.Settings(s => s.DisableDirectStreaming().SkipDeserializationForStatusCodes(401))  				.ClientProxiesTo(  					(c' r) => c.Get<GetResponse<Project>>("default"' "1")'  					async (c' r) => await c.GetAsync<GetResponse<Project>>("default-index"' "1") as IResponse  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthOnGetClientCallDoesNotThrowSerializationException,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(r => r.SucceedAlways())  				.ClientCalls(r => r.FailAlways(401).ReturnByteResponse(HtmlNginx401Response))  				.StaticConnectionPool()  				.Settings(s => s.DisableDirectStreaming().SkipDeserializationForStatusCodes(401))  				.ClientProxiesTo(  					(c' r) => c.Get<GetResponse<Project>>("default"' "1")'  					async (c' r) => await c.GetAsync<GetResponse<Project>>("default-index"' "1") as IResponse  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthOnGetClientCallDoesNotThrowSerializationException,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9200 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().NotBeNull();  					var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);  					responseString.Should().Contain("nginx/");  					e.DebugInformation.Should().Contain("nginx/");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthOnGetClientCallDoesNotThrowSerializationException,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9200 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().NotBeNull();  					var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);  					responseString.Should().Contain("nginx/");  					e.DebugInformation.Should().Contain("nginx/");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Exceptions,UnrecoverableExceptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Exceptions\UnrecoverableExceptions.doc.cs,BadAuthOnGetClientCallDoesNotThrowSerializationException,The following statement contains a magic number: audit = await audit.TraceElasticsearchException(  				new ClientCall {  					{ AuditEvent.PingSuccess' 9200 }'  					{ AuditEvent.BadResponse' 9200 }'  				}'  				(e) =>  				{  					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);  					e.Response.HttpStatusCode.Should().Be(401);  					e.Response.ResponseBodyInBytes.Should().NotBeNull();  					var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);  					responseString.Should().Contain("nginx/");  					e.DebugInformation.Should().Contain("nginx/");  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,ExceptionFallsOverToNextNode,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,ExceptionFallsOverToNextNode,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,ExceptionFallsOverToNextNode,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,ExceptionFallsOverToNextNode,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http502FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(502))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http502FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(502))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http502FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(502))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http502FallsOver,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http502FallsOver,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http503FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(503))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http503FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(503))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http503FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(503))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http503FallsOver,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http503FallsOver,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http504FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(504))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http504FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(504))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http504FallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(504))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http504FallsOver,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,Http504FallsOver,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  					{ AuditEvent.HealthyResponse' 9201 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,HttpTeapotDoesNotFallOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(418))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,HttpTeapotDoesNotFallOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(418))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,HttpTeapotDoesNotFallOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(418))  				.ClientCalls(r => r.OnPort(9201).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Failover,FallingOver,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Failover\FallingOver.doc.cs,HttpTeapotDoesNotFallOver,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ AuditEvent.BadResponse' 9200 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(3)) // <1> Set the maximum number of retries to 3  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(3)) // <1> Set the maximum number of retries to 3  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(3)) // <1> Set the maximum number of retries to 3  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ MaxRetriesReached } // <2> The client call trace returns an `MaxRetriesReached` audit after the initial attempt and the number of retries allowed  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ MaxRetriesReached } // <2> The client call trace returns an `MaxRetriesReached` audit after the initial attempt and the number of retries allowed  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ MaxRetriesReached } // <2> The client call trace returns an `MaxRetriesReached` audit after the initial attempt and the number of retries allowed  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ MaxRetriesReached } // <2> The client call trace returns an `MaxRetriesReached` audit after the initial attempt and the number of retries allowed  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsOveralRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsOveralRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsOveralRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsOveralRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsOveralRequestTimeout,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsOveralRequestTimeout,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).FailAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).FailAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).FailAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).FailAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).FailAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RespectsMaxRetryTimeoutOverRequestTimeout,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RetriesAreLimitedByNodesInPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(2)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RetriesAreLimitedByNodesInPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(2)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RetriesAreLimitedByNodesInPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(2)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RetriesAreLimitedByNodesInPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(2)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RetriesAreLimitedByNodesInPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(2)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(2)).MaxRetryTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RetriesAreLimitedByNodesInPool,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,RetriesAreLimitedByNodesInPool,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.MaxRetries,RespectsMaxRetry,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\MaxRetries\RespectsMaxRetry.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall {  					{ BadResponse' 9200 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverToHealthyNodeWithoutPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(2)  				.Ping(p => p.Succeeds(Always))  				.Ping(p => p.OnPort(9201).FailAlways())  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverToHealthyNodeWithoutPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(2)  				.Ping(p => p.Succeeds(Always))  				.Ping(p => p.OnPort(9201).FailAlways())  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverToHealthyNodeWithoutPing,The following statement contains a magic number: await audit.TraceCalls(    				new ClientCall {  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  					{  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0);  					} }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverToHealthyNodeWithoutPing,The following statement contains a magic number: await audit.TraceCalls(    				new ClientCall {  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  					{  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0);  					} }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverToHealthyNodeWithoutPing,The following statement contains a magic number: await audit.TraceCalls(    				new ClientCall {  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  					{  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0);  					} }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverToHealthyNodeWithoutPing,The following statement contains a magic number: await audit.TraceCalls(    				new ClientCall {  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  					{  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0);  					} }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.Ping(p => p.SucceedAlways())  				.Ping(p => p.OnPort(9201).FailAlways())  				.Ping(p => p.OnPort(9202).FailAlways())  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.Ping(p => p.SucceedAlways())  				.Ping(p => p.OnPort(9201).FailAlways())  				.Ping(p => p.OnPort(9202).FailAlways())  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.Ping(p => p.SucceedAlways())  				.Ping(p => p.OnPort(9201).FailAlways())  				.Ping(p => p.OnPort(9202).FailAlways())  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200}' // <1> The first call goes to 9200' which succeeds  					{ HealthyResponse' 9200}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0)  					}  				}'  				new ClientCall {  					{ PingFailure' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. This fails  					{ PingFailure' 9202}' // <3> So we ping 9202. This _also_ fails  					{ PingSuccess' 9203}' // <4> We then ping 9203 because we haven't used it before and it succeeds  					{ HealthyResponse' 9203}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead  					}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200}' // <1> The first call goes to 9200' which succeeds  					{ HealthyResponse' 9200}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0)  					}  				}'  				new ClientCall {  					{ PingFailure' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. This fails  					{ PingFailure' 9202}' // <3> So we ping 9202. This _also_ fails  					{ PingSuccess' 9203}' // <4> We then ping 9203 because we haven't used it before and it succeeds  					{ HealthyResponse' 9203}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead  					}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200}' // <1> The first call goes to 9200' which succeeds  					{ HealthyResponse' 9200}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0)  					}  				}'  				new ClientCall {  					{ PingFailure' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. This fails  					{ PingFailure' 9202}' // <3> So we ping 9202. This _also_ fails  					{ PingSuccess' 9203}' // <4> We then ping 9203 because we haven't used it before and it succeeds  					{ HealthyResponse' 9203}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead  					}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200}' // <1> The first call goes to 9200' which succeeds  					{ HealthyResponse' 9200}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0)  					}  				}'  				new ClientCall {  					{ PingFailure' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. This fails  					{ PingFailure' 9202}' // <3> So we ping 9202. This _also_ fails  					{ PingSuccess' 9203}' // <4> We then ping 9203 because we haven't used it before and it succeeds  					{ HealthyResponse' 9203}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead  					}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200}' // <1> The first call goes to 9200' which succeeds  					{ HealthyResponse' 9200}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0)  					}  				}'  				new ClientCall {  					{ PingFailure' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. This fails  					{ PingFailure' 9202}' // <3> So we ping 9202. This _also_ fails  					{ PingSuccess' 9203}' // <4> We then ping 9203 because we haven't used it before and it succeeds  					{ HealthyResponse' 9203}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead  					}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200}' // <1> The first call goes to 9200' which succeeds  					{ HealthyResponse' 9200}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0)  					}  				}'  				new ClientCall {  					{ PingFailure' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. This fails  					{ PingFailure' 9202}' // <3> So we ping 9202. This _also_ fails  					{ PingSuccess' 9203}' // <4> We then ping 9203 because we haven't used it before and it succeeds  					{ HealthyResponse' 9203}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead  					}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,PingFailsFallsOverMultipleTimesToHealthyNode,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200}' // <1> The first call goes to 9200' which succeeds  					{ HealthyResponse' 9200}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0)  					}  				}'  				new ClientCall {  					{ PingFailure' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. This fails  					{ PingFailure' 9202}' // <3> So we ping 9202. This _also_ fails  					{ PingSuccess' 9203}' // <4> We then ping 9203 because we haven't used it before and it succeeds  					{ HealthyResponse' 9203}'  					{ pool =>  						pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) // <5> Finally' we assert that the connection pool has two nodes that are marked as dead  					}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.Ping(p => p.SucceedAlways()) // <1> Pings on nodes always succeed  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,FirstUsage,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\FirstUsage.doc.cs,AllNodesArePingedOnlyOnFirstUseProvidedTheyAreHealthy,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200}' { HealthyResponse' 9200} }' // <2> A successful ping on each node  				new ClientCall { { PingSuccess' 9201}' { HealthyResponse' 9201} }'  				new ClientCall { { PingSuccess' 9202}' { HealthyResponse' 9202} }'  				new ClientCall { { PingSuccess' 9203}' { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }'  				new ClientCall { { HealthyResponse' 9201} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9203} }'  				new ClientCall { { HealthyResponse' 9200} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(3)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9202).Fails(Once))  				.Ping(p => p.SucceedAlways())  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(3)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9202).Fails(Once))  				.Ping(p => p.SucceedAlways())  				.StaticConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { PingSuccess' 9200 }' { HealthyResponse' 9200 } }'  				new ClientCall { { PingSuccess' 9201 }' { HealthyResponse' 9201 } }'  				new ClientCall {  					{ PingSuccess' 9202}'  					{ BadResponse' 9202}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.First(n=>!n.IsAlive).DeadUntil.Should().BeAfter(DateTime.UtcNow) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit.ChangeTime(d => d.AddMinutes(20));
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ Resurrection' 9202 }'  					{ PingSuccess' 9202 }'  					{ HealthyResponse' 9202 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ Resurrection' 9202 }'  					{ PingSuccess' 9202 }'  					{ HealthyResponse' 9202 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ Resurrection' 9202 }'  					{ PingSuccess' 9202 }'  					{ HealthyResponse' 9202 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Pinging,Revival,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Pinging\Revival.doc.cs,PingAfterRevival,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall {  					{ Resurrection' 9202 }'  					{ PingSuccess' 9202 }'  					{ HealthyResponse' 9202 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.SucceedAlways())  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup()) // <1> sniff on startup  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall(r => r.DisableSniffing()) // <1> disable sniffing  				{  					{ PingSuccess' 9200 }' // <2> first call is a successful ping  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ SniffOnStartup }' // <3> sniff on startup call happens here' on the second call  					{ SniffSuccess' 9200 }'  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ PingSuccess' 9201 }' // <4> No sniff on startup again  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall(r => r.DisableSniffing()) // <1> disable sniffing  				{  					{ PingSuccess' 9200 }' // <2> first call is a successful ping  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ SniffOnStartup }' // <3> sniff on startup call happens here' on the second call  					{ SniffSuccess' 9200 }'  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ PingSuccess' 9201 }' // <4> No sniff on startup again  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall(r => r.DisableSniffing()) // <1> disable sniffing  				{  					{ PingSuccess' 9200 }' // <2> first call is a successful ping  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ SniffOnStartup }' // <3> sniff on startup call happens here' on the second call  					{ SniffSuccess' 9200 }'  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ PingSuccess' 9201 }' // <4> No sniff on startup again  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall(r => r.DisableSniffing()) // <1> disable sniffing  				{  					{ PingSuccess' 9200 }' // <2> first call is a successful ping  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ SniffOnStartup }' // <3> sniff on startup call happens here' on the second call  					{ SniffSuccess' 9200 }'  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ PingSuccess' 9201 }' // <4> No sniff on startup again  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall(r => r.DisableSniffing()) // <1> disable sniffing  				{  					{ PingSuccess' 9200 }' // <2> first call is a successful ping  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ SniffOnStartup }' // <3> sniff on startup call happens here' on the second call  					{ SniffSuccess' 9200 }'  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ PingSuccess' 9201 }' // <4> No sniff on startup again  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall(r => r.DisableSniffing()) // <1> disable sniffing  				{  					{ PingSuccess' 9200 }' // <2> first call is a successful ping  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ SniffOnStartup }' // <3> sniff on startup call happens here' on the second call  					{ SniffSuccess' 9200 }'  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ PingSuccess' 9201 }' // <4> No sniff on startup again  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniff,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall(r => r.DisableSniffing()) // <1> disable sniffing  				{  					{ PingSuccess' 9200 }' // <2> first call is a successful ping  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ SniffOnStartup }' // <3> sniff on startup call happens here' on the second call  					{ SniffSuccess' 9200 }'  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }  				}'  				new ClientCall()  				{  					{ PingSuccess' 9201 }' // <4> No sniff on startup again  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisablePing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.SucceedAlways())  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisablePing,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.DisablePing()) // <1> disable ping  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }' // <2> No ping after sniffing  					{ HealthyResponse' 9200 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisablePing,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.DisablePing()) // <1> disable ping  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }' // <2> No ping after sniffing  					{ HealthyResponse' 9200 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniffAndPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.SucceedAlways())  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,DisableSniffPingPerRequest,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\DisableSniffPingPerRequest.doc.cs,DisableSniffAndPing,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r=>r.DisableSniffing().DisablePing()) // <1> disable ping and sniff  				{  					{ HealthyResponse' 9200 } // <2> no ping or sniff before the call  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(10)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().RequestTimeout(TimeSpan.FromSeconds(20)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsRequestTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we specify a request timeout override to 80 seconds  				* We should now see more nodes being tried.  				*/  				new ClientCall(r => r.RequestTimeout(TimeSpan.FromSeconds(80)))  				{  					{ BadResponse' 9203 }'  					{ BadResponse' 9204 }'  					{ BadResponse' 9205 }'  					{ BadResponse' 9206 }'  					{ BadResponse' 9207 }'  					{ BadResponse' 9208 }'  					{ HealthyResponse' 9209 }'  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(p => p.SucceedAlways().Takes(TimeSpan.FromSeconds(20)))  				.ClientCalls(r => r.SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.RequestTimeout(TimeSpan.FromSeconds(10)).PingTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(p => p.SucceedAlways().Takes(TimeSpan.FromSeconds(20)))  				.ClientCalls(r => r.SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.RequestTimeout(TimeSpan.FromSeconds(10)).PingTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(p => p.SucceedAlways().Takes(TimeSpan.FromSeconds(20)))  				.ClientCalls(r => r.SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.RequestTimeout(TimeSpan.FromSeconds(10)).PingTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Ping(p => p.SucceedAlways().Takes(TimeSpan.FromSeconds(20)))  				.ClientCalls(r => r.SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.RequestTimeout(TimeSpan.FromSeconds(10)).PingTimeout(TimeSpan.FromSeconds(10)))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				/**  				* The first call uses the configured global settings' request times out after 10 seconds and ping  				* calls always take 20' so we should see a single ping failure  				*/  				new ClientCall {  					{ PingFailure' 9200 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we set a request ping timeout override of 2 seconds  				* We should now see more nodes being tried before the request timeout is hit.  				*/  				new ClientCall(r => r.PingTimeout(TimeSpan.FromSeconds(2)))  				{  					{ PingFailure' 9202 }'  					{ PingFailure' 9203 }'  					{ PingFailure' 9204 }'  					{ PingFailure' 9205 }'  					{ PingFailure' 9206 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				/**  				* The first call uses the configured global settings' request times out after 10 seconds and ping  				* calls always take 20' so we should see a single ping failure  				*/  				new ClientCall {  					{ PingFailure' 9200 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we set a request ping timeout override of 2 seconds  				* We should now see more nodes being tried before the request timeout is hit.  				*/  				new ClientCall(r => r.PingTimeout(TimeSpan.FromSeconds(2)))  				{  					{ PingFailure' 9202 }'  					{ PingFailure' 9203 }'  					{ PingFailure' 9204 }'  					{ PingFailure' 9205 }'  					{ PingFailure' 9206 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				/**  				* The first call uses the configured global settings' request times out after 10 seconds and ping  				* calls always take 20' so we should see a single ping failure  				*/  				new ClientCall {  					{ PingFailure' 9200 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we set a request ping timeout override of 2 seconds  				* We should now see more nodes being tried before the request timeout is hit.  				*/  				new ClientCall(r => r.PingTimeout(TimeSpan.FromSeconds(2)))  				{  					{ PingFailure' 9202 }'  					{ PingFailure' 9203 }'  					{ PingFailure' 9204 }'  					{ PingFailure' 9205 }'  					{ PingFailure' 9206 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				/**  				* The first call uses the configured global settings' request times out after 10 seconds and ping  				* calls always take 20' so we should see a single ping failure  				*/  				new ClientCall {  					{ PingFailure' 9200 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we set a request ping timeout override of 2 seconds  				* We should now see more nodes being tried before the request timeout is hit.  				*/  				new ClientCall(r => r.PingTimeout(TimeSpan.FromSeconds(2)))  				{  					{ PingFailure' 9202 }'  					{ PingFailure' 9203 }'  					{ PingFailure' 9204 }'  					{ PingFailure' 9205 }'  					{ PingFailure' 9206 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				/**  				* The first call uses the configured global settings' request times out after 10 seconds and ping  				* calls always take 20' so we should see a single ping failure  				*/  				new ClientCall {  					{ PingFailure' 9200 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we set a request ping timeout override of 2 seconds  				* We should now see more nodes being tried before the request timeout is hit.  				*/  				new ClientCall(r => r.PingTimeout(TimeSpan.FromSeconds(2)))  				{  					{ PingFailure' 9202 }'  					{ PingFailure' 9203 }'  					{ PingFailure' 9204 }'  					{ PingFailure' 9205 }'  					{ PingFailure' 9206 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				/**  				* The first call uses the configured global settings' request times out after 10 seconds and ping  				* calls always take 20' so we should see a single ping failure  				*/  				new ClientCall {  					{ PingFailure' 9200 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we set a request ping timeout override of 2 seconds  				* We should now see more nodes being tried before the request timeout is hit.  				*/  				new ClientCall(r => r.PingTimeout(TimeSpan.FromSeconds(2)))  				{  					{ PingFailure' 9202 }'  					{ PingFailure' 9203 }'  					{ PingFailure' 9204 }'  					{ PingFailure' 9205 }'  					{ PingFailure' 9206 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RequestTimeoutsOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RequestTimeoutsOverrides.doc.cs,RespectsConnectTimeoutOverride,The following statement contains a magic number: audit = await audit.TraceCalls(  				/**  				* The first call uses the configured global settings' request times out after 10 seconds and ping  				* calls always take 20' so we should see a single ping failure  				*/  				new ClientCall {  					{ PingFailure' 9200 }'  					{ MaxTimeoutReached }  				}'  				/**  				* On the second request we set a request ping timeout override of 2 seconds  				* We should now see more nodes being tried before the request timeout is hit.  				*/  				new ClientCall(r => r.PingTimeout(TimeSpan.FromSeconds(2)))  				{  					{ PingFailure' 9202 }'  					{ PingFailure' 9203 }'  					{ PingFailure' 9204 }'  					{ PingFailure' 9205 }'  					{ PingFailure' 9206 }'  					{ MaxTimeoutReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsAllowedStatusCode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsAllowedStatusCode.doc.cs,CanOverrideBadResponse,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(400))  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(0))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsAllowedStatusCode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsAllowedStatusCode.doc.cs,CanOverrideBadResponse,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways(400))  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(0))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsAllowedStatusCode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsAllowedStatusCode.doc.cs,CanOverrideBadResponse,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }  				}'  				new ClientCall(r => r.AllowedStatusCodes(400)) {  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsAllowedStatusCode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsAllowedStatusCode.doc.cs,CanOverrideBadResponse,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }  				}'  				new ClientCall(r => r.AllowedStatusCodes(400)) {  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsAllowedStatusCode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsAllowedStatusCode.doc.cs,CanOverrideBadResponse,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200 }  				}'  				new ClientCall(r => r.AllowedStatusCodes(400)) {  					{ HealthyResponse' 9201 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsForceNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsForceNode.doc.cs,OnlyCallsForcedNode,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9208).FailAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsForceNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsForceNode.doc.cs,OnlyCallsForcedNode,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9208).FailAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsForceNode,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsForceNode.doc.cs,OnlyCallsForcedNode,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.ForceNode(new Uri("http://localhost:9208"))) {  					{ BadResponse' 9208 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DefaultMaxIsNumberOfNodes,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(5))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(5))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways())  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.StaticConnectionPool()  				.Settings(s => s.DisablePing().MaximumRetries(5))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,FixedMaximumNumberOfRetries,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(2)) {  					{ BadResponse' 9200 }'  					{ BadResponse' 9201 }'  					{ BadResponse' 9202 }'  					{ MaxRetriesReached }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.ClientCalls(r => r.FailAlways().Takes(TimeSpan.FromSeconds(3)))  				.ClientCalls(r => r.OnPort(9209).SucceedAlways())  				.SingleNodeConnection()  				.Settings(s => s.DisablePing().MaximumRetries(10))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(10)) {  					{ BadResponse' 9200 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RequestOverrides,RespectsMaxRetryOverrides,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RequestOverrides\RespectsMaxRetryOverrides.doc.cs,DoesNotRetryOnSingleNodeConnectionPool,The following statement contains a magic number: audit = await audit.TraceCall(  				new ClientCall(r => r.MaxRetries(10)) {  					{ BadResponse' 9200 }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,RoundRobin,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\RoundRobin.doc.cs,EachViewStartsAtNexPositionAndWrapsOver,The following statement contains a magic number: var uris = Enumerable.Range(9200' NumberOfNodes).Select(p => new Uri("http://localhost:" + p));
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,RoundRobin,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\RoundRobin.doc.cs,AssertCreateView,The following statement contains a magic number: var expectedOrder = Enumerable.Range(9200' NumberOfNodes);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,RoundRobin,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\RoundRobin.doc.cs,AssertCreateView,The following statement contains a magic number: var threads = Enumerable.Range(0' 20)  				.Select(i => CreateThreadCallingCreateView(pool' threadedStartPositions))  				.ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,RoundRobin,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\RoundRobin.doc.cs,AssertCreateView,The following statement contains a magic number: grouped.Select(p => p.Count()).Should().OnlyContain(p => p == 2);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSkipsAheadWithOne,The following statement contains a magic number: var seeds = Enumerable.Range(9200' NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSkipsAheadWithOne,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSkipsAheadWithOne,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSkipsAheadWithOne,The following statement contains a magic number: node.Uri.Port.Should().Be(9202);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSkipsAheadWithOne,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: var seeds = Enumerable.Range(9200' NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9202);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9202);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: var seeds = Enumerable.Range(9200' NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: node.Uri.Port.Should().Be(9202);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: dateTimeProvider.ChangeTime(d => d.AddDays(2));
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: n.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: n.Uri.Port.Should().Be(9202);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: n.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Succeeds(Always))  				.ClientCalls(p => p.OnPort(9201).FailAlways())  				.ClientCalls(p => p.OnPort(9203).FailAlways())  				.StaticConnectionPool()  				.Settings(p=>p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Succeeds(Always))  				.ClientCalls(p => p.OnPort(9201).FailAlways())  				.ClientCalls(p => p.OnPort(9203).FailAlways())  				.StaticConnectionPool()  				.Settings(p=>p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Succeeds(Always))  				.ClientCalls(p => p.OnPort(9201).FailAlways())  				.ClientCalls(p => p.OnPort(9203).FailAlways())  				.StaticConnectionPool()  				.Settings(p=>p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ HealthyResponse' 9200}' // <1> The first call goes to 9200 which succeeds  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0) }  				}'  				new ClientCall {  					{ BadResponse' 9201}' // <2> The 2nd call does a ping on 9201 because its used for the first time. It fails so we wrap over to node 9202  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }  				}'  				new ClientCall {  					{ BadResponse' 9203}' // <3> The next call goes to 9203 which fails so we should wrap over  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9200}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Fails(Always))  				.StaticConnectionPool()  				.Settings(p=>p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,SkippingDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall {  					{ BadResponse' 9200}' // <1> All the calls fail  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }' // <2> After all our registered nodes are marked dead we want to sample a single dead node each time to quickly see if the cluster is back up. We do not want to retry all 4 nodes  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,VolatileUpdates,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\VolatileUpdates.cs,SniffingPoolWithstandsConcurrentReadAndWrites,The following statement contains a magic number: var uris = Enumerable.Range(9200' NumberOfNodes).Select(p => new Uri("http://localhost:" + p));
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,VolatileUpdates,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\VolatileUpdates.cs,StaticPoolWithstandsConcurrentReadAndWrites,The following statement contains a magic number: var uris = Enumerable.Range(9200' NumberOfNodes).Select(p => new Uri("http://localhost:" + p));
Magic Number,Tests.ClientConcepts.ConnectionPooling.RoundRobin,VolatileUpdates,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\RoundRobin\VolatileUpdates.cs,AssertCreateView,The following statement contains a magic number: var threads = Enumerable.Range(0' 50)  				.Select(i => CreateReadAndUpdateThread(pool))  				.ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,AddressParsing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\AddressParsing.doc.cs,IsMatched,The following statement contains a magic number: var port = testcases[i' 2];
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,AddressParsing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\AddressParsing.doc.cs,FqdnIsReadCorrectly,The following statement contains a magic number: var ip = testcases[i' 2];
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,AddressParsing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\AddressParsing.doc.cs,FqdnIsReadCorrectly,The following statement contains a magic number: var port = testcases[i' 3];
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.ClientCalls(r => r.OnPort(9201).Fails(Once)) // <1> When the call fails on 9201' the following sniff succeeds and returns a new cluster state of healthy nodes. This cluster only has 3 nodes and the known masters are 9200 and 9202. A search on 9201 is setup to still fail once  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.ClientCalls(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith // <2> After this second failure on 9201' another sniff will happen which returns a cluster state that no longer fails but looks completely different; It's now three nodes on ports 9210 - 9212' with 9210 and 9212 being master eligible.  						.Nodes(3' 9210)  						.MasterEligible(9210' 9212)  						.ClientCalls(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailure,The following statement contains a magic number: audit = await audit.TraceCalls(  			/** */  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }'  					{ SniffSuccess' 9202}' // <3> We assert we do a sniff on our first known master node 9202 after the failed call on 9201  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <4> Our pool should now have three nodes  				}'  				new ClientCall {  					{ BadResponse' 9201}'  					{ SniffOnFail }' // <5> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(5)  				.MasterEligible(9202' 9203' 9204)  				.Ping(r => r.OnPort(9201).Fails(Once))  				.Sniff(p => p.SucceedAlways(VirtualClusterWith  					.Nodes(3)  					.MasterEligible(9200' 9202)  					.Ping(r => r.OnPort(9201).Fails(Once))  					.Sniff(s => s.SucceedAlways(VirtualClusterWith  						.Nodes(3' 9210)  						.MasterEligible(9210' 9211)  						.Ping(r => r.SucceedAlways())  						.Sniff(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,DoesASniffAfterConnectionFailureOnPing,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingSuccess' 9200 }'  					{ HealthyResponse' 9200 }'  					{ pool =>  pool.Nodes.Count.Should().Be(5) }  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <1> We assert we do a sniff on our first known master node 9202  					{ SniffSuccess' 9202}'  					{ PingSuccess' 9200}'  					{ HealthyResponse' 9200}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) } // <2> Our pool should now have three nodes  				}'  				new ClientCall {  					{ PingFailure' 9201}'  					{ SniffOnFail }' // <3> We assert we do a sniff on the first master node in our updated cluster  					{ SniffSuccess' 9200}'  					{ PingSuccess' 9210}'  					{ HealthyResponse' 9210}'  					{ pool =>  pool.Nodes.Count.Should().Be(3) }  				}'  				new ClientCall {  					{ PingSuccess' 9211 }'  					{ HealthyResponse' 9211 }  				}'  				new ClientCall {  					{ PingSuccess' 9212 }'  					{ HealthyResponse' 9212 }  				}'  				new ClientCall { { HealthyResponse' 9210 } }' // <4> 9210 was already pinged after the sniff returned the new nodes  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9212 } }'  				new ClientCall { { HealthyResponse' 9210 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  					.Nodes(2)  					.MasterEligible(9200)  					.Ping(r => r.OnPort(9200).Fails(Once))  					.Sniff(p => p.SucceedAlways(VirtualClusterWith  							.Nodes(10)  							.MasterEligible(9200' 9202' 9201)  							.PublishAddress("10.0.12.1")  					))  					.SniffingConnectionPool()  					.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  					.Nodes(2)  					.MasterEligible(9200)  					.Ping(r => r.OnPort(9200).Fails(Once))  					.Sniff(p => p.SucceedAlways(VirtualClusterWith  							.Nodes(10)  							.MasterEligible(9200' 9202' 9201)  							.PublishAddress("10.0.12.1")  					))  					.SniffingConnectionPool()  					.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  					.Nodes(2)  					.MasterEligible(9200)  					.Ping(r => r.OnPort(9200).Fails(Once))  					.Sniff(p => p.SucceedAlways(VirtualClusterWith  							.Nodes(10)  							.MasterEligible(9200' 9202' 9201)  							.PublishAddress("10.0.12.1")  					))  					.SniffingConnectionPool()  					.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  					.Nodes(2)  					.MasterEligible(9200)  					.Ping(r => r.OnPort(9200).Fails(Once))  					.Sniff(p => p.SucceedAlways(VirtualClusterWith  							.Nodes(10)  							.MasterEligible(9200' 9202' 9201)  							.PublishAddress("10.0.12.1")  					))  					.SniffingConnectionPool()  					.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  					.Nodes(2)  					.MasterEligible(9200)  					.Ping(r => r.OnPort(9200).Fails(Once))  					.Sniff(p => p.SucceedAlways(VirtualClusterWith  							.Nodes(10)  							.MasterEligible(9200' 9202' 9201)  							.PublishAddress("10.0.12.1")  					))  					.SniffingConnectionPool()  					.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  					.Nodes(2)  					.MasterEligible(9200)  					.Ping(r => r.OnPort(9200).Fails(Once))  					.Sniff(p => p.SucceedAlways(VirtualClusterWith  							.Nodes(10)  							.MasterEligible(9200' 9202' 9201)  							.PublishAddress("10.0.12.1")  					))  					.SniffingConnectionPool()  					.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  					.Nodes(2)  					.MasterEligible(9200)  					.Ping(r => r.OnPort(9200).Fails(Once))  					.Sniff(p => p.SucceedAlways(VirtualClusterWith  							.Nodes(10)  							.MasterEligible(9200' 9202' 9201)  							.PublishAddress("10.0.12.1")  					))  					.SniffingConnectionPool()  					.Settings(s => s.SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingFailure' a => HostAssert(a' "localhost"' 9200)}'  					{ SniffOnFail }'  					{ SniffSuccess' a => SniffUrlAssert(a' "localhost"' 9200)}'  					{ PingSuccess' a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ HealthyResponse'  a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ pool =>  pool.Nodes.Count.Should().Be(10) } // <1> Our pool should now have 10 nodes  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingFailure' a => HostAssert(a' "localhost"' 9200)}'  					{ SniffOnFail }'  					{ SniffSuccess' a => SniffUrlAssert(a' "localhost"' 9200)}'  					{ PingSuccess' a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ HealthyResponse'  a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ pool =>  pool.Nodes.Count.Should().Be(10) } // <1> Our pool should now have 10 nodes  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingFailure' a => HostAssert(a' "localhost"' 9200)}'  					{ SniffOnFail }'  					{ SniffSuccess' a => SniffUrlAssert(a' "localhost"' 9200)}'  					{ PingSuccess' a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ HealthyResponse'  a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ pool =>  pool.Nodes.Count.Should().Be(10) } // <1> Our pool should now have 10 nodes  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingFailure' a => HostAssert(a' "localhost"' 9200)}'  					{ SniffOnFail }'  					{ SniffSuccess' a => SniffUrlAssert(a' "localhost"' 9200)}'  					{ PingSuccess' a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ HealthyResponse'  a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ pool =>  pool.Nodes.Count.Should().Be(10) } // <1> Our pool should now have 10 nodes  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnConnectionFailure,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnConnectionFailure.doc.cs,UsesPublishAddress,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ PingFailure' a => HostAssert(a' "localhost"' 9200)}'  					{ SniffOnFail }'  					{ SniffSuccess' a => SniffUrlAssert(a' "localhost"' 9200)}'  					{ PingSuccess' a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ HealthyResponse'  a => HostAssert(a' "10.0.12.1"' 9200)}'  					{ pool =>  pool.Nodes.Count.Should().Be(10) } // <1> Our pool should now have 10 nodes  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.MasterEligible(9202' 9203' 9204)  				.ClientCalls(r => r.SucceedAlways())  				.Sniff(s => s.SucceedAlways(VirtualClusterWith  					.Nodes(100)  					.MasterEligible(9202' 9203' 9204)  					.ClientCalls(r => r.SucceedAlways())  					.Sniff(ss => ss.SucceedAlways(VirtualClusterWith  						.Nodes(10)  						.MasterEligible(9202' 9203' 9204)  						.ClientCalls(r => r.SucceedAlways())  					))  				))  				.SniffingConnectionPool()  				.Settings(s => s  					.DisablePing()  					.SniffOnConnectionFault(false)  					.SniffOnStartup(false)  					.SniffLifeSpan(TimeSpan.FromMinutes(30))  				)  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9200 } }'  				new ClientCall { { HealthyResponse' 9201 } }'  				new ClientCall { { HealthyResponse' 9202 } }'  				new ClientCall { { HealthyResponse' 9203 } }'  				new ClientCall { { HealthyResponse' 9204 } }'  				new ClientCall { { HealthyResponse' 9205 } }'  				new ClientCall { { HealthyResponse' 9206 } }'  				new ClientCall { { HealthyResponse' 9207 } }'  				new ClientCall { { HealthyResponse' 9208 } }'  				new ClientCall { { HealthyResponse' 9209 } }'  				new ClientCall {  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit.ChangeTime(d => d.AddMinutes(31));
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ SniffOnStaleCluster }'  					{ SniffSuccess' 9202 }'  					{ HealthyResponse' 9201 }'  					{ pool => pool.Nodes.Count.Should().Be(100) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ SniffOnStaleCluster }'  					{ SniffSuccess' 9202 }'  					{ HealthyResponse' 9201 }'  					{ pool => pool.Nodes.Count.Should().Be(100) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {  					{ SniffOnStaleCluster }'  					{ SniffSuccess' 9202 }'  					{ HealthyResponse' 9201 }'  					{ pool => pool.Nodes.Count.Should().Be(100) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit.ChangeTime(d => d.AddMinutes(31));
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {    					{ SniffOnStaleCluster }'  					{ SniffSuccess' 9202 }'  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {    					{ SniffOnStaleCluster }'  					{ SniffSuccess' 9202 }'  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStaleClusterState,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStaleClusterState.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: audit = await audit.TraceCalls(  				new ClientCall {    					{ SniffOnStaleCluster }'  					{ SniffSuccess' 9202 }'  					{ HealthyResponse' 9200 }'  					{ pool => pool.Nodes.Count.Should().Be(10) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always))  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always))  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: await audit.TraceCall(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}  			 );
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: await audit.TraceCall(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}  			 );
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: await audit.TraceCall(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}  			 );
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: await audit.TraceCall(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}  			 );
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappens,The following statement contains a magic number: await audit.TraceCall(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}  			 );
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always))  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always))  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: await audit.TraceCalls(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}'  				new ClientCall  				{  					{ PingSuccess' 9201}'  					{ HealthyResponse' 9201}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: await audit.TraceCalls(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}'  				new ClientCall  				{  					{ PingSuccess' 9201}'  					{ HealthyResponse' 9201}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: await audit.TraceCalls(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}'  				new ClientCall  				{  					{ PingSuccess' 9201}'  					{ HealthyResponse' 9201}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: await audit.TraceCalls(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}'  				new ClientCall  				{  					{ PingSuccess' 9201}'  					{ HealthyResponse' 9201}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: await audit.TraceCalls(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}'  				new ClientCall  				{  					{ PingSuccess' 9201}'  					{ HealthyResponse' 9201}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: await audit.TraceCalls(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}'  				new ClientCall  				{  					{ PingSuccess' 9201}'  					{ HealthyResponse' 9201}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,ASniffOnStartupHappensOnce,The following statement contains a magic number: await audit.TraceCalls(  				 new ClientCall  				 {  					{ SniffOnStartup}'  					{ SniffFailure' 9200}'  					{ SniffFailure' 9201}'  					{ SniffSuccess' 9202}'  					{ PingSuccess ' 9200}'  					{ HealthyResponse' 9200}  				}'  				new ClientCall  				{  					{ PingSuccess' 9201}'  					{ HealthyResponse' 9201}  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always' VirtualClusterWith.Nodes(8' startFrom: 9204))) // <1> Sniffing returns 8 nodes' starting from 9204  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always' VirtualClusterWith.Nodes(8' startFrom: 9204))) // <1> Sniffing returns 8 nodes' starting from 9204  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always' VirtualClusterWith.Nodes(8' startFrom: 9204))) // <1> Sniffing returns 8 nodes' starting from 9204  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always' VirtualClusterWith.Nodes(8' startFrom: 9204))) // <1> Sniffing returns 8 nodes' starting from 9204  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9204}' // <2> After successfully sniffing' the ping now happens on 9204  				{ HealthyResponse' 9204}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9204}' // <2> After successfully sniffing' the ping now happens on 9204  				{ HealthyResponse' 9204}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9204}' // <2> After successfully sniffing' the ping now happens on 9204  				{ HealthyResponse' 9204}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9204}' // <2> After successfully sniffing' the ping now happens on 9204  				{ HealthyResponse' 9204}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffOnStartUpTakesNewClusterState,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9204}' // <2> After successfully sniffing' the ping now happens on 9204  				{ HealthyResponse' 9204}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9209).Succeeds(Always))  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9209).Succeeds(Always))  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffTriesAllNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffFailure' 9202}'  				{ SniffFailure' 9203}'  				{ SniffFailure' 9204}'  				{ SniffFailure' 9205}'  				{ SniffFailure' 9206}'  				{ SniffFailure' 9207}'  				{ SniffFailure' 9208}'  				{ SniffSuccess' 9209}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodes,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodesButStillFailsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(new[] {  					new Node(new Uri("http://localhost:9200")) { MasterEligible = true }'  					new Node(new Uri("http://localhost:9201")) { MasterEligible = true }'  					new Node(new Uri("http://localhost:9202")) { MasterEligible = false }'  				})  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202).Succeeds(Always))  				.SniffingConnectionPool()  				.AllDefaults()  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodesButStillFailsOver,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodesButStillFailsOver,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodesButStillFailsOver,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodesButStillFailsOver,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,OnStartupSniffing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\OnStartup.doc.cs,SniffPrefersMasterNodesButStillFailsOver,The following statement contains a magic number: await audit.TraceCall(new ClientCall {  				{ SniffOnStartup}'  				{ SniffFailure' 9200}'  				{ SniffFailure' 9201}'  				{ SniffSuccess' 9202}'  				{ PingSuccess' 9200}'  				{ HealthyResponse' 9200}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsMasterNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).MasterEligible(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(10);  				}'  				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.MasterEligible).Should().HaveCount(3);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsDataNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.Fails(Always))  				.Sniff(s => s.OnPort(9202)  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipsNodesThatDisableHttp,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith.Nodes(8).StoresNoData(9200' 9201' 9202).HttpDisabled(9201))  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Where(n => n.HttpEnabled).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = (pool) =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(7' "we filtered the node that has no http enabled");  					pool.Nodes.Should().NotContain(n=>n.Uri.Port == 9201);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: var masterNodes = new[] {9200' 9201' 9202};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: var masterNodes = new[] {9200' 9201' 9202};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: var masterNodes = new[] {9200' 9201' 9202};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: var totalNodesInTheCluster = 20;
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.MasterOnlyNodes(masterNodes.Length)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(totalNodesInTheCluster)  						.StoresNoData(masterNodes)  						.MasterEligible(masterNodes))  				)  				.SniffingConnectionPool()  				.Settings(s=>s.DisablePing())  			)  			{  				AssertPoolBeforeStartup = pool => // <1> Before the sniff' assert we only see three master only nodes  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(3' "we seeded 3 master only nodes at the start of the application");  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(0' "none of which hold data");  				}'  				AssertPoolAfterStartup = (pool) => // <2> After the sniff' assert we now know about the existence of 20 nodes.  				{  					pool.Should().NotBeNull();  					var nodes = pool.CreateView().ToList();  					nodes.Count().Should().Be(20' "Master nodes are included in the registration of nodes since we still favor sniffing on them");  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.MasterOnlyNodes(masterNodes.Length)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(totalNodesInTheCluster)  						.StoresNoData(masterNodes)  						.MasterEligible(masterNodes))  				)  				.SniffingConnectionPool()  				.Settings(s=>s.DisablePing())  			)  			{  				AssertPoolBeforeStartup = pool => // <1> Before the sniff' assert we only see three master only nodes  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(3' "we seeded 3 master only nodes at the start of the application");  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(0' "none of which hold data");  				}'  				AssertPoolAfterStartup = (pool) => // <2> After the sniff' assert we now know about the existence of 20 nodes.  				{  					pool.Should().NotBeNull();  					var nodes = pool.CreateView().ToList();  					nodes.Count().Should().Be(20' "Master nodes are included in the registration of nodes since we still favor sniffing on them");  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: audit = await audit.TraceStartup(new ClientCall  			{  				{ SniffSuccess' 9200}'  				{ HealthyResponse' 9203} // <1> Healthy response from 9203' not a master eligible node  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: audit = await audit.TraceStartup(new ClientCall  			{  				{ SniffSuccess' 9200}'  				{ HealthyResponse' 9203} // <1> Healthy response from 9203' not a master eligible node  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,SkipMasterOnlyNodes,The following statement contains a magic number: Enumerable.Range(0' 1000)
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: var totalNodesInTheCluster = 20;
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: var nodesInRackOne = new[] {9204' 9210' 9213};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: var nodesInRackOne = new[] {9204' 9210' 9213};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: var nodesInRackOne = new[] {9204' 9210' 9213};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(totalNodesInTheCluster)  				//  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(totalNodesInTheCluster)  						.HasSetting(setting' value' nodesInRackOne))  				)  				.SniffingConnectionPool()  				.Settings(s=>s  					.DisablePing() // <1> for testing simplicity' disable pings  					.NodePredicate(node => // <2> We only want to execute API calls to nodes in rack_one  						node.Settings.ContainsKey(setting) &&  						node.Settings[setting].ToString() == value  					)  				)  			)  			{  				AssertPoolAfterStartup = pool => // <3> After sniffing on startup' assert that the pool of nodes that the client will execute API calls against only contains the three nodes that are in `rack_one`  				{  					pool.Should().NotBeNull();  					var nodes = pool.CreateView().ToList();  					nodes.Count(n => n.Settings.ContainsKey(setting)).Should().Be(3' "only three nodes are in rack_one");  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: audit = await audit.TraceStartup(new ClientCall  			{  				{ SniffSuccess' 9200}'  				{ HealthyResponse' 9204}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: audit = await audit.TraceStartup(new ClientCall  			{  				{ SniffSuccess' 9200}'  				{ HealthyResponse' 9204}  			});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,RespectsCustomPredicate,The following statement contains a magic number: Enumerable.Range(0' 1000)
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,CustomPredicateYieldingNothingThrows,The following statement contains a magic number: var totalNodesInTheCluster = 20;
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,DetectsFqdn,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(10)  				.Sniff(s => s.SucceedAlways()  					.Succeeds(Always' VirtualClusterWith  						.Nodes(8)  						.StoresNoData(9200' 9201' 9202)  						.SniffShouldReturnFqdn())  				)  				.SniffingConnectionPool()  				.AllDefaults()  			)  			{  				AssertPoolBeforeStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(10);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host == "localhost");  				}'    				AssertPoolAfterStartup = pool =>  				{  					pool.Should().NotBeNull();  					pool.Nodes.Should().HaveCount(8);  					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);  					pool.Nodes.Should().OnlyContain(n => n.Uri.Host.StartsWith("fqdn") && !n.Uri.Host.Contains("/"));  				}  			};
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sniffing,RealWorldRoleDetection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sniffing\RoleDetection.doc.cs,CreatePipeline,The following statement contains a magic number: var uri = TestConnectionSettings.CreateUri(this._cluster.Nodes.First().Port ?? 9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewDoesNotSkip,The following statement contains a magic number: var seeds = Enumerable.Range(9200' NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewDoesNotSkip,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewDoesNotSkip,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewDoesNotSkip,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewDoesNotSkip,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: var seeds = Enumerable.Range(9200' NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: node.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,EachViewSeesNextButSkipsTheDeadNode,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: var seeds = Enumerable.Range(9200' NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: node.Uri.Port.Should().Be(9201);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: i < 20
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: dateTimeProvider.ChangeTime(d => d.AddDays(2));
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: n.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: n.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,ViewSeesResurrectedNodes,The following statement contains a magic number: n.Uri.Port.Should().Be(9200);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Succeeds(Always))  				.ClientCalls(p => p.OnPort(9200).FailAlways())  				.ClientCalls(p => p.OnPort(9201).FailAlways())  				.StickyConnectionPool()  				.Settings(p => p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Succeeds(Always))  				.ClientCalls(p => p.OnPort(9200).FailAlways())  				.ClientCalls(p => p.OnPort(9201).FailAlways())  				.StickyConnectionPool()  				.Settings(p => p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Succeeds(Always))  				.ClientCalls(p => p.OnPort(9200).FailAlways())  				.ClientCalls(p => p.OnPort(9201).FailAlways())  				.StickyConnectionPool()  				.Settings(p => p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,FallsOverDeadNodes,The following statement contains a magic number: await audit.TraceCalls(  				/** The first call goes to 9200 which succeeds */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				/** The 2nd call does a ping on 9201 because its used for the first time.  				* It fails so we wrap over to node 9202 */  				new ClientCall {  					{ HealthyResponse' 9202}'  					/** Finally we assert that the connectionpool has one node that is marked as dead */  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}'  				new ClientCall {  					{ HealthyResponse' 9202}'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Fails(Always))  				.StickyConnectionPool()  				.Settings(p => p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,SkipDeadNodes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\SkipDeadNodes.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,Sticky,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\Sticky.doc.cs,EachViewStartsAtNextPositionAndWrapsOver,The following statement contains a magic number: var numberOfNodes = 10;
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,Sticky,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\Sticky.doc.cs,EachViewStartsAtNextPositionAndWrapsOver,The following statement contains a magic number: var uris = Enumerable.Range(9200' numberOfNodes).Select(p => new Uri("http://localhost:" + p));
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,Sticky,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\Sticky.doc.cs,EachViewStartsAtNextPositionAndWrapsOver,The following statement contains a magic number: var expectedOrder = Enumerable.Repeat(9200' numberOfNodes);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,EachViewStartsAtNextPositionAndWrapsOver,The following statement contains a magic number: var numberOfNodes = 10;
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,EachViewStartsAtNextPositionAndWrapsOver,The following statement contains a magic number: var uris = Enumerable.Range(9200' numberOfNodes).Select(p => new Uri("http://localhost:" + p));
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,EachViewStartsAtNextPositionAndWrapsOver,The following statement contains a magic number: var expectedOrder = Enumerable.Repeat(9200' numberOfNodes);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: IEnumerable<Node> Nodes(int start) => Enumerable.Range(start' 4)  				.Select(i => new Uri($"http://localhost:{9200 + i}"))  				.Select((u' i) => new Node(u)  				{  					Settings = new Dictionary<string' object> {{"rack"' $"rack_{u.Port - 9200}"}}  				});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: IEnumerable<Node> Nodes(int start) => Enumerable.Range(start' 4)  				.Select(i => new Uri($"http://localhost:{9200 + i}"))  				.Select((u' i) => new Node(u)  				{  					Settings = new Dictionary<string' object> {{"rack"' $"rack_{u.Port - 9200}"}}  				});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: IEnumerable<Node> Nodes(int start) => Enumerable.Range(start' 4)  				.Select(i => new Uri($"http://localhost:{9200 + i}"))  				.Select((u' i) => new Node(u)  				{  					Settings = new Dictionary<string' object> {{"rack"' $"rack_{u.Port - 9200}"}}  				});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(Nodes(0))  				.ClientCalls(p => p.OnPort(9202).Succeeds(Twice).ThrowsAfterSucceeds())  				.ClientCalls(p => p.FailAlways())  				.Sniff(s=>s.SucceedAlways(VirtualClusterWith  					.Nodes(Nodes(10))  					.ClientCalls(p => p.SucceedAlways()))  				)  				.StickySniffingConnectionPool(n=>  					(n.Settings.TryGetValue("rack"' out var v) && v.ToString() == "rack_2" ? 10 : 0)  					+(n.Settings.TryGetValue("rack"' out var r) && r.ToString() == "rack_11" ? 10 : 0)  				)  				.Settings(p => p.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(Nodes(0))  				.ClientCalls(p => p.OnPort(9202).Succeeds(Twice).ThrowsAfterSucceeds())  				.ClientCalls(p => p.FailAlways())  				.Sniff(s=>s.SucceedAlways(VirtualClusterWith  					.Nodes(Nodes(10))  					.ClientCalls(p => p.SucceedAlways()))  				)  				.StickySniffingConnectionPool(n=>  					(n.Settings.TryGetValue("rack"' out var v) && v.ToString() == "rack_2" ? 10 : 0)  					+(n.Settings.TryGetValue("rack"' out var r) && r.ToString() == "rack_11" ? 10 : 0)  				)  				.Settings(p => p.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(Nodes(0))  				.ClientCalls(p => p.OnPort(9202).Succeeds(Twice).ThrowsAfterSucceeds())  				.ClientCalls(p => p.FailAlways())  				.Sniff(s=>s.SucceedAlways(VirtualClusterWith  					.Nodes(Nodes(10))  					.ClientCalls(p => p.SucceedAlways()))  				)  				.StickySniffingConnectionPool(n=>  					(n.Settings.TryGetValue("rack"' out var v) && v.ToString() == "rack_2" ? 10 : 0)  					+(n.Settings.TryGetValue("rack"' out var r) && r.ToString() == "rack_11" ? 10 : 0)  				)  				.Settings(p => p.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(Nodes(0))  				.ClientCalls(p => p.OnPort(9202).Succeeds(Twice).ThrowsAfterSucceeds())  				.ClientCalls(p => p.FailAlways())  				.Sniff(s=>s.SucceedAlways(VirtualClusterWith  					.Nodes(Nodes(10))  					.ClientCalls(p => p.SucceedAlways()))  				)  				.StickySniffingConnectionPool(n=>  					(n.Settings.TryGetValue("rack"' out var v) && v.ToString() == "rack_2" ? 10 : 0)  					+(n.Settings.TryGetValue("rack"' out var r) && r.ToString() == "rack_11" ? 10 : 0)  				)  				.Settings(p => p.DisablePing().SniffOnStartup(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,FavorsNodeWithGreatestWeightAndFallsOver,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall {  					{ BadResponse' 9202 }'  					{ SniffOnFail }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9211}'  				}'  				/** Now we are sticky on 9211 onwards */  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }'  				new ClientCall { { HealthyResponse' 9211 } }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: IEnumerable<Node> Nodes(int start) => Enumerable.Range(start' 4)  				.Select(i => new Uri($"http://localhost:{9200 + i}"))  				.Select((u' i) => new Node(u)  				{  					Settings = new Dictionary<string' object> {{"rack"' $"rack_{u.Port - 9200}"}}  				});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: IEnumerable<Node> Nodes(int start) => Enumerable.Range(start' 4)  				.Select(i => new Uri($"http://localhost:{9200 + i}"))  				.Select((u' i) => new Node(u)  				{  					Settings = new Dictionary<string' object> {{"rack"' $"rack_{u.Port - 9200}"}}  				});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: IEnumerable<Node> Nodes(int start) => Enumerable.Range(start' 4)  				.Select(i => new Uri($"http://localhost:{9200 + i}"))  				.Select((u' i) => new Node(u)  				{  					Settings = new Dictionary<string' object> {{"rack"' $"rack_{u.Port - 9200}"}}  				});
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.SucceedAlways())  				.Sniff(s=>s.SucceedAlways(VirtualClusterWith  					.Nodes(Nodes(0))  					.ClientCalls(p => p.SucceedAlways()))  				)  				.StickySniffingConnectionPool(n=>  					(n.Settings.TryGetValue("rack"' out var v) && v.ToString() == "rack_2" ? 10 : 0)  				)  				.Settings(p => p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.SucceedAlways())  				.Sniff(s=>s.SucceedAlways(VirtualClusterWith  					.Nodes(Nodes(0))  					.ClientCalls(p => p.SucceedAlways()))  				)  				.StickySniffingConnectionPool(n=>  					(n.Settings.TryGetValue("rack"' out var v) && v.ToString() == "rack_2" ? 10 : 0)  				)  				.Settings(p => p.DisablePing())  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,SniffOnStartupReseedsPutsMostWeightedNodeToFront,The following statement contains a magic number: await audit.TraceCalls(  				new ClientCall  				{  					{ SniffOnStartup }'  					{ SniffSuccess' 9200 }'  					{ HealthyResponse' 9202}'  				}'  				/** We are sticky on 9202 for as long as it keeps returning valid responses */  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }'  				new ClientCall { { HealthyResponse' 9202} }  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: var audit = new Auditor(() => VirtualClusterWith  				.Nodes(4)  				.ClientCalls(p => p.Fails(Always))  				.StickySniffingConnectionPool()  				.Settings(p => p.DisablePing().SniffOnStartup(false).SniffOnConnectionFault(false))  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.ConnectionPooling.Sticky,StickySniffingConnectionPool,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ConnectionPooling\Sticky\StickySniffingConnectionPool.doc.cs,PicksADifferentNodeEachTimeAnodeIsDown,The following statement contains a magic number: await audit.TraceCalls(  				/** All the calls fail */  				new ClientCall {  					{ BadResponse' 9200}'  					{ BadResponse' 9201}'  					{ BadResponse' 9202}'  					{ BadResponse' 9203}'  					{ MaxRetriesReached }'  					{ FailedOverAllNodes }'  					{ pool => pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				/** After all our registered nodes are marked dead we want to sample a single dead node  				* each time to quickly see if the cluster is back up. We do not want to retry all 4  				* nodes  				*/  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9200}'  					{ BadResponse' 9200}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9201}'  					{ BadResponse' 9201}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9202}'  					{ BadResponse' 9202}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}'  				new ClientCall {  					{ AllNodesDead }'  					{ Resurrection' 9203}'  					{ BadResponse' 9203}'  					{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(4) }  				}  			);
Magic Number,Tests.ClientConcepts.Connection,ConfigurationOptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ConfigurationOptions.doc.cs,AvailableOptions,The following statement contains a magic number: var connectionConfiguration = new ConnectionConfiguration()  				.DisableAutomaticProxyDetection()  				.EnableHttpCompression()  				.DisableDirectStreaming()  				.PrettyJson()  				.RequestTimeout(TimeSpan.FromMinutes(2));
Magic Number,Tests.ClientConcepts.Connection,ConfigurationOptions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ConfigurationOptions.doc.cs,AvailableOptions,The following statement contains a magic number: var connectionSettings = new ConnectionSettings()  				.DefaultMappingFor<Project>(i => i  					.IndexName("my-projects")  					.IdProperty(p => p.Name)  				)  				.EnableDebugMode()  				.PrettyJson()  				.RequestTimeout(TimeSpan.FromMinutes(2));
Magic Number,Tests.ClientConcepts.Connection,HttpWebRequestConnectionTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\HttpWebRequestConnectionTests.cs,CreateRequestData,The following statement contains a magic number: requestTimeout = TimeSpan.FromSeconds(10);
Magic Number,Tests.ClientConcepts.Connection,ModifyingTheDefaultConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,InMemoryConnectionOverloadedCtor,The following statement contains a magic number: var response = new  			{  				took = 1'  				timed_out = false'  				_shards = new  				{  					total = 2'  					successful = 2'  					failed = 0  				}'  				hits = new  				{  					total = new { value = 25 }'  					max_score = 1.0'  					hits = Enumerable.Range(1' 25).Select(i => (object)new  					{  						_index = "project"'  						_type = "project"'  						_id = $"Project {i}"'  						_score = 1.0'  						_source = new { name = $"Project {i}" }  					}).ToArray()  				}  			};
Magic Number,Tests.ClientConcepts.Connection,ModifyingTheDefaultConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,InMemoryConnectionOverloadedCtor,The following statement contains a magic number: var response = new  			{  				took = 1'  				timed_out = false'  				_shards = new  				{  					total = 2'  					successful = 2'  					failed = 0  				}'  				hits = new  				{  					total = new { value = 25 }'  					max_score = 1.0'  					hits = Enumerable.Range(1' 25).Select(i => (object)new  					{  						_index = "project"'  						_type = "project"'  						_id = $"Project {i}"'  						_score = 1.0'  						_source = new { name = $"Project {i}" }  					}).ToArray()  				}  			};
Magic Number,Tests.ClientConcepts.Connection,ModifyingTheDefaultConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,InMemoryConnectionOverloadedCtor,The following statement contains a magic number: var response = new  			{  				took = 1'  				timed_out = false'  				_shards = new  				{  					total = 2'  					successful = 2'  					failed = 0  				}'  				hits = new  				{  					total = new { value = 25 }'  					max_score = 1.0'  					hits = Enumerable.Range(1' 25).Select(i => (object)new  					{  						_index = "project"'  						_type = "project"'  						_id = $"Project {i}"'  						_score = 1.0'  						_source = new { name = $"Project {i}" }  					}).ToArray()  				}  			};
Magic Number,Tests.ClientConcepts.Connection,ModifyingTheDefaultConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,InMemoryConnectionOverloadedCtor,The following statement contains a magic number: var response = new  			{  				took = 1'  				timed_out = false'  				_shards = new  				{  					total = 2'  					successful = 2'  					failed = 0  				}'  				hits = new  				{  					total = new { value = 25 }'  					max_score = 1.0'  					hits = Enumerable.Range(1' 25).Select(i => (object)new  					{  						_index = "project"'  						_type = "project"'  						_id = $"Project {i}"'  						_score = 1.0'  						_source = new { name = $"Project {i}" }  					}).ToArray()  				}  			};
Magic Number,Tests.ClientConcepts.Connection,ModifyingTheDefaultConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,InMemoryConnectionOverloadedCtor,The following statement contains a magic number: var connection = new InMemoryConnection(responseBytes' 200);
Magic Number,Tests.ClientConcepts.Connection,ModifyingTheDefaultConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,InMemoryConnectionOverloadedCtor,The following statement contains a magic number: searchResponse.Documents.Count.Should().Be(25);
Magic Number,Tests.ClientConcepts.Connection,MyCustomHttpConnection,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\ModifyingDefaultConnection.doc.cs,AlterServicePoint,The following statement contains a magic number: requestServicePoint.ConnectionLimit = 10000;
Magic Number,Tests.ClientConcepts.Connection,SecureStringsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Connection\SecureStringsTests.cs,CreateStringMatchesOriginalString,The following statement contains a magic number: var count = 100;
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,StandardAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "is"'  						start_offset = 3'  						end_offset = 5'  						type = "<ALPHANUM>"'  						position = 1  					}'  					new  					{  						token = "the"'  						start_offset = 6'  						end_offset = 9'  						type = "<ALPHANUM>"'  						position = 2  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,TransientAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,TransientAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,TransientAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,TransientAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,TransientAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,TransientAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "f"'  						start_offset = 0'  						end_offset = 1'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: client.Cluster.Health("analysis-index"'h => h  				.WaitForStatus(WaitForStatus.Green)  				.Timeout(TimeSpan.FromSeconds(5))  			);
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Analysis,TestingAnalyzers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Analysis\TestingAnalyzers.doc.cs,CustomAnalyzer,The following statement contains a magic number: var expected = new  			{  				tokens = new object[]  				{  					new  					{  						token = "fsharp"'  						start_offset = 0'  						end_offset = 2'  						type = "<ALPHANUM>"'  						position = 0  					}'  					new  					{  						token = "superior"'  						start_offset = 10'  						end_offset = 18'  						type = "<ALPHANUM>"'  						position = 3  					}'  					new  					{  						token = "great"'  						start_offset = 10'  						end_offset = 18'  						type = "SYNONYM"'  						position = 3  					}'  					new  					{  						token = "language"'  						start_offset = 19'  						end_offset = 27'  						type = "<ALPHANUM>"'  						position = 4  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,Expression,The following statement contains a magic number: resolver.Resolve(Field<Project>(p => p.Name' 1.1));
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,ExpressionWithDifferentParameters,The following statement contains a magic number: resolver.Resolve(Field<Project>(e => e.Name' 1.1));
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,ExpressionWithSuffix,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,ExpressionWithSuffix,The following statement contains a magic number: resolver.Resolve(Field<Project>(p => p.Name.Suffix("raw")' 1.1));
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,ExpressionWithSuffix,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,ExpressionWithConstantSuffix,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,ExpressionWithDictionaryItemConstantExpression,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,ExpressionWithDictionaryItemConstantExpressionAndConstantSuffix,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,EquivalentExpressionsOnDifferentTypes,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,EquivalentPropertiesOnDifferentTypes,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,SamePropertyTypesOnDifferentTypes,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,Fields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,SamePropertyTypesWithDifferentNames,The following statement contains a magic number: resolver.CachedFields.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,PropertyNames,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,EquivalentExpressionsOnDifferentTypes,The following statement contains a magic number: resolver.CachedProperties.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,PropertyNames,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,EquivalentPropertiesOnDifferentTypes,The following statement contains a magic number: resolver.CachedProperties.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,PropertyNames,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,SamePropertyTypesOnDifferentTypes,The following statement contains a magic number: resolver.CachedProperties.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Caching,PropertyNames,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Caching\FieldResolverCacheTests.cs,SamePropertyTypesWithDifferentNames,The following statement contains a magic number: resolver.CachedProperties.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.CovariantHits,CovariantSearchResults,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\CovariantHits\CovariantSearchResults.doc.cs,CanDeserializeHits,The following statement contains a magic number: var result = this._client.Search<C>(s => s  				.Size(100)  			);
Magic Number,Tests.ClientConcepts.HighLevel.CovariantHits,CovariantSearchResults,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\CovariantHits\CovariantSearchResults.doc.cs,CanDeserializeHits,The following statement contains a magic number: result.HitsMetadata.Total.Value.Should().Be(100);
Magic Number,Tests.ClientConcepts.HighLevel.CovariantHits,CovariantSearchResults,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\CovariantHits\CovariantSearchResults.doc.cs,CanDeserializeHits,The following statement contains a magic number: result.Documents.Count.Should().Be(100);
Magic Number,Tests.ClientConcepts.HighLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\GettingStarted.doc.cs,Searching,The following statement contains a magic number: var searchResponse = client.Search<Person>(s => s  				.From(0)  				.Size(10)  				.Query(q => q  					 .Match(m => m  						.Field(f => f.FirstName)  						.Query("Martijn")  					 )  				)  			);
Magic Number,Tests.ClientConcepts.HighLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\GettingStarted.doc.cs,SearchingAllIndices,The following statement contains a magic number: var searchResponse = client.Search<Person>(s => s  				.AllIndices()  				.From(0)  				.Size(10)  				.Query(q => q  					 .Match(m => m  						.Field(f => f.FirstName)  						.Query("Martijn")  					 )  				)  			);
Magic Number,Tests.ClientConcepts.HighLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\GettingStarted.doc.cs,SearchingAllIndicesAndAllTypes,The following statement contains a magic number: var searchResponse = await client.SearchAsync<Person>(s => s  				.AllIndices()  				.From(0)  				.Size(10)  				.Query(q => q  					 .Match(m => m  						.Field(f => f.FirstName)  						.Query("Martijn")  					 )  				)  			);
Magic Number,Tests.ClientConcepts.HighLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\GettingStarted.doc.cs,ObjectInitializerSyntax,The following statement contains a magic number: var searchRequest = new SearchRequest<Person>(Nest.Indices.All) //<1> All indices and types are specified in the constructor  			{  				From = 0'  				Size = 10'  				Query = new MatchQuery  				{  					Field = Infer.Field<Person>(f => f.FirstName)'  					Query = "Martijn"  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\GettingStarted.doc.cs,SearchingWithTheLowLevelClient,The following statement contains a magic number: var searchResponse = client.LowLevel.Search<SearchResponse<Person>>("people"' PostData.Serializable(new  			{  				from = 0'  				size = 10'  				query = new  				{  					match = new  					{  						field = "firstName"'  						query = "Martijn"  					}  				}  			}));
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,IndexManyDocuments,The following statement contains a magic number: var people = new []  			{  				new Person  				{  					Id = 1'  					FirstName = "Martijn"'  					LastName = "Laarman"  				}'  				new Person  				{  					Id = 2'  					FirstName = "Stuart"'  					LastName = "Cam"  				}'  				new Person  				{  					Id = 3'  					FirstName = "Russ"'  					LastName = "Cam"  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,IndexManyDocuments,The following statement contains a magic number: var people = new []  			{  				new Person  				{  					Id = 1'  					FirstName = "Martijn"'  					LastName = "Laarman"  				}'  				new Person  				{  					Id = 2'  					FirstName = "Stuart"'  					LastName = "Cam"  				}'  				new Person  				{  					Id = 3'  					FirstName = "Russ"'  					LastName = "Cam"  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,BulkDocumentsWithObservableHelper,The following statement contains a magic number: var people = new []  			{  				new Person  				{  					Id = 1'  					FirstName = "Martijn"'  					LastName = "Laarman"  				}'  				new Person  				{  					Id = 2'  					FirstName = "Stuart"'  					LastName = "Cam"  				}'  				new Person  				{  					Id = 3'  					FirstName = "Russ"'  					LastName = "Cam"  				}  				// snip  			};
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,BulkDocumentsWithObservableHelper,The following statement contains a magic number: var people = new []  			{  				new Person  				{  					Id = 1'  					FirstName = "Martijn"'  					LastName = "Laarman"  				}'  				new Person  				{  					Id = 2'  					FirstName = "Stuart"'  					LastName = "Cam"  				}'  				new Person  				{  					Id = 3'  					FirstName = "Russ"'  					LastName = "Cam"  				}  				// snip  			};
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,BulkDocumentsWithObservableHelper,The following statement contains a magic number: var bulkAllObservable = client.BulkAll(people' b => b  				.Index("people")  				.BackOffTime("30s") //<1> how long to wait between retries  				.BackOffRetries(2) //<2> how many retries are attempted if a failure occurs  				.RefreshOnCompleted()  				.MaxDegreeOfParallelism(Environment.ProcessorCount)  				.Size(1000) // <3> items per bulk request  			)  			.Wait(TimeSpan.FromMinutes(15)' next => //<4> perform the indexing and wait up to 15 minutes' whilst the BulkAll calls are asynchronous this is a blocking operation  			{  				// do something e.g. write number of pages to console  			});
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,BulkDocumentsWithObservableHelper,The following statement contains a magic number: var bulkAllObservable = client.BulkAll(people' b => b  				.Index("people")  				.BackOffTime("30s") //<1> how long to wait between retries  				.BackOffRetries(2) //<2> how many retries are attempted if a failure occurs  				.RefreshOnCompleted()  				.MaxDegreeOfParallelism(Environment.ProcessorCount)  				.Size(1000) // <3> items per bulk request  			)  			.Wait(TimeSpan.FromMinutes(15)' next => //<4> perform the indexing and wait up to 15 minutes' whilst the BulkAll calls are asynchronous this is a blocking operation  			{  				// do something e.g. write number of pages to console  			});
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,BulkDocumentsWithObservableHelper,The following statement contains a magic number: var bulkAllObservable = client.BulkAll(people' b => b  				.Index("people")  				.BackOffTime("30s") //<1> how long to wait between retries  				.BackOffRetries(2) //<2> how many retries are attempted if a failure occurs  				.RefreshOnCompleted()  				.MaxDegreeOfParallelism(Environment.ProcessorCount)  				.Size(1000) // <3> items per bulk request  			)  			.Wait(TimeSpan.FromMinutes(15)' next => //<4> perform the indexing and wait up to 15 minutes' whilst the BulkAll calls are asynchronous this is a blocking operation  			{  				// do something e.g. write number of pages to console  			});
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,Indexing,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\IndexingDocuments.doc.cs,AdvancedBulkIndexing,The following statement contains a magic number: client.BulkAll(people' b => b  				  .BufferToBulk((descriptor' list) => //<1> customise the individual operations in the bulk request before it is dispatched  				  {  					  foreach (var item in list)  					  {  						  descriptor.Index<Person>(bi => bi  							  .Index(item.Id % 2 == 0 ? "even-index" : "odd-index") //<2> Index each document into either even-index or odd-index  							  .Document(item)  						  );  					  }  				  })  				  .RetryDocumentPredicate((item' person) => //<3> decide if a document should be retried in the event of a failure  				  {  					  return item.Error.Index == "even-index" && person.FirstName == "Martijn";  				  })  				  .DroppedDocumentCallback((item' person) => //<4> if a document cannot be indexed this delegate is called  				  {  					  Console.WriteLine($"Unable to index: {item} {person}");  				  }));
Magic Number,Tests.ClientConcepts.HighLevel.Indexing,IngestPipelines,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Indexing\Pipelines.doc.cs,IncreasingTimeouts,The following statement contains a magic number: client.Bulk(b => b  				.Index("people")  				.Pipeline("person-pipeline")  				.Timeout("5m") //<1> increases the server-side bulk timeout  				.Index<Person>(/*snip*/)  				.Index<Person>(/*snip*/)  				.Index<Person>(/*snip*/)  				.RequestConfiguration(rc => rc  				    .RequestTimeout(TimeSpan.FromMinutes(5)) //<2> increases the HTTP request timeout  				)  			);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,DocumentPaths,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\DocumentPaths.doc.cs,UsingWithRequests,The following statement contains a magic number: var request = new IndexRequest<Project>(2) { Document = project };
Magic Number,Tests.ClientConcepts.HighLevel.Inference,DocumentPaths,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\DocumentPaths.doc.cs,UsingWithRequests,The following statement contains a magic number: request = new IndexRequest<Project>(IndexName.From<Project>()' 2)  			{  				Document = project  			};
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,NameCanSpecifyBoost,The following statement contains a magic number: var fieldStringCreate = new Field("name^2"' 3);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,NameCanSpecifyBoost,The following statement contains a magic number: fieldString.Boost.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,NameCanSpecifyBoost,The following statement contains a magic number: fieldStringConstructor.Boost.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,NameCanSpecifyBoost,The following statement contains a magic number: fieldStringCreate.Boost.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,UsingStaticPropertyField,The following statement contains a magic number: fieldString.Boost.Should().Be(2.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,UsingStaticPropertyField,The following statement contains a magic number: fieldExpression = Field<Project>(p => p.Name' 2.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,UsingStaticPropertyField,The following statement contains a magic number: fieldExpression.Boost.Should().Be(2.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,AppendingSuffixToExpressions,The following statement contains a magic number: Expect("curatedTags.name.raw").WhenSerializing(fieldExpressions[2]);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,AppendingSuffixToExpressions,The following statement contains a magic number: Expect("leadDeveloper.firstName.raw").WhenSerializing(fieldExpressions[3]);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,AppendingSuffixToExpressions,The following statement contains a magic number: Expect("metadata.hardcoded.raw").WhenSerializing(fieldExpressions[4]);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,AppendingSuffixToExpressions,The following statement contains a magic number: Expect("curatedTags.name.raw.evendeeper").WhenSerializing(multiSuffixFieldExpressions[2]);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,AppendingSuffixToExpressions,The following statement contains a magic number: Expect("leadDeveloper.firstName.raw.evendeeper").WhenSerializing(multiSuffixFieldExpressions[3]);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,AppendingSuffixToExpressions,The following statement contains a magic number: Expect("metadata.hardcoded.raw.evendeeper").WhenSerializing(multiSuffixFieldExpressions[4]);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,FieldInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\FieldInference.doc.cs,OnlyMemberExpressionAllowed,The following statement contains a magic number: var fieldExpression = Field<Project>(p => p.Name + 2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,IdsInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IdsInference.doc.cs,CanImplicitlyConvertToId,The following statement contains a magic number: Id idFromLong = 2L;
Magic Number,Tests.ClientConcepts.HighLevel.Inference,IdsInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IdsInference.doc.cs,CanImplicitlyConvertToId,The following statement contains a magic number: Expect(2).WhenSerializing(idFromLong);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,IndicesPaths,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IndicesPaths.doc.cs,ImplicitConversions,The following statement contains a magic number: multipleIndicesFromString.Match(  				all => all.Should().BeNull()'  				many => many.Indices.Should().HaveCount(2).And.Contain("name2")  			);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,IndicesPaths,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\IndicesPaths.doc.cs,ImplicitConversions,The following statement contains a magic number: multipleIndicesFromStringArray.Match(  				all => all.Should().BeNull()'  				many => many.Indices.Should().HaveCount(2).And.Contain("name2")  			);
Magic Number,Tests.ClientConcepts.HighLevel.Inference,RoutingInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\RoutingInference.doc.cs,CanImplicitlyConvertToRouting,The following statement contains a magic number: Routing routingFromLong = 2L;
Magic Number,Tests.ClientConcepts.HighLevel.Inference,RoutingInference,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\RoutingInference.doc.cs,CanImplicitlyConvertToRouting,The following statement contains a magic number: Expect(2).WhenSerializing(routingFromLong);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,DocumentPathEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\DocumentPathEqualityTests.cs,Eq,The following statement contains a magic number: path = new DocumentPath<Project>(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,DocumentPathEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\DocumentPathEqualityTests.cs,Eq,The following statement contains a magic number: pathOther = new DocumentPath<Project>(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,DocumentPathEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\DocumentPathEqualityTests.cs,NotEq,The following statement contains a magic number: path = new DocumentPath<Project>(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,DocumentPathEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\DocumentPathEqualityTests.cs,NotEq,The following statement contains a magic number: pathOther = new DocumentPath<Project>(2).Index("x");
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,DocumentPathEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\DocumentPathEqualityTests.cs,Null,The following statement contains a magic number: var value = new DocumentPath<Project>(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,FieldsEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\FieldsEqualityTests.cs,TypedEq,The following statement contains a magic number: t1 = Infer.Field<Project>(p => p.Name' 1.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,FieldsEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\FieldsEqualityTests.cs,TypedEq,The following statement contains a magic number: t2 = Infer.Field<Project>(p => p.Name' 1.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,FieldsEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\FieldsEqualityTests.cs,TypedEq,The following statement contains a magic number: t1 = Infer.Field<Project>(p => p.Name' 2.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,FieldsEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\FieldsEqualityTests.cs,TypedEq,The following statement contains a magic number: t2 = Infer.Field<Project>(p => p.Name' 1.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,FieldsEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\FieldsEqualityTests.cs,TypedEq,The following statement contains a magic number: t2 = Infer.Field<Project>(p => p.Name' 1.1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,Eq,The following statement contains a magic number: Id l1 = 2' l2 = 2;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,Eq,The following statement contains a magic number: Id l1 = 2' l2 = 2;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,Eq,The following statement contains a magic number: (l1 == 2).ShouldBeTrue(l1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,Eq,The following statement contains a magic number: l1.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,NotEq,The following statement contains a magic number: Id l1 = 2' l2 = 3;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,NotEq,The following statement contains a magic number: Id l1 = 2' l2 = 3;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,NotEq,The following statement contains a magic number: (l1 != 3).ShouldBeTrue(l1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,IdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\IdEqualityTests.cs,NotEq,The following statement contains a magic number: l1.Should().NotBe(3);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Eq,The following statement contains a magic number: LongId types = 2;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Eq,The following statement contains a magic number: LongId[] equal = { 2L' 2 };
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Eq,The following statement contains a magic number: LongId[] equal = { 2L' 2 };
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Eq,The following statement contains a magic number: LongId l1 = 2' l2 = 2;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Eq,The following statement contains a magic number: LongId l1 = 2' l2 = 2;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Eq,The following statement contains a magic number: (l1 == 2).ShouldBeTrue(l1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Eq,The following statement contains a magic number: l1.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,NotEq,The following statement contains a magic number: LongId types = 3;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,NotEq,The following statement contains a magic number: LongId[] notEqual = { 4L' 4 };
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,NotEq,The following statement contains a magic number: LongId[] notEqual = { 4L' 4 };
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,NotEq,The following statement contains a magic number: LongId l1 = 2' l2 = 3;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,NotEq,The following statement contains a magic number: LongId l1 = 2' l2 = 3;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,NotEq,The following statement contains a magic number: (l1 != 3).ShouldBeTrue(l1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,NotEq,The following statement contains a magic number: l1.Should().NotBe(3);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,LongIdEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\LongIdEqualityTests.cs,Null,The following statement contains a magic number: LongId c = 10;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,Eq,The following statement contains a magic number: Routing l1 = 2' l2 = 2;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,Eq,The following statement contains a magic number: Routing l1 = 2' l2 = 2;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,Eq,The following statement contains a magic number: (l1 == 2).ShouldBeTrue(l1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,Eq,The following statement contains a magic number: l1.Should().Be(2);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,NotEq,The following statement contains a magic number: Routing l1 = 2' l2 = 3;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,NotEq,The following statement contains a magic number: Routing l1 = 2' l2 = 3;
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,NotEq,The following statement contains a magic number: (l1 != 3).ShouldBeTrue(l1);
Magic Number,Tests.ClientConcepts.HighLevel.Inference.Equality,RoutingEqualityTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Inference\Equality\RoutingEqualityTests.cs,NotEq,The following statement contains a magic number: l1.Should().NotBe(3);
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,AutoMap,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\AutoMap.doc.cs,UsingAutoMap,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						birthday = new {type = "date"}'  						employees = new  						{  							properties = new  							{  								birthday = new {type = "date"}'  								employees = new  								{  									properties = new { }'  									type = "object"  								}'  								hours = new {type = "long"}'  								isManager = new {type = "boolean"}'  								join = new  								{  									properties = new { }'  									type = "object"  								}'  								lastName = new  								{  									fields = new  									{  										keyword = new  										{  											ignore_above = 256'  											type = "keyword"  										}  									}'  									type = "text"  								}'  								salary = new {type = "integer"}  							}'  							type = "object"  						}'  						hours = new {type = "long"}'  						isManager = new {type = "boolean"}'  						join = new  						{  							properties = new { }'  							type = "object"  						}'  						lastName = new  						{  							fields = new  							{  								keyword = new  								{  									ignore_above = 256'  									type = "keyword"  								}  							}'  							type = "text"  						}'  						name = new  						{  							fields = new  							{  								keyword = new  								{  									ignore_above = 256'  									type = "keyword"  								}  							}'  							type = "text"  						}'  						salary = new {type = "integer"}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,AutoMap,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\AutoMap.doc.cs,UsingAutoMap,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						birthday = new {type = "date"}'  						employees = new  						{  							properties = new  							{  								birthday = new {type = "date"}'  								employees = new  								{  									properties = new { }'  									type = "object"  								}'  								hours = new {type = "long"}'  								isManager = new {type = "boolean"}'  								join = new  								{  									properties = new { }'  									type = "object"  								}'  								lastName = new  								{  									fields = new  									{  										keyword = new  										{  											ignore_above = 256'  											type = "keyword"  										}  									}'  									type = "text"  								}'  								salary = new {type = "integer"}  							}'  							type = "object"  						}'  						hours = new {type = "long"}'  						isManager = new {type = "boolean"}'  						join = new  						{  							properties = new { }'  							type = "object"  						}'  						lastName = new  						{  							fields = new  							{  								keyword = new  								{  									ignore_above = 256'  									type = "keyword"  								}  							}'  							type = "text"  						}'  						name = new  						{  							fields = new  							{  								keyword = new  								{  									ignore_above = 256'  									type = "keyword"  								}  							}'  							type = "text"  						}'  						salary = new {type = "integer"}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,AutoMap,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\AutoMap.doc.cs,UsingAutoMap,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						birthday = new {type = "date"}'  						employees = new  						{  							properties = new  							{  								birthday = new {type = "date"}'  								employees = new  								{  									properties = new { }'  									type = "object"  								}'  								hours = new {type = "long"}'  								isManager = new {type = "boolean"}'  								join = new  								{  									properties = new { }'  									type = "object"  								}'  								lastName = new  								{  									fields = new  									{  										keyword = new  										{  											ignore_above = 256'  											type = "keyword"  										}  									}'  									type = "text"  								}'  								salary = new {type = "integer"}  							}'  							type = "object"  						}'  						hours = new {type = "long"}'  						isManager = new {type = "boolean"}'  						join = new  						{  							properties = new { }'  							type = "object"  						}'  						lastName = new  						{  							fields = new  							{  								keyword = new  								{  									ignore_above = 256'  									type = "keyword"  								}  							}'  							type = "text"  						}'  						name = new  						{  							fields = new  							{  								keyword = new  								{  									ignore_above = 256'  									type = "keyword"  								}  							}'  							type = "text"  						}'  						salary = new {type = "integer"}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,AutoMap,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\AutoMap.doc.cs,ControllingRecursionDepth,The following statement contains a magic number: createIndexResponse = _client.Indices.Create("myindex"' c => c  				.Map<A>(m => m.AutoMap(3))  			);
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,AutoMap,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\AutoMap.doc.cs,PutMappingAlsoAdheresToMaxRecursion,The following statement contains a magic number: var withMaxRecursionDescriptor = new PutMappingDescriptor<A>().AutoMap(3);
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,FluentMapping,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\FluentMapping.doc.cs,OverridingAutoMappedProperties,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						name = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}'  						employees = new  						{  							type = "nested"'  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,FluentMapping,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\FluentMapping.doc.cs,OverridingAutoMappedAttributes,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						employees = new  						{  							type = "nested"'  							properties = new  							{  								birthday = new  								{  									format = "MM-dd-yy"'  									type = "date"  								}'  								empl = new  								{  									properties = new  									{  										birthday = new  										{  											type = "date"  										}'  										employees = new  										{  											properties = new {}'  											type = "object"  										}'  										firstName = new  										{  											fields = new  											{  												keyword = new  												{  													type = "keyword"'  													ignore_above = 256  												}  											}'  											type = "text"  										}'  										hours = new  										{  											type = "long"  										}'  										isManager = new  										{  											type = "boolean"  										}'  										lastName = new  										{  											fields = new  											{  												keyword = new  												{  													type = "keyword"'  													ignore_above = 256  												}  											}'  											type = "text"  										}'  										salary = new  										{  											type = "integer"  										}  									}'  									type = "nested"  								}'  								first_name = new  								{  									fields = new  									{  										firstNameRaw = new  										{  											type = "keyword"  										}'  										length = new  										{  											analyzer = "standard"'  											type = "token_count"  										}  									}'  									type = "text"  								}'  								isManager = new  								{  									null_value = false'  									store = true'  									type = "boolean"  								}'  								last_name = new  								{  									type = "text"  								}'  								salary = new  								{  									ignore_malformed = false'  									type = "double"  								}  							}  						}'  						name = new  						{  							null_value = "null"'  							similarity = "BM25"'  							type = "keyword"  						}'  						office_hours = new  						{  							type = "text"  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,FluentMapping,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\FluentMapping.doc.cs,OverridingAutoMappedAttributes,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						employees = new  						{  							type = "nested"'  							properties = new  							{  								birthday = new  								{  									format = "MM-dd-yy"'  									type = "date"  								}'  								empl = new  								{  									properties = new  									{  										birthday = new  										{  											type = "date"  										}'  										employees = new  										{  											properties = new {}'  											type = "object"  										}'  										firstName = new  										{  											fields = new  											{  												keyword = new  												{  													type = "keyword"'  													ignore_above = 256  												}  											}'  											type = "text"  										}'  										hours = new  										{  											type = "long"  										}'  										isManager = new  										{  											type = "boolean"  										}'  										lastName = new  										{  											fields = new  											{  												keyword = new  												{  													type = "keyword"'  													ignore_above = 256  												}  											}'  											type = "text"  										}'  										salary = new  										{  											type = "integer"  										}  									}'  									type = "nested"  								}'  								first_name = new  								{  									fields = new  									{  										firstNameRaw = new  										{  											type = "keyword"  										}'  										length = new  										{  											analyzer = "standard"'  											type = "token_count"  										}  									}'  									type = "text"  								}'  								isManager = new  								{  									null_value = false'  									store = true'  									type = "boolean"  								}'  								last_name = new  								{  									type = "text"  								}'  								salary = new  								{  									ignore_malformed = false'  									type = "double"  								}  							}  						}'  						name = new  						{  							null_value = "null"'  							similarity = "BM25"'  							type = "keyword"  						}'  						office_hours = new  						{  							type = "text"  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,IgnoringProperties,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\IgnoringProperties.doc.cs,Ignoring,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						name = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,IgnoringProperties,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\IgnoringProperties.doc.cs,IgnoringInheritedProperties,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						id = new  						{  							type = "integer"  						}'  						desc = new {  							fields = new {  								keyword = new {  									ignore_above = 256'  									type = "keyword"  								}  							}'  							type = "text"  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,IgnoringProperties,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\IgnoringProperties.doc.cs,OverridingInheritedProperties,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						id = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									ignore_above = 256'  									type = "keyword"  								}  							}  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,MultiFields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\MultiFields.doc.cs,DefaultMultiFields,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						name = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,MultiFields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\MultiFields.doc.cs,CreatingMultiFields,The following statement contains a magic number: var createIndexResponse = _client.Indices.Create("myindex"' c => c  				.Map<Person>(m => m  					.Properties(p => p  						.Text(t => t  							.Name(n => n.Name)  							.Fields(ff => ff  								.Text(tt => tt  									.Name("stop") // <1> Use the stop analyzer on this sub field  									.Analyzer("stop")  								)  								.Text(tt => tt  									.Name("shingles")  									.Analyzer("name_shingles") // <2> Use a custom analyzer named "named_shingles" that is configured in the index  								)  								.Keyword(k => k  									.Name("keyword") // <3> Index as not analyzed  									.IgnoreAbove(256)  								)  							)  						)  					)  				)  			);
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,MultiFields,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\MultiFields.doc.cs,CreatingMultiFields,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						name = new  						{  							type = "text"'  							fields = new  							{  								stop = new  								{  									type = "text"'  									analyzer = "stop"  								}'  								shingles = new  								{  									type = "text"'  									analyzer = "name_shingles"  								}'  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Indexing,The following statement contains a magic number: indexChild = client.IndexDocument(new MyChild  			{  				Id = 2'  				MyJoinField = JoinField.Link<MyChild>(1)  			});
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Indexing,The following statement contains a magic number: var childJson = new  			{  				id = 2'  				myJoinField = new  				{  					name = "mychild"'  					parent = "1"  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Inference,The following statement contains a magic number: var parent = new MyParent {Id = 1337' MyJoinField = JoinField.Root<MyParent>()};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Inference,The following statement contains a magic number: var child = new MyChild {Id = 1338' MyJoinField = JoinField.Link<MyChild>(parentId: "1337")};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,ParentChildRelationships,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\ParentChildRelationships.doc.cs,Inference,The following statement contains a magic number: child = new MyChild {Id = 1339' MyJoinField = JoinField.Link<MyChild' MyParent>(parent)};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,VisitorPattern,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\VisitorPatternMapping.doc.cs,UsingACustomPropertyVisitor,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						birthday = new  						{  							type = "date"  						}'  						employees = new  						{  							properties = new { }'  							type = "object"  						}'  						firstName = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}'  						isManager = new  						{  							doc_values = false'  							type = "boolean"  						}'  						lastName = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}'  						salary = new  						{  							doc_values = false'  							type = "integer"  						}'  						hours = new  						{  							doc_values = false'  							type = "long"  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Mapping,VisitorPattern,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\VisitorPatternMapping.doc.cs,UsingACustomPropertyVisitor,The following statement contains a magic number: var expected = new  			{  				mappings = new  				{  					properties = new  					{  						birthday = new  						{  							type = "date"  						}'  						employees = new  						{  							properties = new { }'  							type = "object"  						}'  						firstName = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}'  						isManager = new  						{  							doc_values = false'  							type = "boolean"  						}'  						lastName = new  						{  							type = "text"'  							fields = new  							{  								keyword = new  								{  									type = "keyword"'  									ignore_above = 256  								}  							}  						}'  						salary = new  						{  							doc_values = false'  							type = "integer"  						}'  						hours = new  						{  							doc_values = false'  							type = "long"  						}  					}  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Serialization,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Serialization\CustomSerialization.doc.cs,UsingJsonNetSerializer,The following statement contains a magic number: var document = new MyDocument  			{  				Id = 1'  				Name = "My first document"'  				OwnerId = 2  			};
Magic Number,Tests.ClientConcepts.HighLevel.Serialization,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Serialization\CustomSerialization.doc.cs,UsingJsonNetSerializer,The following statement contains a magic number: var expected = new  			{  				id = 1'  				name = "My first document"'  				file_path = (string) null'  				owner_id = 2'  				sub_documents = (object) null  			};
Magic Number,Tests.ClientConcepts.HighLevel.Serialization,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Serialization\CustomSerialization.doc.cs,MySecondJsonNetSerializer,The following statement contains a magic number: var document = new MyDocument  			{  				Id = 1'  				Name = "My first document"'  				OwnerId = 2'  				SubDocuments = new []  				{  					new MySubDocument { Name = "my first sub document" }'  					new MySubDocument { Name = "my second sub document" }'  				}  			};
Magic Number,Tests.ClientConcepts.HighLevel.Serialization,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Serialization\CustomSerialization.doc.cs,MySecondJsonNetSerializer,The following statement contains a magic number: var expected = new JObject  			{  				{ "$type"' "Tests.ClientConcepts.HighLevel.Serialization.GettingStarted+MyDocument' Tests" }'  				{ "id"' 1 }'  				{ "name"' "My first document" }'  				{ "ownerId"' 2 }'  				{ "subDocuments"' new JArray  					{  						new JObject { { "name"' "my first sub document" } }'  						new JObject { { "name"' "my second sub document" } }'  					}  				}  			};
Magic Number,Tests.ClientConcepts.LowLevel,DirectStreaming,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\DirectStreaming.cs,DisableDirectStreamingOnError,The following statement contains a magic number: var client = FixedResponseClient.Create(new { }' 404' s => s.DisableDirectStreaming());
Magic Number,Tests.ClientConcepts.LowLevel,DirectStreaming,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\DirectStreaming.cs,EnableDirectStreamingOnError,The following statement contains a magic number: var client = FixedResponseClient.Create(new { }' 404);
Magic Number,Tests.ClientConcepts.LowLevel,DirectStreaming,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\DirectStreaming.cs,DisableDirectStreamingOnSuccess,The following statement contains a magic number: var client = FixedResponseClient.Create(new { }' 200' s => s.DisableDirectStreaming());
Magic Number,Tests.ClientConcepts.LowLevel,DirectStreaming,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\DirectStreaming.cs,EnableDirectStreamingOnRequest,The following statement contains a magic number: var client = FixedResponseClient.Create(new { }' 200' c => c.DisableDirectStreaming());
Magic Number,Tests.ClientConcepts.LowLevel,DirectStreaming,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\DirectStreaming.cs,DebugModeRespectsOriginalOnRequestCompleted,The following statement contains a magic number: var client = FixedResponseClient.Create(new { }' 200' s => s  				.EnableDebugMode(d => local++)  				.OnRequestCompleted(d => global++)  			);
Magic Number,Tests.ClientConcepts.LowLevel,DirectStreaming,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\DirectStreaming.cs,DebugModeRespectsOriginalOnRequestCompleted,The following statement contains a magic number: var response = client.Search<Project>(s => s  				.From(10)  				.Size(20)  				.Query(q => q  					.Match(m => m  						.Field(p => p.Name)  						.Query("elastic")  					)  				)  			);
Magic Number,Tests.ClientConcepts.LowLevel,DirectStreaming,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\DirectStreaming.cs,DebugModeRespectsOriginalOnRequestCompleted,The following statement contains a magic number: var response = client.Search<Project>(s => s  				.From(10)  				.Size(20)  				.Query(q => q  					.Match(m => m  						.Field(p => p.Name)  						.Query("elastic")  					)  				)  			);
Magic Number,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,UsingConnectionSettings,The following statement contains a magic number: var settings = new ConnectionConfiguration(new Uri("http://example.com:9200"))  				.RequestTimeout(TimeSpan.FromMinutes(2));
Magic Number,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,SearchingWithAnonymousTypes,The following statement contains a magic number: var searchResponse = lowlevelClient.Search<StringResponse>("people"' PostData.Serializable(new  			{  				from = 0'  				size = 10'  				query = new  				{  					match = new  					{  						field = "firstName"'  						query = "Martijn"  					}  				}  			}));
Magic Number,Tests.ClientConcepts.LowLevel,GettingStarted,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\GettingStarted.doc.cs,FineGrainedControl,The following statement contains a magic number: var settings = new ConnectionConfiguration(new Uri("http://example.com:9200"))  				.OnRequestCompleted(apiCallDetails =>  				{  					if (apiCallDetails.HttpStatusCode == 418)  					{  						throw new TimeForACoffeeException();  					}  				});
Magic Number,Tests.ClientConcepts.LowLevel,LowLevelResponseTypes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\LowLevelResponseTypes.doc.cs,DynamicResponse,The following statement contains a magic number: response.Get<int>("array.1").Should().Be(2);
Magic Number,Tests.ClientConcepts.LowLevel,LowLevelResponseTypes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\LowLevelResponseTypes.doc.cs,DynamicResponse,The following statement contains a magic number: response.Get<long>("array.1").Should().Be(2);
Magic Number,Tests.ClientConcepts.LowLevel,LowLevelResponseTypes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\LowLevelResponseTypes.doc.cs,DynamicResponse,The following statement contains a magic number: response.Get<long>("number").Should().Be(29);
Magic Number,Tests.ClientConcepts.LowLevel,LowLevelResponseTypes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\LowLevelResponseTypes.doc.cs,DynamicResponse,The following statement contains a magic number: response.Get<long?>("number").Should().Be(29);
Magic Number,Tests.ClientConcepts.LowLevel,LowLevelResponseTypes,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\LowLevelResponseTypes.doc.cs,DynamicResponse,The following statement contains a magic number: response.Get<long?>("number").Should().Be(29);
Magic Number,Tests.ClientConcepts.LowLevel,PostingData,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\LowLevel\PostData.doc.cs,PostingData,The following statement contains a magic number: this.collectionOfObjects = Enumerable.Range(0' 5).Select(i => @object).Cast<object>().ToList();
Magic Number,Tests.ClientConcepts.ServerError,ComplexErrorTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ServerError\ComplexErrorTests.cs,AssertResponseError,The following statement contains a magic number: error.Headers.Should().HaveCount(2' origin);
Magic Number,Tests.ClientConcepts.ServerError,ComplexErrorTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ServerError\ComplexErrorTests.cs,AssertResponseError,The following statement contains a magic number: error.CausedBy.ScriptStack.Should().HaveCount(2);
Magic Number,Tests.ClientConcepts.ServerError,ComplexErrorTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ServerError\ComplexErrorTests.cs,AssertResponseError,The following statement contains a magic number: error.CausedBy.ResourceId.Should().HaveCount(2);
Magic Number,Tests.ClientConcepts.ServerError,ComplexErrorTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ServerError\ComplexErrorTests.cs,AssertMetadata,The following statement contains a magic number: errorMetadata.Line.Should().Be(12' origin);
Magic Number,Tests.ClientConcepts.ServerError,ComplexErrorTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ServerError\ComplexErrorTests.cs,AssertMetadata,The following statement contains a magic number: errorMetadata.Column.Should().Be(199' origin);
Magic Number,Tests.ClientConcepts.ServerError,ErrorWithMultipleRootCausesTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ServerError\ErrorWithMultipleRootCausesTests.cs,AssertResponseError,The following statement contains a magic number: error.RootCause.Should().NotBeEmpty(origin).And.HaveCount(2' origin);
Magic Number,Tests.ClientConcepts.ServerError,ServerErrorTestsBase,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\ServerError\ServerErrorTestsBase.cs,ServerErrorTestsBase,The following statement contains a magic number: var settings = FixedResponseClient.CreateConnectionSettings(ResponseJson' 500);
Magic Number,Tests.ClientConcepts.Troubleshooting,AuditTrail,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\AuditTrail.doc.cs,AvailableOnResponse,The following statement contains a magic number: response.ApiCall.AuditTrail.Count.Should().Be(4' "{0}"' debug);
Magic Number,Tests.ClientConcepts.Troubleshooting,AuditTrail,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\AuditTrail.doc.cs,AvailableOnResponse,The following statement contains a magic number: response.ApiCall.AuditTrail[2].Event.Should().Be(AuditEvent.PingSuccess' "{0}"' debug);
Magic Number,Tests.ClientConcepts.Troubleshooting,AuditTrail,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\AuditTrail.doc.cs,AvailableOnResponse,The following statement contains a magic number: response.ApiCall.AuditTrail[3].Event.Should().Be(AuditEvent.HealthyResponse' "{0}"' debug);
Magic Number,Tests.ClientConcepts.Troubleshooting,DebuggerDisplayTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DebuggerDisplayTests.cs,Field,The following statement contains a magic number: var fieldFromExpressionWithBoost = Infer.Field<Project>(p => p.Name' 14);
Magic Number,Tests.ClientConcepts.Troubleshooting,DebuggerDisplayTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DebuggerDisplayTests.cs,FieldsDebug,The following statement contains a magic number: Fields multiple = Infer.Field("somefield").And<Project>(p => p.Description' 12);
Magic Number,Tests.ClientConcepts.Troubleshooting,DebuggerDisplayTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DebuggerDisplayTests.cs,Id,The following statement contains a magic number: Id fromLong = 1337;
Magic Number,Tests.ClientConcepts.Troubleshooting,DebuggerDisplayTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DebuggerDisplayTests.cs,MappingProperties,The following statement contains a magic number: var ip = new IpPropertyDescriptor<Project>().Name("field").Boost(2);
Magic Number,Tests.ClientConcepts.Troubleshooting,DeprecationLogging,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DeprecationLogging.doc.cs,RequestWithMultipleWarning,The following statement contains a magic number: var request = new SearchRequest<Project>  			{  				Size = 0'  				Routing = new [] { "ignoredefaultcompletedhandler" }'  				Aggregations = new TermsAggregation("states")  				{  					Field = Field<Project>(p => p.State.Suffix("keyword"))'  					Order = new List<TermsOrder>  					{  						new TermsOrder { Key = "_term"' Order = SortOrder.Ascending }'  					}  				}'  				Query = new FunctionScoreQuery()  				{  					Query = new MatchAllQuery { }'  					Functions = new List<IScoreFunction>  					{  						new RandomScoreFunction {Seed = 1337}'  					}  				}  			};
Magic Number,Tests.ClientConcepts.Troubleshooting,DeprecationLogging,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\DeprecationLogging.doc.cs,RequestWithMultipleWarning,The following statement contains a magic number: response.ApiCall.DeprecationWarnings.Should().HaveCount(2);
Magic Number,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedIsCalled,The following statement contains a magic number: counter.Should().Be(2);
Magic Number,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedIsCalledWhenExceptionIsThrown,The following statement contains a magic number: var client = FixedResponseClient.Create( // <1> Configure a client with a connection that **always returns a HTTP 500 response  				new { }'  				500'  				connectionSettings => connectionSettings  					.ThrowExceptions() // <2> Always throw exceptions when a call results in an exception  					.OnRequestCompleted(r => counter++)  			);
Magic Number,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedIsCalledWhenExceptionIsThrown,The following statement contains a magic number: counter.Should().Be(2);
Magic Number,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,UsingOnRequestCompletedForLogging,The following statement contains a magic number: list.Count.Should().Be(2);
Magic Number,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,UsingOnRequestCompletedForLogging,The following statement contains a magic number: list.Count.Should().Be(4);
Magic Number,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedPerRequest,The following statement contains a magic number: list.Count.Should().Be(2);
Magic Number,Tests.ClientConcepts.Troubleshooting,LoggingRequestsAndResponses,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\Troubleshooting\LoggingWithOnRequestCompleted.doc.cs,OnRequestCompletedPerRequest,The following statement contains a magic number: list.Count.Should().Be(4);
Magic Number,Tests.Cluster.ClusterReroute,ClusterRerouteApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\ClusterReroute\ClusterRerouteApiTests.cs,IntegrationSetup,The following statement contains a magic number: client.IndexMany(Project.Generator.Generate(100)' index).ShouldBeValid();
Magic Number,Tests.Cluster.ClusterReroute,ClusterRerouteApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\ClusterReroute\ClusterRerouteApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(400);
Magic Number,Tests.Cluster.ClusterSettings.ClusterPutSettings,ClusterPutSettingsNoopApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\ClusterSettings\ClusterPutSettings\ClusterPutSettingsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(400);
Magic Number,Tests.Cluster.NodesInfo,NodesInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesInfo\NodesInfoApiTests.cs,Assert,The following statement contains a magic number: os.RefreshInterval.Should().Be(1000);
Magic Number,Tests.Cluster.NodesStats,NodesStatsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesStats\NodesStatsApiTests.cs,IntegrationSetup,The following statement contains a magic number: i < 5
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: var fixedResponse = new  			{  				_nodes = new  				{  					total = 1'  					successful = 1'  					failed = 0'  					failures = new[]  					{  						new  						{  							type = "illegal_argument_exception"'  							reason = "failed to execute script"'  							caused_by = new  							{  								type = "script_exception"'  								reason = "failed to run inline script [use(java.lang.Exception) {throw new Exception(\"Customized Exception\")}] using lang [groovy]"'  								caused_by = new  								{  									type = "privileged_action_exception"'  									reason = (string)null'  									caused_by = new  									{  										type="exception"'  										reason= "Custom Exception"  									}  								}  							}  						}  					}  				}'  				cluster_name = "my_cluster"'  				nodes = new Dictionary<string' object>  				{  					{  						nodeId' new  						{  							timestamp = 1492553961812'  							since = 1492553906606'  							rest_actions = new Dictionary<string' object>  							{  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction"' 1 }'  								{ "org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction"' 1 }'  								{ "org.elasticsearch.rest.action.document.RestGetAction"' 1 }'  								{ "org.elasticsearch.rest.action.search.RestSearchAction"' 19 }'  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesInfoAction"' 36 }  							}  						}  					}  				}  			};
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: var fixedResponse = new  			{  				_nodes = new  				{  					total = 1'  					successful = 1'  					failed = 0'  					failures = new[]  					{  						new  						{  							type = "illegal_argument_exception"'  							reason = "failed to execute script"'  							caused_by = new  							{  								type = "script_exception"'  								reason = "failed to run inline script [use(java.lang.Exception) {throw new Exception(\"Customized Exception\")}] using lang [groovy]"'  								caused_by = new  								{  									type = "privileged_action_exception"'  									reason = (string)null'  									caused_by = new  									{  										type="exception"'  										reason= "Custom Exception"  									}  								}  							}  						}  					}  				}'  				cluster_name = "my_cluster"'  				nodes = new Dictionary<string' object>  				{  					{  						nodeId' new  						{  							timestamp = 1492553961812'  							since = 1492553906606'  							rest_actions = new Dictionary<string' object>  							{  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction"' 1 }'  								{ "org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction"' 1 }'  								{ "org.elasticsearch.rest.action.document.RestGetAction"' 1 }'  								{ "org.elasticsearch.rest.action.search.RestSearchAction"' 19 }'  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesInfoAction"' 36 }  							}  						}  					}  				}  			};
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: var fixedResponse = new  			{  				_nodes = new  				{  					total = 1'  					successful = 1'  					failed = 0'  					failures = new[]  					{  						new  						{  							type = "illegal_argument_exception"'  							reason = "failed to execute script"'  							caused_by = new  							{  								type = "script_exception"'  								reason = "failed to run inline script [use(java.lang.Exception) {throw new Exception(\"Customized Exception\")}] using lang [groovy]"'  								caused_by = new  								{  									type = "privileged_action_exception"'  									reason = (string)null'  									caused_by = new  									{  										type="exception"'  										reason= "Custom Exception"  									}  								}  							}  						}  					}  				}'  				cluster_name = "my_cluster"'  				nodes = new Dictionary<string' object>  				{  					{  						nodeId' new  						{  							timestamp = 1492553961812'  							since = 1492553906606'  							rest_actions = new Dictionary<string' object>  							{  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction"' 1 }'  								{ "org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction"' 1 }'  								{ "org.elasticsearch.rest.action.document.RestGetAction"' 1 }'  								{ "org.elasticsearch.rest.action.search.RestSearchAction"' 19 }'  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesInfoAction"' 36 }  							}  						}  					}  				}  			};
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: var fixedResponse = new  			{  				_nodes = new  				{  					total = 1'  					successful = 1'  					failed = 0'  					failures = new[]  					{  						new  						{  							type = "illegal_argument_exception"'  							reason = "failed to execute script"'  							caused_by = new  							{  								type = "script_exception"'  								reason = "failed to run inline script [use(java.lang.Exception) {throw new Exception(\"Customized Exception\")}] using lang [groovy]"'  								caused_by = new  								{  									type = "privileged_action_exception"'  									reason = (string)null'  									caused_by = new  									{  										type="exception"'  										reason= "Custom Exception"  									}  								}  							}  						}  					}  				}'  				cluster_name = "my_cluster"'  				nodes = new Dictionary<string' object>  				{  					{  						nodeId' new  						{  							timestamp = 1492553961812'  							since = 1492553906606'  							rest_actions = new Dictionary<string' object>  							{  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction"' 1 }'  								{ "org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction"' 1 }'  								{ "org.elasticsearch.rest.action.document.RestGetAction"' 1 }'  								{ "org.elasticsearch.rest.action.search.RestSearchAction"' 19 }'  								{ "org.elasticsearch.rest.action.admin.cluster.RestNodesInfoAction"' 36 }  							}  						}  					}  				}  			};
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Timestamp.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 19' 21' 812' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Timestamp.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 19' 21' 812' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Timestamp.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 19' 21' 812' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Timestamp.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 19' 21' 812' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Timestamp.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 19' 21' 812' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Timestamp.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 19' 21' 812' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Timestamp.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 19' 21' 812' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Since.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 18' 26' 606' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Since.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 18' 26' 606' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Since.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 18' 26' 606' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Since.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 18' 26' 606' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Since.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 18' 26' 606' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Since.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 18' 26' 606' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.Since.Should().Be(new DateTimeOffset(2017' 4' 18' 22' 18' 26' 606' TimeSpan.Zero));
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.RestActions.Should().HaveCount(5);
Magic Number,Tests.Cluster.NodesUsage,NodesUsageUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\NodesUsage\NodesUsageUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: node.RestActions["org.elasticsearch.rest.action.search.RestSearchAction"].Should().Be(19);
Magic Number,Tests.Cluster.TaskManagement.GetTask,GetTaskApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\TaskManagement\GetTask\GetTaskApiTests.cs,IntegrationSetup,The following statement contains a magic number: var bulkResponse = client.IndexMany(Project.Generator.Generate(10000)' sourceIndex);
Magic Number,Tests.Cluster.TaskManagement.GetTask,GetTaskApiCompletedTaskTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\TaskManagement\GetTask\GetTaskApiTests.cs,IntegrationSetup,The following statement contains a magic number: var bulkResponse = client.IndexMany(Project.Generator.Generate(500)' sourceIndex);
Magic Number,Tests.Cluster.TaskManagement.GetTask,GetTaskApiCompletedTaskTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\TaskManagement\GetTask\GetTaskApiTests.cs,IntegrationSetup,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Tests.Cluster.TaskManagement.TasksCancel,TasksCancelApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\TaskManagement\TasksCancel\TasksCancelApiTests.cs,IntegrationSetup,The following statement contains a magic number: client.IndexMany(Enumerable.Range(0' 10000).Select(i => new Test { Id = i + 1' Flag = "bar" })' index);
Magic Number,Tests.Cluster.TaskManagement.TasksList,TasksListApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\TaskManagement\TasksList\TasksListApiTests.cs,ExpectResponse,The following statement contains a magic number: taskExecutingNode.Tasks.Count().Should().BeGreaterOrEqualTo(2);
Magic Number,Tests.Cluster.TaskManagement.TasksList,TasksListDetailedApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Cluster\TaskManagement\TasksList\TasksListApiTests.cs,IntegrationSetup,The following statement contains a magic number: var bulkResponse = client.IndexMany(Project.Generator.Generate(10000)' sourceIndex);
Magic Number,Tests.CodeStandards,NamingConventions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\NamingConventions.doc.cs,IsValidTypeNameOrIdentifier,The following statement contains a magic number: switch (unicodeCategory)  				{  					case UnicodeCategory.UppercaseLetter:  					case UnicodeCategory.LowercaseLetter:  					case UnicodeCategory.TitlecaseLetter:  					case UnicodeCategory.ModifierLetter:  					case UnicodeCategory.OtherLetter:  					case UnicodeCategory.LetterNumber:  						nextMustBeStartChar = false;  						break;  					case UnicodeCategory.NonSpacingMark:  					case UnicodeCategory.SpacingCombiningMark:  					case UnicodeCategory.DecimalDigitNumber:  					case UnicodeCategory.ConnectorPunctuation:  						if (nextMustBeStartChar && (int)character != 95)  							return false;  						nextMustBeStartChar = false;  						break;  					default:  						if (!isTypeName || !IsSpecialTypeChar(character' ref nextMustBeStartChar))  							return false;  						break;  				}
Magic Number,Tests.CodeStandards,NamingConventions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\NamingConventions.doc.cs,IsSpecialTypeChar,The following statement contains a magic number: (uint)ch <= 62U
Magic Number,Tests.CodeStandards.Serialization,FractionalNumbers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Serialization\FractionalNumbers.cs,SerializeDouble,The following statement contains a magic number: var poco = new  			{  				Whole = 1d'  				Fractional = 1.1d  			};
Magic Number,Tests.CodeStandards.Serialization,FractionalNumbers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Serialization\FractionalNumbers.cs,SerializeFloat,The following statement contains a magic number: var poco = new  			{  				Whole = 1f'  				Fractional = 1.1f  			};
Magic Number,Tests.CodeStandards.Serialization,FractionalNumbers,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Serialization\FractionalNumbers.cs,SerializeDecimal,The following statement contains a magic number: var poco = new  			{  				Whole = 1m'  				Fractional = 1.1m  			};
Magic Number,Tests.CodeStandards.Serialization,GeoLocationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Serialization\GeoLocationTests.cs,CanDeserializeAndSerializeToWellKnownText,The following statement contains a magic number: deserialized.Location.Should().Be(new GeoLocation(90' -90));
Magic Number,Tests.CodeStandards.Serialization,GeoLocationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CodeStandards\Serialization\GeoLocationTests.cs,CanDeserializeAndSerializeToWellKnownText,The following statement contains a magic number: deserialized.Location.Should().Be(new GeoLocation(90' -90));
Magic Number,Tests.CommonOptions.AutoExpandReplicas,AutoExpandReplicasTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\AutoExpandReplicas\AutoExpandReplicasTests.cs,ImplicitConversionFromMinAndMaxString,The following statement contains a magic number: autoExpandReplicas.MaxReplicas.Match(  				i => i.Should().Be(5)'  				s => Assert.True(false' "expecting a match on integer"));
Magic Number,Tests.CommonOptions.AutoExpandReplicas,AutoExpandReplicasTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\AutoExpandReplicas\AutoExpandReplicasTests.cs,CreateWithMinAndMax,The following statement contains a magic number: var autoExpandReplicas = Nest.AutoExpandReplicas.Create(2' 3);
Magic Number,Tests.CommonOptions.AutoExpandReplicas,AutoExpandReplicasTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\AutoExpandReplicas\AutoExpandReplicasTests.cs,CreateWithMinAndMax,The following statement contains a magic number: var autoExpandReplicas = Nest.AutoExpandReplicas.Create(2' 3);
Magic Number,Tests.CommonOptions.AutoExpandReplicas,AutoExpandReplicasTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\AutoExpandReplicas\AutoExpandReplicasTests.cs,CreateWithMinAndMax,The following statement contains a magic number: autoExpandReplicas.MinReplicas.Should().Be(2);
Magic Number,Tests.CommonOptions.AutoExpandReplicas,AutoExpandReplicasTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\AutoExpandReplicas\AutoExpandReplicasTests.cs,CreateWithMinAndMax,The following statement contains a magic number: autoExpandReplicas.MaxReplicas.Match(  				i => i.Should().Be(3)'  				s => Assert.True(false' "expecting a match on integer"));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: Expect("2015-05-05T00:00:00").WhenSerializing(Nest.DateMath.Anchored(new DateTime(2015'05' 05)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: Expect("2015-05-05T00:00:00").WhenSerializing(Nest.DateMath.Anchored(new DateTime(2015'05' 05)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: Expect("2015-05-05T00:00:00").WhenSerializing(Nest.DateMath.Anchored(new DateTime(2015'05' 05)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: var date = new DateTime(2015' 05' 05);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: var date = new DateTime(2015' 05' 05);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: var date = new DateTime(2015' 05' 05);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: var utcDate = new DateTime(2015' 05' 05' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: var utcDate = new DateTime(2015' 05' 05' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,SimpleExpressions,The following statement contains a magic number: var utcDate = new DateTime(2015' 05' 05' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,ComplexExpressions,The following statement contains a magic number: Expect("2015-05-05T00:00:00||+1d-1m").WhenSerializing(  				Nest.DateMath.Anchored(new DateTime(2015'05'05))  					.Add("1d")  					.Subtract(TimeSpan.FromMinutes(1)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,ComplexExpressions,The following statement contains a magic number: Expect("2015-05-05T00:00:00||+1d-1m").WhenSerializing(  				Nest.DateMath.Anchored(new DateTime(2015'05'05))  					.Add("1d")  					.Subtract(TimeSpan.FromMinutes(1)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,ComplexExpressions,The following statement contains a magic number: Expect("2015-05-05T00:00:00||+1d-1m").WhenSerializing(  				Nest.DateMath.Anchored(new DateTime(2015'05'05))  					.Add("1d")  					.Subtract(TimeSpan.FromMinutes(1)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,FractionalsUnitsAreDroppedToNearestInteger,The following statement contains a magic number: Expect("now+1w").WhenSerializing(Nest.DateMath.Now.Add(TimeSpan.FromDays(7)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,FractionalsUnitsAreDroppedToNearestInteger,The following statement contains a magic number: Expect("now+1w").WhenSerializing(Nest.DateMath.Now.Add(604800000));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,FractionalsUnitsAreDroppedToNearestInteger,The following statement contains a magic number: Expect("now+30h").WhenSerializing(Nest.DateMath.Now.Add(TimeSpan.FromHours(30)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,FractionalsUnitsAreDroppedToNearestInteger,The following statement contains a magic number: Expect("now+90001s").WhenSerializing(  				Nest.DateMath.Now.Add(TimeSpan.FromHours(25).Add(TimeSpan.FromSeconds(1))));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,FractionalsUnitsAreDroppedToNearestInteger,The following statement contains a magic number: Expect("now+90000s").WhenSerializing(  				Nest.DateMath.Now.Add(TimeSpan.FromHours(25).Add(TimeSpan.FromMilliseconds(1))));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,FractionalsUnitsAreDroppedToNearestInteger,The following statement contains a magic number: Expect("now+52w").WhenSerializing(Nest.DateMath.Now.Add(TimeSpan.FromDays(7 * 52)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,FractionalsUnitsAreDroppedToNearestInteger,The following statement contains a magic number: Expect("now+52w").WhenSerializing(Nest.DateMath.Now.Add(TimeSpan.FromDays(7 * 52)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,Rounding,The following statement contains a magic number: Expect("now+0s").WhenSerializing(  				Nest.DateMath.Now.Add(new DateMathTime(500' MidpointRounding.ToEven)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,Rounding,The following statement contains a magic number: Expect("now+1s").WhenSerializing(  				Nest.DateMath.Now.Add(new DateMathTime(500' MidpointRounding.AwayFromZero)));
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,EqualityAndComparison,The following statement contains a magic number: DateMathTime twoSeconds = new DateMathTime(2' DateMathTimeUnit.Second);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,EqualityAndComparison,The following statement contains a magic number: DateMathTime twoSecondsFromTimeSpan = TimeSpan.FromSeconds(2);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,EqualityAndComparison,The following statement contains a magic number: DateMathTime twoSecondsFromDouble = 2000;
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,EqualityAndComparison,The following statement contains a magic number: DateMathTime twelveMonths = new DateMathTime(12' DateMathTimeUnit.Month);
Magic Number,Tests.CommonOptions.DateMath,DateMathExpressions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DateMath\DateMathExpressions.doc.cs,EqualityAndComparison,The following statement contains a magic number: DateMathTime thirteenMonths = new DateMathTime(13' DateMathTimeUnit.Month);
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,Constructor,The following statement contains a magic number: var unitComposed = new Distance(25);
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,Constructor,The following statement contains a magic number: var unitComposedWithUnits = new Distance(25' Nest.DistanceUnit.Meters);
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("2mm").WhenSerializing(new Distance(2' Nest.DistanceUnit.Millimeters));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("123.456cm").WhenSerializing(new Distance(123.456' Nest.DistanceUnit.Centimeters));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("400m").WhenSerializing(new Distance(400' Nest.DistanceUnit.Meters));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("0.1km").WhenSerializing(new Distance(0.1' Nest.DistanceUnit.Kilometers));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("43.23in").WhenSerializing(new Distance(43.23' Nest.DistanceUnit.Inch));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("3.33ft").WhenSerializing(new Distance(3.33' Nest.DistanceUnit.Feet));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("9yd").WhenSerializing(new Distance(9' Nest.DistanceUnit.Yards));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("0.62mi").WhenSerializing(new Distance(0.62' Nest.DistanceUnit.Miles));
Magic Number,Tests.CommonOptions.DistanceUnit,DistanceUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\DistanceUnit\DistanceUnits.doc.cs,UsingDifferentUnits,The following statement contains a magic number: Expect("45.5nmi").WhenSerializing(new Distance(45.5' Nest.DistanceUnit.NauticalMiles));
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: var unitComposed = new Time(2' Nest.TimeUnit.Day);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: var unitTimeSpan = new Time(TimeSpan.FromDays(2));
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: var unitMilliseconds = new Time(1000 * 60 * 60 * 24 * 2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: var unitMilliseconds = new Time(1000 * 60 * 60 * 24 * 2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: var unitMilliseconds = new Time(1000 * 60 * 60 * 24 * 2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: var unitMilliseconds = new Time(1000 * 60 * 60 * 24 * 2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: var unitMilliseconds = new Time(1000 * 60 * 60 * 24 * 2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitMilliseconds.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitMilliseconds.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitMilliseconds.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitMilliseconds.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitMilliseconds.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitComposed.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitComposed.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitComposed.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitComposed.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitComposed.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitTimeSpan.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitTimeSpan.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitTimeSpan.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitTimeSpan.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitTimeSpan.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitString.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitString.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitString.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitString.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,Constructor,The following statement contains a magic number: unitString.Milliseconds.Should().Be(1000*60*60*24*2);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,ImplicitConversion,The following statement contains a magic number: Time fourteenDays = TimeSpan.FromDays(14);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,ImplicitConversion,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,ImplicitConversion,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,ImplicitConversion,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,ImplicitConversion,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,ImplicitConversion,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: Time fourteenDays = TimeSpan.FromDays(14);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: fourteenDays.Milliseconds.Should().Be(1209600000);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: Time twoDays = 1000*60*60*24*2;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,EqualityAndComparable,The following statement contains a magic number: (new Time("2.1d") == new Time(TimeSpan.FromDays(2.1))).Should().BeTrue();
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,SpecialTimeValues,The following statement contains a magic number: var twoDays = new Time(2' Nest.TimeUnit.Day);
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,StringImplicitConversionParsing,The following statement contains a magic number: var testCases = new StringParsingTestCases  			{  				{ "2.000000000e-06ms"' TimeSpan.FromMilliseconds(2.000000000e-06)' "0.000002ms"}'  				{ "3.1e-11ms"' TimeSpan.FromMilliseconds(3.1e-11)' "0.000000000031ms"}'  				{ "1000 nanos"' new TimeSpan(10) ' "1000nanos"}'  				{ "1000nanos"' new TimeSpan(10)' "1000nanos"}'  				{ "1000 NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "1000NANOS"' new TimeSpan(10)' "1000nanos" }'  				{ "10micros"' new TimeSpan(100)' "10micros" }'  				{ "10   MS"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10   ms"' new TimeSpan(0' 0' 0' 0' 10)' "10ms" }'  				{ "10s"' new TimeSpan(0' 0' 10)' "10s" }'  				{ "-10s"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "-10S"' new TimeSpan(0' 0' -10)' "-10s" }'  				{ "10m"' new TimeSpan(0' 10' 0) ' "10m"}'  				{ "10M"' new TimeSpan(0' 10' 0)' "10m" }' // 300 days not minutes  				{ "10h"' new TimeSpan(10' 0' 0)' "10h" }'  				{ "10H"' new TimeSpan(10' 0' 0) ' "10h"}'  				{ "10d"' new TimeSpan(10' 0' 0' 0) ' "10d"}'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionParsing,The following statement contains a magic number: var testCases = new DoubleParsingTestCases  			{  				{ 1e-4' new TimeSpan(1) ' "100nanos"}' // smallest value that can be represented with ticks  				{ 1e-3' new TimeSpan(10)' "1micros"}'  				{ 0.1' TimeSpan.FromTicks(1000)' "100micros"}'  				{ 1' TimeSpan.FromMilliseconds(1)' "1ms"}'  				{ 1.2' TimeSpan.FromTicks(12000)' "1200micros"}'  				{ 10' TimeSpan.FromMilliseconds(10)' "10ms"}'  				{ 100' TimeSpan.FromMilliseconds(100)' "100ms"}'  				{ 1000' TimeSpan.FromSeconds(1)' "1s" }'  				{ 60000' TimeSpan.FromMinutes(1)' "1m" }'  				{ 3.6e+6' TimeSpan.FromHours(1)' "1h" }'  				{ 8.64e+7' TimeSpan.FromDays(1)' "1d" }'  				{ 1.296e+8' TimeSpan.FromDays(1.5)' "36h" }'  			};
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,DoubleImplicitConversionOneNanosecond,The following statement contains a magic number: Time oneNanosecond = 1e-6;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,UsingInterval,The following statement contains a magic number: Expect("11664m").WhenSerializing<Union<DateInterval' Time>>((Time)TimeSpan.FromDays(8.1));
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,MillisecondsNeverSerializeToMonthsOrYears,The following statement contains a magic number: double millisecondsInAMonth = 2592000000;
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,MillisecondsNeverSerializeToMonthsOrYears,The following statement contains a magic number: Expect("60d").WhenSerializing(new Time(millisecondsInAMonth * 2));
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,MillisecondsNeverSerializeToMonthsOrYears,The following statement contains a magic number: Expect("360d").WhenSerializing(new Time(millisecondsInAMonth * 12));
Magic Number,Tests.CommonOptions.TimeUnit,TimeUnits,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\CommonOptions\TimeUnit\TimeUnits.doc.cs,MillisecondsNeverSerializeToMonthsOrYears,The following statement contains a magic number: Expect("720d").WhenSerializing(new Time(millisecondsInAMonth * 24));
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllCancellationTokenApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllCancellationTokenApiTests.cs,CancelBulkAll,The following statement contains a magic number: var size = 1000;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllCancellationTokenApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllCancellationTokenApiTests.cs,CancelBulkAll,The following statement contains a magic number: var pages = 1000;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllCancellationTokenApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllCancellationTokenApiTests.cs,CancelBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(8)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllCancellationTokenApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllCancellationTokenApiTests.cs,CancelBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(8)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllCancellationTokenApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllCancellationTokenApiTests.cs,CancelBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(8)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllCancellationTokenApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllCancellationTokenApiTests.cs,CancelBulkAll,The following statement contains a magic number: handle.WaitOne(TimeSpan.FromSeconds(3));
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllCancellationTokenApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllCancellationTokenApiTests.cs,CancelBulkAll,The following statement contains a magic number: handle.WaitOne(TimeSpan.FromSeconds(3));
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDeallocationApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDeallocationApiTests.cs,ForEachAsyncReleasesProcessedItemsInMemory,The following statement contains a magic number: var lazyCollection = GetLazyCollection(  				weakRef => deallocReference = weakRef'  				delegate { }' //...  				delegate { }' //Making sure that all of the objects have gone through pipeline  				delegate { }' //so that the first one can be deallocated  				delegate { }' //Various GC roots prevent several of previous (2 or 3)  				delegate { }' //items in the lazy Enumerable from deallocation during forced GC  				delegate { }' //...  				delegate  				{  					GC.Collect(2' GCCollectionMode.Forced' true);  					deallocReference.TryGetTarget(out obj);  				}  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDeallocationApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDeallocationApiTests.cs,ForEachAsyncReleasesProcessedItemsInMemory,The following statement contains a magic number: observableBulk.Wait(TimeSpan.FromSeconds(30)' delegate { });
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDisposeApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDisposeApiTests.cs,DisposingObservableCancelsBulkAll,The following statement contains a magic number: var size = 1000;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDisposeApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDisposeApiTests.cs,DisposingObservableCancelsBulkAll,The following statement contains a magic number: var pages = 1000;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDisposeApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDisposeApiTests.cs,DisposingObservableCancelsBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDisposeApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDisposeApiTests.cs,DisposingObservableCancelsBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDisposeApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDisposeApiTests.cs,DisposingObservableCancelsBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDisposeApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDisposeApiTests.cs,DisposingObservableCancelsBulkAll,The following statement contains a magic number: handle.WaitOne(TimeSpan.FromSeconds(3));
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllDisposeApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllDisposeApiTests.cs,DisposingObservableCancelsBulkAll,The following statement contains a magic number: handle.WaitOne(TimeSpan.FromSeconds(3));
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllExceptionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,WaitBulkAllThrowsAndIsCaught,The following statement contains a magic number: var size = 1000;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllExceptionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,WaitBulkAllThrowsAndIsCaught,The following statement contains a magic number: var pages = 10;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllExceptionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,WaitBulkAllThrowsAndIsCaught,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(4)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  					.BufferToBulk((r' buffer) => r.IndexMany(buffer))  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllExceptionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,WaitBulkAllThrowsAndIsCaught,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(4)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  					.BufferToBulk((r' buffer) => r.IndexMany(buffer))  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllExceptionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,WaitBulkAllThrowsAndIsCaught,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(4)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  					.BufferToBulk((r' buffer) => r.IndexMany(buffer))  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllExceptionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,WaitBulkAllThrowsAndIsCaught,The following statement contains a magic number: observableBulk.Wait(TimeSpan.FromSeconds(30)' b =>  				{  					if (seenPages == 8) throw new Exception("boom");    					Interlocked.Increment(ref seenPages);  				});
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllExceptionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,WaitBulkAllThrowsAndIsCaught,The following statement contains a magic number: observableBulk.Wait(TimeSpan.FromSeconds(30)' b =>  				{  					if (seenPages == 8) throw new Exception("boom");    					Interlocked.Increment(ref seenPages);  				});
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllBadRetriesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,Completes,The following statement contains a magic number: var cluster = VirtualClusterWith.Nodes(2)  				.ClientCalls(c => c.FailAlways())  				.StaticConnectionPool()  				.AllDefaults();
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllBadRetriesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,Completes,The following statement contains a magic number: var size = 1000;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllBadRetriesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,Completes,The following statement contains a magic number: var pages = 10;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllBadRetriesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,Completes,The following statement contains a magic number: var observableBulk = client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(1)  					.BulkResponseCallback(r => Interlocked.Increment(ref requests))  					.BackOffTime(TimeSpan.FromMilliseconds(1))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  					.BufferToBulk((r' buffer) => r.IndexMany(buffer))  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllBadRetriesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,Completes,The following statement contains a magic number: observableBulk.Wait(TimeSpan.FromSeconds(30)' b =>  				{  					Interlocked.Increment(ref seenPages);  				});
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllBadRetriesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllExceptionApiTests.cs,Completes,The following statement contains a magic number: requests.Should().Be(3);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllForEachAsyncApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllForEachAsyncApiTests.cs,AwaitBulkAll,The following statement contains a magic number: var size = 1000;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllForEachAsyncApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllForEachAsyncApiTests.cs,AwaitBulkAll,The following statement contains a magic number: var pages = 10;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllForEachAsyncApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllForEachAsyncApiTests.cs,AwaitBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(8)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  					.BufferToBulk((r' buffer) => r.IndexMany(buffer))  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllForEachAsyncApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllForEachAsyncApiTests.cs,AwaitBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(8)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  					.BufferToBulk((r' buffer) => r.IndexMany(buffer))  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAllForEachAsyncApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAllForEachAsyncApiTests.cs,AwaitBulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  					.MaxDegreeOfParallelism(8)  					.BackOffTime(TimeSpan.FromSeconds(10))  					.BackOffRetries(2)  					.Size(size)  					.RefreshOnCompleted()  					.Index(index)  					.BufferToBulk((r' buffer) => r.IndexMany(buffer))  				' tokenSource.Token);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAllAndScrollAll,The following statement contains a magic number: const int size = 1000' pages = 100' numberOfDocuments = size * pages' numberOfShards = 10;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAllAndScrollAll,The following statement contains a magic number: const int size = 1000' pages = 100' numberOfDocuments = size * pages' numberOfShards = 10;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAllAndScrollAll,The following statement contains a magic number: const int size = 1000' pages = 100' numberOfDocuments = size * pages' numberOfShards = 10;
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,ScrollAll,The following statement contains a magic number: Client.ScrollAll<SmallObject>("1m"' numberOfShards' s => s  					.MaxDegreeOfParallelism(numberOfShards / 2)  					.Search(search => search  						.Size(size / 2)  						.Index(index)  						.MatchAll()  					)  				)  				.Wait(TimeSpan.FromMinutes(5)' r =>  				{  					seenSlices.Add(r.Slice);  					Interlocked.Add(ref seenDocuments' r.SearchResponse.Hits.Count);  				});
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,ScrollAll,The following statement contains a magic number: Client.ScrollAll<SmallObject>("1m"' numberOfShards' s => s  					.MaxDegreeOfParallelism(numberOfShards / 2)  					.Search(search => search  						.Size(size / 2)  						.Index(index)  						.MatchAll()  					)  				)  				.Wait(TimeSpan.FromMinutes(5)' r =>  				{  					seenSlices.Add(r.Slice);  					Interlocked.Add(ref seenDocuments' r.SearchResponse.Hits.Count);  				});
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,ScrollAll,The following statement contains a magic number: Client.ScrollAll<SmallObject>("1m"' numberOfShards' s => s  					.MaxDegreeOfParallelism(numberOfShards / 2)  					.Search(search => search  						.Size(size / 2)  						.Index(index)  						.MatchAll()  					)  				)  				.Wait(TimeSpan.FromMinutes(5)' r =>  				{  					seenSlices.Add(r.Slice);  					Interlocked.Add(ref seenDocuments' r.SearchResponse.Hits.Count);  				});
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.DroppedDocumentCallback((b' i) => droppedDocuments.Add(Tuple.Create(b' i)))  				.Size(size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.DroppedDocumentCallback((b' i) => droppedDocuments.Add(Tuple.Create(b' i)))  				.Size(size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAll,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.DroppedDocumentCallback((b' i) => droppedDocuments.Add(Tuple.Create(b' i)))  				.Size(size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAll,The following statement contains a magic number: var bulkObserver = observableBulk.Wait(TimeSpan.FromMinutes(5)' b =>  			{  				Interlocked.Increment(ref seenPages);  				foreach (var item in b.Items)  				{  					item.IsValid.Should().BeTrue();  					item.Id.Should().NotBeNullOrEmpty();  				}  			});
Magic Number,Tests.Document.Multiple.BulkAll,BulkAndScrollApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkAndScrollApiTests.cs,BulkAll,The following statement contains a magic number: droppedDocuments.Take(10).Should().BeEmpty();
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,WaitThrowsExceptionAndHalts,The following statement contains a magic number: Action bulkObserver = () => observableBulk.Wait(TimeSpan.FromMinutes(5)' b => Interlocked.Increment(ref seenPages));
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,WaitThrowsExceptionAndHalts,The following statement contains a magic number: seenPages.Should().Be(2);
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,SubscribeHitsOnError,The following statement contains a magic number: handle.WaitOne(TimeSpan.FromSeconds(60));
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,ContinueAfterDroppedCallsCallback,The following statement contains a magic number: observableBulk.Wait(TimeSpan.FromMinutes(5)' b => Interlocked.Increment(ref seenPages));
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,ContinueAfterDroppedCallsCallback,The following statement contains a magic number: seenPages.Should().Be(3);
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,BadBulkRequestFeedsToOnError,The following statement contains a magic number: var observableBulk = badClient.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(Size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,BadBulkRequestFeedsToOnError,The following statement contains a magic number: var observableBulk = badClient.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(Size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,BadBulkRequestFeedsToOnError,The following statement contains a magic number: var observableBulk = badClient.BulkAll(documents' f => f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(Size)  				.RefreshOnCompleted()  				.Index(index)  			);
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,BadBulkRequestFeedsToOnError,The following statement contains a magic number: handle.WaitOne(TimeSpan.FromSeconds(60));
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,KickOff,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => selector(f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(Size)  				.RefreshOnCompleted()  				.Index(index)  			));
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,KickOff,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => selector(f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(Size)  				.RefreshOnCompleted()  				.Index(index)  			));
Magic Number,Tests.Document.Multiple.BulkAll,BulkOnErrorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\BulkAll\BulkOnErrorApiTests.cs,KickOff,The following statement contains a magic number: var observableBulk = Client.BulkAll(documents' f => selector(f  				.MaxDegreeOfParallelism(8)  				.BackOffTime(TimeSpan.FromSeconds(10))  				.BackOffRetries(2)  				.Size(Size)  				.RefreshOnCompleted()  				.Index(index)  			));
Magic Number,Tests.Document.Multiple.Bulk,BulkApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Bulk\BulkApiTests.cs,ExpectResponse,The following statement contains a magic number: item.Status.Should().BeGreaterThan(100);
Magic Number,Tests.Document.Multiple.Bulk,BulkApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Bulk\BulkApiTests.cs,ExpectResponse,The following statement contains a magic number: project2.NumberOfCommits.Should().Be(30);
Magic Number,Tests.Document.Multiple.Bulk,BulkInvalidApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Bulk\BulkInvalidApiTests.cs,ExpectResponse,The following statement contains a magic number: failedUpdate.Status.Should().Be(404);
Magic Number,Tests.Document.Multiple.Bulk,BulkInvalidVersionApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Bulk\BulkInvalidVersionApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(400);
Magic Number,Tests.Document.Multiple.Bulk,BulkResponseParstingTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Bulk\BulkResponseParsingTests.cs,CanDeserialize,The following statement contains a magic number: var count = 100000;
Magic Number,Tests.Document.Multiple.DeleteByQuery,DeleteByQueryApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\DeleteByQuery\DeleteByQueryApiTests.cs,IntegrationSetup,The following statement contains a magic number: Client.Indices.Create(index' c => c  					.Settings(s => s  						.NumberOfShards(2)  						.NumberOfReplicas(0)  						.Analysis(DefaultSeeder.ProjectAnalysisSettings)  					)  					.Map<Project>(p => p  						.AutoMap()  						.Properties(DefaultSeeder.ProjectProperties)  					)  				);
Magic Number,Tests.Document.Multiple.DeleteByQuery,DeleteByQueryWithFailuresApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\DeleteByQuery\DeleteByQueryApiTests.cs,ExpectResponse,The following statement contains a magic number: failure.Status.Should().Be(409);
Magic Number,Tests.Document.Multiple.MultiGet,GetManyApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\GetManyApiTests.cs,UsesDefaultIndexAndInferredType,The following statement contains a magic number: response.Count().Should().Be(10);
Magic Number,Tests.Document.Multiple.MultiGet,GetManyApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\GetManyApiTests.cs,UsesDefaultIndexAndInferredTypeAsync,The following statement contains a magic number: response.Count().Should().Be(10);
Magic Number,Tests.Document.Multiple.MultiGet,GetManyApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\GetManyApiTests.cs,CanHandleNotFoundResponses,The following statement contains a magic number: var response = await _client.GetManyAsync<Developer>(_ids.Select(i => i * 100));
Magic Number,Tests.Document.Multiple.MultiGet,GetManyApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\GetManyApiTests.cs,CanHandleNotFoundResponses,The following statement contains a magic number: response.Count().Should().Be(10);
Magic Number,Tests.Document.Multiple.MultiGet,GetManyApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\GetManyApiTests.cs,ThrowsExceptionOnConnectionError,The following statement contains a magic number: var client = new ElasticClient(new TestConnectionSettings(port: 9500));
Magic Number,Tests.Document.Multiple.MultiGet,GetManyApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\GetManyApiTests.cs,ThrowsExceptionOnConnectionError,The following statement contains a magic number: Action response = () => client.GetMany<Developer>(_ids.Select(i => i * 100));
Magic Number,Tests.Document.Multiple.MultiGet,MultiGetSimplifiedApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\MultiGetApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Hits.Should().NotBeEmpty().And.HaveCount(10);
Magic Number,Tests.Document.Multiple.MultiGet,MultiGetApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\MultiGetApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Hits.Should().NotBeEmpty().And.HaveCount(10);
Magic Number,Tests.Document.Multiple.MultiGet,MultiGetMetadataApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\MultiGetApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Hits.Should().NotBeEmpty().And.HaveCount(10);
Magic Number,Tests.Document.Multiple.MultiGet,MultiGetParentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiGet\MultiGetApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Hits.Should().NotBeEmpty().And.HaveCount(10);
Magic Number,Tests.Document.Multiple.MultiTermVectors,MultiTermVectorsDocsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiTermVectors\MultiTermVectorsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Documents.Should().NotBeEmpty().And.HaveCount(2).And.OnlyContain(d => d.Found);
Magic Number,Tests.Document.Multiple.MultiTermVectors,MultiTermVectorsIdsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\MultiTermVectors\MultiTermVectorsIdsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Documents.Should().NotBeEmpty().And.HaveCount(2).And.OnlyContain(d => d.Found);
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerApiTests.cs,IntegrationSetup,The following statement contains a magic number: Client.Index(new Test { Id = 2' Flag = "bar" }' i => i.Index(index).Refresh(Refresh.True));
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Total.Should().Be(2);
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Created.Should().Be(2);
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerInvalidApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerInvalidApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(400);
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerPipelineApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerPipelineApiTests.cs,IntegrationSetup,The following statement contains a magic number: Client.Index(new Test { Id = 2' Flag = "bar" }' i => i.Index(index).Refresh(Refresh.True));
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerPipelineApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerPipelineApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Total.Should().Be(2);
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerPipelineApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerPipelineApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Created.Should().Be(2);
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerSliceApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerSliceApiTests.cs,IntegrationSetup,The following statement contains a magic number: Client.Bulk(b => b  					.Index(index)  					.IndexMany(new[]  					{  						new Test { Id = 1' Flag = "bar" }'  						new Test { Id = 2' Flag = "bar" }  					})  					.Refresh(Refresh.WaitFor)  				);
Magic Number,Tests.Document.Multiple.ReindexOnServer,ReindexOnServerSourceApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\ReindexOnServer\ReindexOnServerSourceApiTests.cs,IntegrationSetup,The following statement contains a magic number: Client.Bulk(b => b  					.Index(index)  					.IndexMany(new[]  					{  						new Test { Id = 1' Flag = "bar" }'  						new Test { Id = 2' Flag = "bar" }  					})  					.Refresh(Refresh.WaitFor)  				);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: var projects = Project.Generator.Generate(2);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: var commits = CommitActivity.Generator.Generate(5000);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: var project = i % 2 == 0  					? projects[0].Name  					: projects[1].Name;
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: _reindexManyTypesResult = _client.Reindex<ILazyDocument>(r => r  				.BackPressureFactor(10)  				.ScrollAll("1m"' 2' s => s  					.Search(ss => ss  						.Index(IndexName)  					)  					.MaxDegreeOfParallelism(4)  				)  				.BulkAll(b => b  					.Index(NewManyTypesIndexName)  					.Size(100)  					.MaxDegreeOfParallelism(2)  					.RefreshOnCompleted()  				)  			);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: _reindexManyTypesResult = _client.Reindex<ILazyDocument>(r => r  				.BackPressureFactor(10)  				.ScrollAll("1m"' 2' s => s  					.Search(ss => ss  						.Index(IndexName)  					)  					.MaxDegreeOfParallelism(4)  				)  				.BulkAll(b => b  					.Index(NewManyTypesIndexName)  					.Size(100)  					.MaxDegreeOfParallelism(2)  					.RefreshOnCompleted()  				)  			);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: _reindexManyTypesResult = _client.Reindex<ILazyDocument>(r => r  				.BackPressureFactor(10)  				.ScrollAll("1m"' 2' s => s  					.Search(ss => ss  						.Index(IndexName)  					)  					.MaxDegreeOfParallelism(4)  				)  				.BulkAll(b => b  					.Index(NewManyTypesIndexName)  					.Size(100)  					.MaxDegreeOfParallelism(2)  					.RefreshOnCompleted()  				)  			);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: _reindexManyTypesResult = _client.Reindex<ILazyDocument>(r => r  				.BackPressureFactor(10)  				.ScrollAll("1m"' 2' s => s  					.Search(ss => ss  						.Index(IndexName)  					)  					.MaxDegreeOfParallelism(4)  				)  				.BulkAll(b => b  					.Index(NewManyTypesIndexName)  					.Size(100)  					.MaxDegreeOfParallelism(2)  					.RefreshOnCompleted()  				)  			);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexApiTests,The following statement contains a magic number: _reindexManyTypesResult = _client.Reindex<ILazyDocument>(r => r  				.BackPressureFactor(10)  				.ScrollAll("1m"' 2' s => s  					.Search(ss => ss  						.Index(IndexName)  					)  					.MaxDegreeOfParallelism(4)  				)  				.BulkAll(b => b  					.Index(NewManyTypesIndexName)  					.Size(100)  					.MaxDegreeOfParallelism(2)  					.RefreshOnCompleted()  				)  			);
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReturnsExpectedResponse,The following statement contains a magic number: observableWait.Wait(TimeSpan.FromMinutes(3));
Magic Number,Tests.Document.Multiple.Reindex,ReindexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\Reindex\ReindexApiTests.cs,ReindexManyTypesCompleted,The following statement contains a magic number: var searchResult = _client.Search<CommitActivity>(s => s  				.Index(NewManyTypesIndexName)  				.From(0)  				.Size(100)  				.Query(q => q.HasRelationName<CommitActivity>(p => p.Join))  				.Scroll(scroll)  			);
Magic Number,Tests.Document.Multiple.UpdateByQuery,UpdateByQueryApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\UpdateByQuery\UpdateByQueryApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Total.Should().Be(2);
Magic Number,Tests.Document.Multiple.UpdateByQuery,UpdateByQueryApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\UpdateByQuery\UpdateByQueryApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Updated.Should().Be(2);
Magic Number,Tests.Document.Multiple.UpdateByQuery,UpdateByQueryWithFailuresApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Multiple\UpdateByQuery\UpdateByQueryApiTests.cs,ExpectResponse,The following statement contains a magic number: failure.Status.Should().Be(409);
Magic Number,Tests.Document.Single.Create,CreateInvalidApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,CreateWithSameIndexTypeAndId,The following statement contains a magic number: createResponse.ApiCall.HttpStatusCode.Should().Be(201);
Magic Number,Tests.Document.Single.Create,CreateInvalidApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,CreateWithSameIndexTypeAndId,The following statement contains a magic number: createResponse.ApiCall.HttpStatusCode.Should().Be(409);
Magic Number,Tests.Document.Single.Create,CreateJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Create,CreateJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Create,CreateJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Create,CreateJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Create,CreateJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: createResponse.ApiCall.HttpStatusCode.Should().Be(201);
Magic Number,Tests.Document.Single.Create,CreateJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: item.Status.Should().Be(201);
Magic Number,Tests.Document.Single.Create,CreateAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: var anonymousType = new  			{  				name = "name"'  				value = 3'  				date = new DateTime(2016' 1' 1)'  				child = new  				{  					child_name = "child_name"'  					child_value = 3  				}  			};
Magic Number,Tests.Document.Single.Create,CreateAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: var anonymousType = new  			{  				name = "name"'  				value = 3'  				date = new DateTime(2016' 1' 1)'  				child = new  				{  					child_name = "child_name"'  					child_value = 3  				}  			};
Magic Number,Tests.Document.Single.Create,CreateAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: var anonymousType = new  			{  				name = "name"'  				value = 3'  				date = new DateTime(2016' 1' 1)'  				child = new  				{  					child_name = "child_name"'  					child_value = 3  				}  			};
Magic Number,Tests.Document.Single.Create,CreateAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Create\CreateApiTests.cs,Create,The following statement contains a magic number: createResponse.ApiCall.HttpStatusCode.Should().Be(201);
Magic Number,Tests.Document.Single.Index,IndexIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,OpTypeCreate,The following statement contains a magic number: indexResult.ApiCall.HttpStatusCode.Should().Be(201);
Magic Number,Tests.Document.Single.Index,IndexIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,OpTypeCreate,The following statement contains a magic number: indexResult.ApiCall.HttpStatusCode.Should().Be(409);
Magic Number,Tests.Document.Single.Index,IndexIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,OpTypeCreate,The following statement contains a magic number: indexResult.ServerError.Status.Should().Be(409);
Magic Number,Tests.Document.Single.Index,IndexIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: indexResult.ApiCall.HttpStatusCode.Should().Be(201);
Magic Number,Tests.Document.Single.Index,IndexIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: indexResult.ApiCall.HttpStatusCode.Should().Be(200);
Magic Number,Tests.Document.Single.Index,IndexIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: indexResult.Version.Should().Be(2);
Magic Number,Tests.Document.Single.Index,IndexJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Index,IndexJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Index,IndexJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Index,IndexJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: var jObjects = Enumerable.Range(1' 1000)  				.Select(i =>  					new JObject  					{  						{ "id"' i }'  						{ "name"' $"name {i}" }'  						{ "value"' Math.Pow(i' 2) }'  						{ "date"' new DateTime(2016' 1' 1) }'  						{  							"child"' new JObject  							{  								{ "child_name"' $"child_name {i}{i}" }'  								{ "child_value"' 3 }  							}  						}  					});
Magic Number,Tests.Document.Single.Index,IndexJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: indexResult.ApiCall.HttpStatusCode.Should().Be(201);
Magic Number,Tests.Document.Single.Index,IndexJObjectIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: item.Status.Should().Be(201);
Magic Number,Tests.Document.Single.Index,IndexAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: var anonymousType = new  			{  				name = "name"'  				value = 3'  				date = new DateTime(2016' 1' 1)'  				child = new  				{  					child_name = "child_name"'  					child_value = 3  				}  			};
Magic Number,Tests.Document.Single.Index,IndexAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: var anonymousType = new  			{  				name = "name"'  				value = 3'  				date = new DateTime(2016' 1' 1)'  				child = new  				{  					child_name = "child_name"'  					child_value = 3  				}  			};
Magic Number,Tests.Document.Single.Index,IndexAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: var anonymousType = new  			{  				name = "name"'  				value = 3'  				date = new DateTime(2016' 1' 1)'  				child = new  				{  					child_name = "child_name"'  					child_value = 3  				}  			};
Magic Number,Tests.Document.Single.Index,IndexAnonymousTypesIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexApiTests.cs,Index,The following statement contains a magic number: indexResult.ApiCall.HttpStatusCode.Should().Be(201);
Magic Number,Tests.Document.Single.Index,IndexIngestAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ExpectResponse,The following statement contains a magic number: attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,IndexIngestAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ExpectResponse,The following statement contains a magic number: attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,IndexIngestAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ExpectResponse,The following statement contains a magic number: attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,IndexIngestAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ExpectResponse,The following statement contains a magic number: attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,IndexIngestAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ExpectResponse,The following statement contains a magic number: attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,IndexIngestAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ExpectResponse,The following statement contains a magic number: attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,IndexIngestAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ExpectResponse,The following statement contains a magic number: attachment.ContentLength.Should().Be(96);
Magic Number,Tests.Document.Single.Index,ReindexAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ReindexIntoAnotherIndexCorrectlySerializesAttachment,The following statement contains a magic number: ingestedAttachment.Attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,ReindexAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ReindexIntoAnotherIndexCorrectlySerializesAttachment,The following statement contains a magic number: ingestedAttachment.Attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,ReindexAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ReindexIntoAnotherIndexCorrectlySerializesAttachment,The following statement contains a magic number: ingestedAttachment.Attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,ReindexAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ReindexIntoAnotherIndexCorrectlySerializesAttachment,The following statement contains a magic number: ingestedAttachment.Attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,ReindexAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ReindexIntoAnotherIndexCorrectlySerializesAttachment,The following statement contains a magic number: ingestedAttachment.Attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,ReindexAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ReindexIntoAnotherIndexCorrectlySerializesAttachment,The following statement contains a magic number: ingestedAttachment.Attachment.Date.Should().Be(new DateTime(2016' 12' 08' 3' 5' 13' DateTimeKind.Utc));
Magic Number,Tests.Document.Single.Index,ReindexAttachmentApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestAttachmentApiTests.cs,ReindexIntoAnotherIndexCorrectlySerializesAttachment,The following statement contains a magic number: ingestedAttachment.Attachment.ContentLength.Should().Be(96);
Magic Number,Tests.Document.Single.Index,IndexIngestGeoIpApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestGeoIpApiTests.cs,ExpectResponse,The following statement contains a magic number: geoIp.Location.Latitude.Should().Be(65);
Magic Number,Tests.Document.Single.Index,IndexIngestGeoIpApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Document\Single\Index\IndexIngestGeoIpApiTests.cs,ExpectResponse,The following statement contains a magic number: geoIp.Location.Longitude.Should().Be(-18);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _createGetResponse = usage.CallOnce(Read' 2);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _createExistsResponse = usage.CallOnce(Exists' 3);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _afterCreateResponses[kv.Key] = usage.CallOnce(kv.Value' 3 * 10 + i++);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _afterCreateResponses[kv.Key] = usage.CallOnce(kv.Value' 3 * 10 + i++);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _updateResponse = usage.CallOnce(Update' 4);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _updateGetResponse = usage.CallOnce(Read' 5);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _deleteResponse = usage.CallOnce(Delete' 6);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _deleteGetResponse = usage.CallOnce(Read' 7);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _deleteExistsResponse = usage.CallOnce(Exists' 8);
Magic Number,Tests.Framework.EndpointTests,CrudTestBase<TCluster;TCreateResponse;TReadResponse;TUpdateResponse;TDeleteResponse;TExistsResponse>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\EndpointTests\CrudTestBase.cs,CrudTestBase,The following statement contains a magic number: _deleteNotFoundResponse = usage.CallOnce(Delete' 9);
Magic Number,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following statement contains a magic number: switch (num % 100)  			{  				case 11:  				case 12:  				case 13:  					return num + "th";  			}
Magic Number,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following statement contains a magic number: switch (num % 100)  			{  				case 11:  				case 12:  				case 13:  					return num + "th";  			}
Magic Number,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following statement contains a magic number: switch (num % 100)  			{  				case 11:  				case 12:  				case 13:  					return num + "th";  			}
Magic Number,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following statement contains a magic number: switch (num % 100)  			{  				case 11:  				case 12:  				case 13:  					return num + "th";  			}
Magic Number,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following statement contains a magic number: switch (num % 10)  			{  				case 1:  					return num + "st";  				case 2:  					return num + "nd";  				case 3:  					return num + "rd";  				default:  					return num + "th";  			}
Magic Number,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following statement contains a magic number: switch (num % 10)  			{  				case 1:  					return num + "st";  				case 2:  					return num + "nd";  				case 3:  					return num + "rd";  				default:  					return num + "th";  			}
Magic Number,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following statement contains a magic number: switch (num % 10)  			{  				case 1:  					return num + "st";  				case 2:  					return num + "nd";  				case 3:  					return num + "rd";  				default:  					return num + "th";  			}
Magic Number,Tests.Framework.Extensions,UriExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\UriExtensions.cs,CreateExpectedUri,The following statement contains a magic number: var paths = (pathAndQueryString ?? "").Split(new[] { '?' }' 2);
Magic Number,Tests.Framework.SerializationTests,BytesResponseTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\BytesResponseTests.cs,NonNullBytesLowLevelResponse,The following statement contains a magic number: var settings  = new ConnectionConfiguration(new Uri($"http://localhost:{_cluster.Nodes.First().Port ?? 9200}"));
Magic Number,Tests.Framework.SerializationTests,BytesResponseTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\BytesResponseTests.cs,TryGetServerErrorDoesNotThrowException,The following statement contains a magic number: var client = FixedResponseClient.Create(responseBytes' 401'  				modifySettings: s => s.DisableDirectStreaming()'  				contentType: "text/html"'  				exception: new Exception("problem with the request as a result of 401")  			);
Magic Number,Tests.Framework.SerializationTests,BytesResponseTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\BytesResponseTests.cs,SkipDeserializationForStatusCodesSetsBody,The following statement contains a magic number: var client = FixedResponseClient.Create(responseBytes' 401'  				modifySettings: s => s.DisableDirectStreaming().SkipDeserializationForStatusCodes(401)'  				contentType: "text/html"'  				exception: new Exception("problem with the request as a result of 401")  			);
Magic Number,Tests.Framework.SerializationTests,BytesResponseTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\BytesResponseTests.cs,SkipDeserializationForStatusCodesSetsBody,The following statement contains a magic number: var client = FixedResponseClient.Create(responseBytes' 401'  				modifySettings: s => s.DisableDirectStreaming().SkipDeserializationForStatusCodes(401)'  				contentType: "text/html"'  				exception: new Exception("problem with the request as a result of 401")  			);
Magic Number,Tests.Framework.SerializationTests,ExceptionSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\ExceptionSerializationTests.cs,LowLevelExceptionSerializationMatchesJsonNet,The following statement contains a magic number: return new  				{  					Depth = depth'  					ClassName = exceptionType.FullName'  					Message = message'  					Source = (object)null'  					StackTraceString = (object)null'  					RemoteStackTraceString = (object)null'  					RemoteStackIndex = 0'  					HResult = -2146233088'  					HelpURL = (object)null  				};
Magic Number,Tests.Framework.SerializationTests,ExceptionSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\ExceptionSerializationTests.cs,LowLevelExceptionSerializationMatchesJsonNet,The following statement contains a magic number: var simpleJsonException = new[]  			{  				CreateException(typeof(Exception)' "outer_exception"' 0)'  				CreateException(typeof(InnerException)' "inner_exception"' 1)'  				CreateException(typeof(InnerInnerException)' "inner_inner_exception"' 2)'  			};
Magic Number,Tests.Framework.SerializationTests,StringResponseTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\StringResponseTests.cs,TryGetServerErrorDoesNotThrowException,The following statement contains a magic number: var client = FixedResponseClient.Create(StubResponse.NginxHtml401Response' 401'  				modifySettings: s => s.DisableDirectStreaming()'  				contentType: "text/html"'  				exception: new Exception("problem with the request as a result of 401")  			);
Magic Number,Tests.Framework.SerializationTests,StringResponseTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\StringResponseTests.cs,SkipDeserializationForStatusCodesSetsBody,The following statement contains a magic number: var client = FixedResponseClient.Create(StubResponse.NginxHtml401Response' 401'  				modifySettings: s => s.DisableDirectStreaming().SkipDeserializationForStatusCodes(401)'  				contentType: "text/html"'  				exception: new Exception("problem with the request as a result of 401")  			);
Magic Number,Tests.Framework.SerializationTests,StringResponseTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\SerializationTests\StringResponseTests.cs,SkipDeserializationForStatusCodesSetsBody,The following statement contains a magic number: var client = FixedResponseClient.Create(StubResponse.NginxHtml401Response' 401'  				modifySettings: s => s.DisableDirectStreaming().SkipDeserializationForStatusCodes(401)'  				contentType: "text/html"'  				exception: new Exception("problem with the request as a result of 401")  			);
Magic Number,Tests.Indices.AliasManagement.Alias,AliasIsWriteIndexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\Alias\AliasApiTests.cs,OnAfterCall,The following statement contains a magic number: var secondAlias = Alias(2);
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,GetAliasesPointingToIndexTests,The following statement contains a magic number: var createResponse = _client.Indices.Create(Index' c => c  					.Settings(s => s  						.NumberOfShards(1)  						.NumberOfReplicas(0)  					)  					.Aliases(a => a  						.Alias(Alias(1))  						.Alias(Alias(2))  						.Alias(Alias(3))  					)  				);
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,GetAliasesPointingToIndexTests,The following statement contains a magic number: var createResponse = _client.Indices.Create(Index' c => c  					.Settings(s => s  						.NumberOfShards(1)  						.NumberOfReplicas(0)  					)  					.Aliases(a => a  						.Alias(Alias(1))  						.Alias(Alias(2))  						.Alias(Alias(3))  					)  				);
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,ShouldGetIndicesPointingToAlias,The following statement contains a magic number: var indices = _client.GetIndicesPointingToAlias(Alias(3));
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,ShouldGetIndicesPointingToAliasAsync,The following statement contains a magic number: var indices = await _client.GetIndicesPointingToAliasAsync(Alias(3));
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,NotFoundAliasReturnEmpty,The following statement contains a magic number: var indices = await _client.GetIndicesPointingToAliasAsync(Alias(4));
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,AssertGetAliasesPointingToIndexResponse,The following statement contains a magic number: aliasesPointingToIndex.Should()  				.NotBeEmpty()  				.And.HaveCount(3)  				.And.ContainKey(Alias(1))  				.And.ContainKey(Alias(2))  				.And.ContainKey(Alias(3));
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,AssertGetAliasesPointingToIndexResponse,The following statement contains a magic number: aliasesPointingToIndex.Should()  				.NotBeEmpty()  				.And.HaveCount(3)  				.And.ContainKey(Alias(1))  				.And.ContainKey(Alias(2))  				.And.ContainKey(Alias(3));
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,AssertGetAliasesPointingToIndexResponse,The following statement contains a magic number: aliasesPointingToIndex.Should()  				.NotBeEmpty()  				.And.HaveCount(3)  				.And.ContainKey(Alias(1))  				.And.ContainKey(Alias(2))  				.And.ContainKey(Alias(3));
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,AssertGetAliasesPointingToIndexResponse,The following statement contains a magic number: aliasesPointingToIndex[Alias(2)].Should().NotBeNull();
Magic Number,Tests.Indices.AliasManagement.GetAliasesPointingToIndex,GetAliasesPointingToIndexTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetAliasesPointingToIndex\GetAliasesPointingToIndexTests.cs,AssertGetAliasesPointingToIndexResponse,The following statement contains a magic number: aliasesPointingToIndex[Alias(3)].Should().NotBeNull();
Magic Number,Tests.Indices.AliasManagement.GetIndicesPointingToAlias,GetIndicesPointingToAliasTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetIndicesPointingToAlias\GetIndicesPointingToAliasTests.cs,ShouldGetAliasesPointingToIndex,The following statement contains a magic number: indicesPointingToAlias.Should().NotBeEmpty().And.HaveCount(3);
Magic Number,Tests.Indices.AliasManagement.GetIndicesPointingToAlias,GetIndicesPointingToAliasTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\AliasManagement\GetIndicesPointingToAlias\GetIndicesPointingToAliasTests.cs,ShouldGetAliasesPointingToIndexAsync,The following statement contains a magic number: indicesPointingToAlias.Should().NotBeEmpty().And.HaveCount(3);
Magic Number,Tests.Indices.Analyze,AnalyzeInlineAnalyzerApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\Analyze\AnalyzeApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Tokens.Should().HaveCount(6);
Magic Number,Tests.Indices.IndexManagement.DeleteIndex,DeleteNonExistentIndexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexManagement\DeleteIndex\DeleteIndexApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(404);
Magic Number,Tests.Indices.IndexManagement.RolloverIndex,RolloverIndexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexManagement\RolloverIndex\RolloverIndexApiTests.cs,OnBeforeCall,The following statement contains a magic number: var someDocs = client.Bulk( b=> b  				.Index(CallIsolatedValue)  				.Refresh(Refresh.True)  				.IndexMany(Project.Generator.Generate(1200))  			);
Magic Number,Tests.Indices.IndexManagement.RolloverIndex,RolloverIndexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexManagement\RolloverIndex\RolloverIndexApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Conditions.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.Indices.IndexManagement.ShrinkIndex,ShrinkIndexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexManagement\ShrinkIndex\ShrinkIndexApiTests.cs,OnBeforeCall,The following statement contains a magic number: var create = client.Indices.Create(CallIsolatedValue' c => c  				.Settings(s => s  					.NumberOfShards(8)  					.NumberOfReplicas(0)  				)  			);
Magic Number,Tests.Indices.IndexManagement.SplitIndex,SplitIndexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexManagement\SplitIndex\SplitIndexApiTests.cs,OnBeforeCall,The following statement contains a magic number: var create = client.Indices.Create(CallIsolatedValue' c => c  				.Settings(s => s  					.NumberOfShards(4)  					.NumberOfRoutingShards(8)  					.NumberOfReplicas(0)  				)  			);
Magic Number,Tests.Indices.IndexManagement.SplitIndex,SplitIndexApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexManagement\SplitIndex\SplitIndexApiTests.cs,OnBeforeCall,The following statement contains a magic number: var create = client.Indices.Create(CallIsolatedValue' c => c  				.Settings(s => s  					.NumberOfShards(4)  					.NumberOfRoutingShards(8)  					.NumberOfReplicas(0)  				)  			);
Magic Number,Tests.Indices.IndexSettings.IndexTemplates.GetIndexTemplate,GetIndexTemplateApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexSettings\IndexTemplates\GetIndexTemplate\GetIndexTemplateApiTests.cs,IntegrationSetup,The following statement contains a magic number: var putTemplateResponse = client.Indices.PutTemplate(callUniqueValue.Value' d =>  					d.IndexPatterns("startingwiththis-*")  						.Settings(s => s.NumberOfShards(2))  						.Version(1)  				);
Magic Number,Tests.Indices.IndexSettings.IndexTemplates.GetIndexTemplate,GetIndexTemplateApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexSettings\IndexTemplates\GetIndexTemplate\GetIndexTemplateApiTests.cs,ExpectResponse,The following statement contains a magic number: responseTemplateMapping.Settings.NumberOfShards.Should().Be(2);
Magic Number,Tests.Indices.IndexSettings.IndexTemplates,IndexTemplateCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexSettings\IndexTemplates\IndexTemplateCrudTests.cs,ExpectAfterCreate,The following statement contains a magic number: templateMapping.Settings.NumberOfShards.Should().Be(2);
Magic Number,Tests.Indices.IndexSettings.IndexTemplates,IndexTemplateCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\IndexSettings\IndexTemplates\IndexTemplateCrudTests.cs,ExpectDeleteNotFoundResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(404);
Magic Number,Tests.Indices.MappingManagement.GetFieldMapping,GetFieldMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetFieldMapping\GetFieldMappingApiTests.cs,AssertNameFieldMapping,The following statement contains a magic number: nameKeyword.Fields.Should().NotBeEmpty().And.HaveCount(2);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("text"' b ? 18 : 17);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("text"' b ? 18 : 17);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("keyword"' b ? 19 : 18);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("keyword"' b ? 19 : 18);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("object"' supportsFlattenedType? 8 : 9);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("object"' supportsFlattenedType? 8 : 9);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("number"' 9);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("ip"' 2);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("geo_point"' 3);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("date"' 4);
Magic Number,Tests.Indices.MappingManagement.GetMapping,GetMappingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\MappingManagement\GetMapping\GetMappingApiTest.cs,AssertVisitedProperties,The following statement contains a magic number: visitor.CountsShouldContainKeyAndCountBe("completion"' 2);
Magic Number,Tests.Indices.Monitoring.IndicesShardStores,IndicesShardStoresApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\Monitoring\IndicesShardStores\IndicesShardStoresApiTests.cs,IntegrationSetup,The following statement contains a magic number: client.Indices.Create(IndexWithUnassignedShards' s => s  				.Settings(settings => settings  					.NumberOfShards(1)  					.NumberOfReplicas(2)  				)  			);
Magic Number,Tests.Indices.Monitoring.IndicesStats,IndicesStatsWithShardsInformationApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Indices\Monitoring\IndicesStats\IndicesStatsWithShardsInformationApiTests.cs,IntegrationSetup,The following statement contains a magic number: var createShardedIndex = Client.Indices.Create(RandomString()' c => c  				.Settings(settings => settings  					.NumberOfShards(3)  				)  			);
Magic Number,Tests.Ingest.GrokProcessorPatterns,GrokProcessorPatternsUnitTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Ingest\GrokProcessorPatterns\GrokProcessorPatternsUnitTests.cs,ShouldDeserialize,The following statement contains a magic number: response.Patterns.Should().HaveCount(2);
Magic Number,Tests.Ingest,PipelineCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Ingest\PipelineCrudTests.cs,ExpectAfterCreate,The following statement contains a magic number: processors.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.Ingest,PipelineCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Ingest\PipelineCrudTests.cs,ExpectAfterUpdate,The following statement contains a magic number: processors.Should().NotBeNull().And.HaveCount(3);
Magic Number,Tests.Ingest.SimulatePipeline,SimulatePipelineApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Ingest\SimulatePipeline\SimulatePipelineApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Documents.Should().NotBeNull().And.HaveCount(3);
Magic Number,Tests.Ingest.SimulatePipeline,SimulatePipelineVerboseApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Ingest\SimulatePipeline\SimulatePipelineApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Documents.Count.Should().Be(3);
Magic Number,Tests.Modules.Scripting,ScriptingCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Modules\Scripting\ScriptingCrudTests.cs,ExpectDeleteNotFoundResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(404);
Magic Number,Tests.Modules.SnapshotAndRestore.Repositories.GetRepository,GetRepositoryApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Modules\SnapshotAndRestore\Repositories\GetRepository\GetRepositoryApiTests.cs,IntegrationSetup,The following statement contains a magic number: var createRepositoryResponse = client.Snapshot.CreateRepository(callUniqueValue.Value' d => d  					.SourceOnly(so => so  						.FileSystem(fs => fs  							.Settings("some/location"' s => s  								.Compress()  								.ConcurrentStreams(5)  								.ChunkSize("64mb")  								.RestoreBytesPerSecondMaximum("100mb")  								.SnapshotBytesPerSecondMaximum("200mb")  							)  						)  					)  				);
Magic Number,Tests.Modules.SnapshotAndRestore.Repositories,RepositoryCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Modules\SnapshotAndRestore\Repositories\RepositoryCrudTests.cs,ExpectAfterUpdate,The following statement contains a magic number: repository.Settings.ConcurrentStreams.Should().Be(5);
Magic Number,Tests.Modules.SnapshotAndRestore.Repositories,RepositoryCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Modules\SnapshotAndRestore\Repositories\RepositoryCrudTests.cs,ExpectDeleteNotFoundResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(404);
Magic Number,Tests.Modules.SnapshotAndRestore.Restore,RestoreApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Modules\SnapshotAndRestore\Restore\RestoreApiTests.cs,RestoreApiTests,The following statement contains a magic number: !getSnapshotResponse.IsValid && getSnapshotResponse.ApiCall.HttpStatusCode == 404 ||  				!getSnapshotResponse.Snapshots.Any()
Magic Number,Tests.Modules.SnapshotAndRestore.Snapshot,SnapshotCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Modules\SnapshotAndRestore\Snapshot\SnapshotCrudTests.cs,ExpectDeleteNotFoundResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(404);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4)'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && (a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2)'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && (!a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2))'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && (!O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2))'  				4  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Id == 1 || a.Id == 2 || a.Id == 3 || a.Id == 4 && a.Option != BoolCluster.E.Option1 || a.Option == BoolCluster.E.Option2'  				a => +a.Id(1) || +a.Id(2) || +a.Id(3) || +a.Id(4) && !a.O(BoolCluster.E.Option1) || a.O(BoolCluster.E.Option2)'  				+Id(1) || +Id(2) || +Id(3) || +Id(4) && !O(BoolCluster.E.Option1) || O(BoolCluster.E.Option2)'  				12  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Option != BoolCluster.E.Option1 && a.Id != 2 && a.Id != 3'  				a => !a.O(BoolCluster.E.Option1) && !a.Id(2) && !+a.Id(3)'  				!O(BoolCluster.E.Option1) && !Id(2) && !+Id(3)'  				9  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Option != BoolCluster.E.Option1 && a.Id != 2 && a.Id != 3'  				a => !a.O(BoolCluster.E.Option1) && !a.Id(2) && !+a.Id(3)'  				!O(BoolCluster.E.Option1) && !Id(2) && !+Id(3)'  				9  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Option != BoolCluster.E.Option1 && a.Id != 2 && a.Id != 3'  				a => !a.O(BoolCluster.E.Option1) && !a.Id(2) && !+a.Id(3)'  				!O(BoolCluster.E.Option1) && !Id(2) && !+Id(3)'  				9  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Option != BoolCluster.E.Option1 && a.Id != 2 && a.Id != 3'  				a => !a.O(BoolCluster.E.Option1) && !a.Id(2) && !+a.Id(3)'  				!O(BoolCluster.E.Option1) && !Id(2) && !+Id(3)'  				9  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Option != BoolCluster.E.Option1 && a.Id != 2 && a.Id != 3'  				a => !a.O(BoolCluster.E.Option1) && !a.Id(2) && !+a.Id(3)'  				!O(BoolCluster.E.Option1) && !Id(2) && !+Id(3)'  				9  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Option != BoolCluster.E.Option1 && a.Id != 2 && a.Id != 3'  				a => !a.O(BoolCluster.E.Option1) && !a.Id(2) && !+a.Id(3)'  				!O(BoolCluster.E.Option1) && !Id(2) && !+Id(3)'  				9  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolsInPractice,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolApiTests.cs,CompareBoolQueryTranslationsToRealBooleanLogic,The following statement contains a magic number: await Bool(  				a => a.Option != BoolCluster.E.Option1 && a.Id != 2 && a.Id != 3'  				a => !a.O(BoolCluster.E.Option1) && !a.Id(2) && !+a.Id(3)'  				!O(BoolCluster.E.Option1) && !Id(2) && !+Id(3)'  				9  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,JoinsMustQueries,The following statement contains a magic number: Assert(  				q => q.Query() && q.Query() && q.Query()' // <1> three queries `&&` together using the Fluent API  				Query && Query && Query' // <2> three queries `&&` together using Object Initialzer syntax  				c => c.Bool.Must.Should().HaveCount(3) // <3> assert the resulting `bool` query in each case has 3 `must` clauses  			);
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,MustNotOperatorAnd,The following statement contains a magic number: Assert(  				q => !q.Query() && !q.Query()' // <1> two queries with `!` operator applied' `&&` together using the Fluent API  				!Query && !Query' // <2> two queries with `!` operator applied' `&&` together using the Object Initializer syntax  				c => c.Bool.MustNot.Should().HaveCount(2));
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,UnaryAddOperatorAnd,The following statement contains a magic number: Assert(  				q => +q.Query() && +q.Query()'  				+Query && +Query'  				c => c.Bool.Filter.Should().HaveCount(2));
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,JoinsMustWithMustNot,The following statement contains a magic number: Assert(  				q => q.Query() && q.Query() && q.Query() && !q.Query()'  				Query && Query && Query && !Query'  				c=>  				{  					c.Bool.Must.Should().HaveCount(3);  					c.Bool.MustNot.Should().HaveCount(1);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,JoinsMustWithMustNotAndFilter,The following statement contains a magic number: Assert(  				q => q.Query() && q.Query() && q.Query() && !q.Query() && +q.Query() && +q.Query()'  				Query && Query && Query && !Query && +Query && +Query'  				c =>  				{  					c.Bool.Must.Should().HaveCount(3);  					c.Bool.MustNot.Should().HaveCount(1);  					c.Bool.Filter.Should().HaveCount(2);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,JoinsMustWithMustNotAndFilter,The following statement contains a magic number: Assert(  				q => q.Query() && q.Query() && q.Query() && !q.Query() && +q.Query() && +q.Query()'  				Query && Query && Query && !Query && +Query && +Query'  				c =>  				{  					c.Bool.Must.Should().HaveCount(3);  					c.Bool.MustNot.Should().HaveCount(1);  					c.Bool.Filter.Should().HaveCount(2);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,MixAndMatch,The following statement contains a magic number: Assert(  				q => q.Bool(b => b.Must(mq => mq.Query()' mq => mq.Query()' mq => mq.Query())) && !q.Query()'  				new BoolQuery { Must = new QueryContainer[] { Query' Query' Query } } && !Query'  				c =>  				{  					c.Bool.Must.Should().HaveCount(3);  					c.Bool.MustNot.Should().HaveCount(1);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,JoinsWithShouldClauses,The following statement contains a magic number: Assert(  				q => q.Query() && (q.Query() || q.Query() || q.Query())'  				Query && (Query || Query || Query)'  				c =>  				{  					c.Bool.Must.Should().HaveCount(2);  					var lastMustClause = (IQueryContainer)c.Bool.Must.Last();  					lastMustClause.Should().NotBeNull();  					lastMustClause.Bool.Should().NotBeNull();  					lastMustClause.Bool.Should.Should().HaveCount(3);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,JoinsWithShouldClauses,The following statement contains a magic number: Assert(  				q => q.Query() && (q.Query() || q.Query() || q.Query())'  				Query && (Query || Query || Query)'  				c =>  				{  					c.Bool.Must.Should().HaveCount(2);  					var lastMustClause = (IQueryContainer)c.Bool.Must.Last();  					lastMustClause.Should().NotBeNull();  					lastMustClause.Bool.Should().NotBeNull();  					lastMustClause.Bool.Should.Should().HaveCount(3);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,MixAndMatchMinimumShouldMatch,The following statement contains a magic number: Assert(  				q => q.Bool(b => b  					.Should(mq => mq.Query()' mq => mq.Query()' mq => mq.Query()' mq => mq.Query())  					.MinimumShouldMatch(2)  					)  					 || !q.Query() || q.Query()'  				new BoolQuery  				{  					Should = new QueryContainer[] { Query' Query' Query' Query }'  					MinimumShouldMatch = 2  				} || !Query || Query'  				c =>  				{  					c.Bool.Should.Should().HaveCount(3);  					var nestedBool = c.Bool.Should.First() as IQueryContainer;  					nestedBool.Bool.Should.Should().HaveCount(4);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,MixAndMatchMinimumShouldMatch,The following statement contains a magic number: Assert(  				q => q.Bool(b => b  					.Should(mq => mq.Query()' mq => mq.Query()' mq => mq.Query()' mq => mq.Query())  					.MinimumShouldMatch(2)  					)  					 || !q.Query() || q.Query()'  				new BoolQuery  				{  					Should = new QueryContainer[] { Query' Query' Query' Query }'  					MinimumShouldMatch = 2  				} || !Query || Query'  				c =>  				{  					c.Bool.Should.Should().HaveCount(3);  					var nestedBool = c.Bool.Should.First() as IQueryContainer;  					nestedBool.Bool.Should.Should().HaveCount(4);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,MixAndMatchMinimumShouldMatch,The following statement contains a magic number: Assert(  				q => q.Bool(b => b  					.Should(mq => mq.Query()' mq => mq.Query()' mq => mq.Query()' mq => mq.Query())  					.MinimumShouldMatch(2)  					)  					 || !q.Query() || q.Query()'  				new BoolQuery  				{  					Should = new QueryContainer[] { Query' Query' Query' Query }'  					MinimumShouldMatch = 2  				} || !Query || Query'  				c =>  				{  					c.Bool.Should.Should().HaveCount(3);  					var nestedBool = c.Bool.Should.First() as IQueryContainer;  					nestedBool.Bool.Should.Should().HaveCount(4);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,MixAndMatchMinimumShouldMatch,The following statement contains a magic number: Assert(  				q => q.Bool(b => b  					.Should(mq => mq.Query()' mq => mq.Query()' mq => mq.Query()' mq => mq.Query())  					.MinimumShouldMatch(2)  					)  					 || !q.Query() || q.Query()'  				new BoolQuery  				{  					Should = new QueryContainer[] { Query' Query' Query' Query }'  					MinimumShouldMatch = 2  				} || !Query || Query'  				c =>  				{  					c.Bool.Should.Should().HaveCount(3);  					var nestedBool = c.Bool.Should.First() as IQueryContainer;  					nestedBool.Bool.Should.Should().HaveCount(4);  				});
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,AssertDoesNotJoinOntoLockedBool,The following statement contains a magic number: c.Bool.Should.Should().HaveCount(2);
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,AssertAndIsNotViral,The following statement contains a magic number: original.Bool.Must.Should().HaveCount(2' $"query composed using {origin} should have 2 must clauses before");
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,AssertAndIsNotViral,The following statement contains a magic number: result.Bool.Must.Should().HaveCount(3' $"query composed using {origin} combined with && should have 3 must clauses");
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,AssertAndIsNotViral,The following statement contains a magic number: original.Bool.Must.Should().HaveCount(2' $"query composed using {origin} should still have 2 must clauses after composition");
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,SlowCombine,The following statement contains a magic number: i < 1000
Magic Number,Tests.QueryDsl.BoolDsl,BoolDslTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\BoolDsl.doc.cs,FastCombine,The following statement contains a magic number: var x = Enumerable.Range(0' 1000).Select(f => q).ToArray();
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorOnManualBoolsTests.cs,CombindingTwoBools,The following statement contains a magic number: ReturnsBool(  				new BoolQuery { Must = queries' Should = queries }  				&& new BoolQuery { MustNot = queries' Should = queries }  				' q => q.Bool(b => b.Must(c => c.Query()).Should(c => c.Query()))  					&& q.Bool(b => b.MustNot(c => c.Query()).Should(c => c.Query()))  				' b =>  				{  					b.Must.Should().NotBeEmpty().And.HaveCount(2);  					var first = (IQueryContainer)b.Must.First();  					var last = (IQueryContainer)b.Must.Last();  					first.Bool.Should().NotBeNull();  					last.Bool.Should().NotBeNull();    					var firstBool = first.Bool;  					var lastBool = last.Bool;    					firstBool.Should.Should().NotBeEmpty().And.HaveCount(1);  					firstBool.Must.Should().NotBeEmpty().And.HaveCount(1);    					lastBool.Should.Should().NotBeEmpty().And.HaveCount(1);  					lastBool.MustNot.Should().NotBeEmpty().And.HaveCount(1);  				});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorOnManualBoolsTests.cs,AndIntoBoolWithMustAndShould,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Must = queries' Should = queries }' Query  				' q => q.Bool(b => b.Must(c => c.Query()).Should(c => c.Query()))' q => q.Query()  				' l => l.Bool.Should().NotBeNull()  				' r => r.Term.Should().NotBeNull()  				' b => b.Must.Should().NotBeEmpty().And.HaveCount(2)  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorOnManualBoolsTests.cs,AndIntoBoolWithMustAndMustNot,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Must = queries' MustNot = queries }' Query  				' q => q.Bool(b => b.Must(c => c.Query()).MustNot(c => c.Query()))' q => q.Query()  				' l => l.Term.Should().NotBeNull()  				' r => r.Term.Should().NotBeNull()  				' b =>  				{  					b.Must.Should().NotBeEmpty().And.HaveCount(2);  					b.MustNot.Should().NotBeEmpty().And.HaveCount(1);  				}  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorOnManualBoolsTests.cs,AndIntoBoolWithMust,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Must = queries }' Query  				' q => q.Bool(b => b.Must(c => c.Query()))' q => q.Query()  				' l => l.Term.Should().NotBeNull()  				' r => r.Term.Should().NotBeNull()  				' b => { b.Must.Should().NotBeEmpty().And.HaveCount(2); }  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorOnManualBoolsTests.cs,AndIntoBoolWithShould,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Should = queries }' Query  				' q => q.Bool(b => b.Should(c => c.Query()))' q => q.Query()  				' l =>  				{  					l.Bool.Should().NotBeNull();  					l.Bool.Should.Should().NotBeNullOrEmpty();  				}  				' r => r.Term.Should().NotBeNull()  				' b => b.Must.Should().NotBeEmpty().And.HaveCount(2)  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorOnManualBoolsTests.cs,AndIntoNamedBool,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Should = queries' Name = "name" }' Query  				' q => q.Bool(b => b.Should(c => c.Query()).Name("name"))' q => q.Query()  				' l =>  				{  					l.Bool.Should().NotBeNull();  					l.Bool.Should.Should().NotBeNullOrEmpty();  					l.Bool.Name.Should().Be("name");  				}  				' r => r.Term.Should().NotBeNull()  				' b => b.Must.Should().NotBeEmpty().And.HaveCount(2)  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorUsageTests.cs,And,The following statement contains a magic number: ReturnsBool(Query && Query' q => q.Query() && q.Query()' b =>  			{  				b.Must.Should().NotBeEmpty().And.HaveCount(2);  				b.Should.Should().BeNull();  				b.MustNot.Should().BeNull();  				b.Filter.Should().BeNull();  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorUsageTests.cs,And,The following statement contains a magic number: ReturnsBool(Query && Query && ConditionlessQuery' q => q.Query() && q.Query() && q.ConditionlessQuery()' b =>  			{  				b.Must.Should().NotBeEmpty().And.HaveCount(2);  				b.Should.Should().BeNull();  				b.MustNot.Should().BeNull();  				b.Filter.Should().BeNull();  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorUsageTests.cs,CombiningManyUsingAggregate,The following statement contains a magic number: var lotsOfAnds = Enumerable.Range(0' 100).Aggregate(new QueryContainer()' (q' c) => q && Query' q => q);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorUsageTests.cs,CombiningManyUsingForeachInitializingWithNull,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,Tests.QueryDsl.BoolDsl.Operators,AndOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\AndOperatorUsageTests.cs,CombiningManyUsingForeachInitializingWithDefault,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,Tests.QueryDsl.BoolDsl.Operators,NotOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\NotOperatorUsageTests.cs,Not,The following statement contains a magic number: ReturnsBool(!Query && !Query' q => !q.Query() && !q.Query()' b =>  			{  				b.MustNot.Should().NotBeEmpty().And.HaveCount(2);  				b.Must.Should().BeNull();  				b.Should.Should().BeNull();  				b.Filter.Should().BeNull();  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,NotOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\NotOperatorUsageTests.cs,Not,The following statement contains a magic number: ReturnsBool(!Query || !Query || !ConditionlessQuery' q => !q.Query() || !q.Query() || !q.ConditionlessQuery()' b =>  			{  				b.Should.Should().NotBeEmpty().And.HaveCount(2);  				b.Must.Should().BeNull();  				b.MustNot.Should().BeNull();  				b.Filter.Should().BeNull();  				foreach (IQueryContainer q in b.Should)  				{  					q.Bool.Should().NotBeNull();  					q.Bool.MustNot.Should().NotBeEmpty().And.HaveCount(1);  				}  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,NotOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\NotOperatorUsageTests.cs,CombiningManyUsingAggregate,The following statement contains a magic number: var lotsOfNots = Enumerable.Range(0' 100).Aggregate(new QueryContainer()' (q' c) => q || Query' q => q);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,NotOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\NotOperatorUsageTests.cs,CombiningManyUsingForeachInitializingWithNull,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,Tests.QueryDsl.BoolDsl.Operators,NotOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\NotOperatorUsageTests.cs,CombiningManyUsingForeachInitializingWithDefault,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,Tests.QueryDsl.BoolDsl.Operators,NotOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\NotOperatorUsageTests.cs,LotsOfNots,The following statement contains a magic number: lotsOfNots.Bool.Should.Should().NotBeEmpty().And.HaveCount(100);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorOnManualBoolsTests.cs,CombindingTwoBools,The following statement contains a magic number: ReturnsBool(  				new BoolQuery { Must = queries' Should = queries }  				|| new BoolQuery { MustNot = queries' Should = queries }  				' q => q.Bool(b => b.Must(c => c.Query()).Should(c => c.Query()))  					|| q.Bool(b => b.MustNot(c => c.Query()).Should(c => c.Query()))  				' b =>  				{  					b.Should.Should().NotBeEmpty().And.HaveCount(2);  					var first = (IQueryContainer)b.Should.First();  					var last = (IQueryContainer)b.Should.Last();  					first.Bool.Should().NotBeNull();  					last.Bool.Should().NotBeNull();    					var firstBool = first.Bool;  					var lastBool = last.Bool;    					firstBool.Should.Should().NotBeEmpty().And.HaveCount(1);  					firstBool.Must.Should().NotBeEmpty().And.HaveCount(1);    					lastBool.Should.Should().NotBeEmpty().And.HaveCount(1);  					lastBool.MustNot.Should().NotBeEmpty().And.HaveCount(1);  				});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorOnManualBoolsTests.cs,OrIntoBoolWithMustAndShould,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Must = queries' Should = queries }' Query  				' q => q.Bool(b => b.Must(c => c.Query()).Should(c => c.Query()))' q => q.Query()  				' l => l.Bool.Should().NotBeNull()  				' r => r.Term.Should().NotBeNull()  				' b => b.Should.Should().NotBeEmpty().And.HaveCount(2)  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorOnManualBoolsTests.cs,OrIntoBoolWithMustAndMustNot,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Must = queries' MustNot = queries }' Query  				' q => q.Bool(b => b.Must(c => c.Query()).MustNot(c => c.Query()))' q => q.Query()  				' l => l.Bool.Should().NotBeNull()  				' r => r.Term.Should().NotBeNull()  				' b => { b.Should.Should().NotBeEmpty().And.HaveCount(2); }  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorOnManualBoolsTests.cs,OrIntoBoolWithMust,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Must = queries }' Query  				' q => q.Bool(b => b.Must(c => c.Query()))' q => q.Query()  				' l => l.Bool.Should().NotBeNull()  				' r => r.Term.Should().NotBeNull()  				' b => { b.Should.Should().NotBeEmpty().And.HaveCount(2); }  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorOnManualBoolsTests.cs,OrIntoBoolWithShould,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Should = queries }' Query  				' q => q.Bool(b => b.Should(c => c.Query()))' q => q.Query()  				' l => l.Term.Should().NotBeNull()  				' r => r.Term.Should().NotBeNull()  				' b => b.Should.Should().NotBeEmpty().And.HaveCount(2)  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorOnManualBoolsTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorOnManualBoolsTests.cs,OrIntoNamedBool,The following statement contains a magic number: CombineBothWays(  				new BoolQuery { Should = queries' Name = "name" }' Query  				' q => q.Bool(b => b.Should(c => c.Query()).Name("name"))' q => q.Query()  				' l =>  				{  					l.Bool.Should().NotBeNull();  					l.Bool.Should.Should().NotBeNullOrEmpty();  					l.Bool.Name.Should().Be("name");  				}  				' r => r.Term.Should().NotBeNull()  				' b => b.Should.Should().NotBeEmpty().And.HaveCount(2)  			);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorUsageTests.cs,Or,The following statement contains a magic number: ReturnsBool(Query || Query' q => q.Query() || q.Query()' b =>  			{  				b.Should.Should().NotBeEmpty().And.HaveCount(2);  				b.Must.Should().BeNull();  				b.MustNot.Should().BeNull();  				b.Filter.Should().BeNull();  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorUsageTests.cs,Or,The following statement contains a magic number: ReturnsBool(Query || Query || ConditionlessQuery' q => q.Query() || q.Query() || q.ConditionlessQuery()' b =>  			{  				b.Should.Should().NotBeEmpty().And.HaveCount(2);  				b.Must.Should().BeNull();  				b.MustNot.Should().BeNull();  				b.Filter.Should().BeNull();  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,OrOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\OrOperatorUsageTests.cs,Or,The following statement contains a magic number: ReturnsBool(Query || Query || ConditionlessQuery' q => q.Query() || q.Query() || q.ConditionlessQuery()' b =>  			{  				b.Should.Should().NotBeEmpty().And.HaveCount(2);  				b.Must.Should().BeNull();  				b.MustNot.Should().BeNull();  				b.Filter.Should().BeNull();  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,UnaryAdd,The following statement contains a magic number: ReturnsBool(+Query && +Query' q => +q.Query() && +q.Query()' b =>  			{  				b.Filter.Should().NotBeEmpty().And.HaveCount(2);  				b.Must.Should().BeNull();  				b.Should.Should().BeNull();  				b.MustNot.Should().BeNull();  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,UnaryAdd,The following statement contains a magic number: ReturnsBool(+Query || +Query || +ConditionlessQuery' q => +q.Query() || +q.Query() || +q.ConditionlessQuery()' b =>  			{  				b.Should.Should().NotBeEmpty().And.HaveCount(2);  				b.Must.Should().BeNull();  				b.MustNot.Should().BeNull();  				b.MustNot.Should().BeNull();  				foreach (IQueryContainer q in b.Should)  				{  					q.Bool.Should().NotBeNull();  					q.Bool.Filter.Should().NotBeEmpty().And.HaveCount(1);  				}  			});
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,CombiningManyUsingAggregate,The following statement contains a magic number: var lotsOfUnaryAdds = Enumerable.Range(0' 100).Aggregate(new QueryContainer()' (q' c) => q && +Query' q => q);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,CombiningManyUsingForeachInitializingWithNull,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,CombiningManyUsingForeachInitializingWithDefault,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,LotsOfUnaryAdds,The following statement contains a magic number: lotsOfUnaryAdds.Bool.Filter.Should().NotBeEmpty().And.HaveCount(100);
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,CombindingManyBoolFiltersUsingOrsShouldFlatten,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,Tests.QueryDsl.BoolDsl.Operators,UnaryAddOperatorUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\BoolDsl\Operators\UnaryAddOperatorUsageTests.cs,CombindingManyBoolFiltersUsingOrsShouldFlatten,The following statement contains a magic number: c.Bool.Should.Should().NotBeEmpty().And.HaveCount(100);
Magic Number,Tests.QueryDsl.Compound.Bool,BoolDslComplexQueryUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Compound\Bool\BoolDslComplexQueryUsageTests.cs,AssertShape,The following statement contains a magic number: container.Bool.Should.Should().HaveCount(2);
Magic Number,Tests.QueryDsl.Compound.Bool,BoolDslComplexQueryUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Compound\Bool\BoolDslComplexQueryUsageTests.cs,AssertShape,The following statement contains a magic number: firstBool.Must.Should().HaveCount(2);
Magic Number,Tests.QueryDsl.Compound.Bool,BoolDslComplexQueryUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Compound\Bool\BoolDslComplexQueryUsageTests.cs,AssertShape,The following statement contains a magic number: secondBool.Must.Should().HaveCount(3);
Magic Number,Tests.QueryDsl.Compound.Bool,BoolDslComplexQueryUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Compound\Bool\BoolDslComplexQueryUsageTests.cs,AssertShape,The following statement contains a magic number: complexNestedBool.Should.Should().HaveCount(3);
Magic Number,Tests.QueryDsl.Compound.Bool,BoolDslComplexQueryUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Compound\Bool\BoolDslComplexQueryUsageTests.cs,AssertShape,The following statement contains a magic number: mustNotsBool.MustNot.Should().HaveCount(2);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoShapeSerializationTestsBase,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoShapeSerializationTests.cs,ExpectResponse,The following statement contains a magic number: response.Documents.Count.Should().Be(10);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoShapeWKTSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoShapeSerializationTests.cs,ExpectResponse,The following statement contains a magic number: i % 2 != 0
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWritePoint,The following statement contains a magic number: point.Coordinates.Latitude.Should().Be(38.897676);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWritePoint,The following statement contains a magic number: point.Coordinates.Longitude.Should().Be(-77.03653);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWritePointWithExponent,The following statement contains a magic number: point.Coordinates.Latitude.Should().Be(-0.000025);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWritePointWithExponent,The following statement contains a magic number: point.Coordinates.Longitude.Should().Be(120);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteMultiPoint,The following statement contains a magic number: firstPoint.Latitude.Should().Be(2);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteMultiPoint,The following statement contains a magic number: firstPoint.Longitude.Should().Be(102);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteMultiPoint,The following statement contains a magic number: lastPoint.Latitude.Should().Be(2);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteMultiPoint,The following statement contains a magic number: lastPoint.Longitude.Should().Be(103);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteLineString,The following statement contains a magic number: lineString.Coordinates.First().Latitude.Should().Be(38.897676);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteLineString,The following statement contains a magic number: lineString.Coordinates.First().Longitude.Should().Be(-77.03653);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteLineString,The following statement contains a magic number: lineString.Coordinates.Last().Latitude.Should().Be(38.889939);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteLineString,The following statement contains a magic number: lineString.Coordinates.Last().Longitude.Should().Be(-77.009051);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiLineString,The following statement contains a magic number: coordinate.Latitude.Should().BeGreaterOrEqualTo(0).And.BeLessOrEqualTo(3);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiLineString,The following statement contains a magic number: coordinate.Longitude.Should().BeGreaterOrEqualTo(100).And.BeLessOrEqualTo(103);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiLineString,The following statement contains a magic number: coordinate.Longitude.Should().BeGreaterOrEqualTo(100).And.BeLessOrEqualTo(103);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiLineString,The following statement contains a magic number: var multLineString = new MultiLineStringGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadPolygon,The following statement contains a magic number: coordinate.Longitude.Should().BeGreaterOrEqualTo(100.0);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WritePolygon,The following statement contains a magic number: var polygon = new PolygonGeoShape(new[]  			{  				new[]  				{  					new GeoCoordinate(2' 102)'  					new GeoCoordinate(2' 103)'  					new GeoCoordinate(3' 103)'  					new GeoCoordinate(3' 102)'  				}'  				new[]  				{  					new GeoCoordinate(0' 100)'  					new GeoCoordinate(0' 101)'  					new GeoCoordinate(1' 101)'  					new GeoCoordinate(1' 100)'  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiPolygon,The following statement contains a magic number: multiPolygon.Coordinates.Should().HaveCount(2);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiPolygon,The following statement contains a magic number: ring.Should().HaveCount(5);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiPolygon,The following statement contains a magic number: coordinate.Latitude.Should().BeLessOrEqualTo(3.0).And.BeGreaterOrEqualTo(0);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiPolygon,The following statement contains a magic number: coordinate.Longitude.Should().BeGreaterOrEqualTo(100.0).And.BeLessOrEqualTo(103.0);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadMultiPolygon,The following statement contains a magic number: coordinate.Longitude.Should().BeGreaterOrEqualTo(100.0).And.BeLessOrEqualTo(103.0);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteMultiPolygon,The following statement contains a magic number: var multiPolygon = new MultiPolygonGeoShape(new[]  			{  				new[]  				{  					new[]  					{  						new GeoCoordinate(2' 102)'  						new GeoCoordinate(2' 103)'  						new GeoCoordinate(3' 103)'  						new GeoCoordinate(3' 102)'  						new GeoCoordinate(2' 102)'  					}  				}'  				new[]  				{  					new[]  					{  						new GeoCoordinate(0' 100)'  						new GeoCoordinate(0' 101)'  						new GeoCoordinate(1' 101)'  						new GeoCoordinate(1' 100)'  						new GeoCoordinate(0' 100)'  					}'  					new[]  					{  						new GeoCoordinate(0.2' 100.2)'  						new GeoCoordinate(0.2' 100.8)'  						new GeoCoordinate(0.8' 100.8)'  						new GeoCoordinate(0.8' 100.2)'  						new GeoCoordinate(0.2' 100.2)'  					}  				}  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteEnvelope,The following statement contains a magic number: envelope.Coordinates.First().Latitude.Should().Be(40.73);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteEnvelope,The following statement contains a magic number: envelope.Coordinates.First().Longitude.Should().Be(-74.1);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteEnvelope,The following statement contains a magic number: envelope.Coordinates.Last().Latitude.Should().Be(40.01);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteEnvelope,The following statement contains a magic number: envelope.Coordinates.Last().Longitude.Should().Be(-71.12);
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteEnvelopeIgnoresZValues,The following statement contains a magic number: var envelope = new EnvelopeGeoShape(new[]  			{  				new GeoCoordinate(40.73' -74.1' 3)'  				new GeoCoordinate(40.01' -71.12' 2)  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteEnvelopeIgnoresZValues,The following statement contains a magic number: var envelope = new EnvelopeGeoShape(new[]  			{  				new GeoCoordinate(40.73' -74.1' 3)'  				new GeoCoordinate(40.01' -71.12' 2)  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteEnvelopeIgnoresZValues,The following statement contains a magic number: var envelope = new EnvelopeGeoShape(new[]  			{  				new GeoCoordinate(40.73' -74.1' 3)'  				new GeoCoordinate(40.01' -71.12' 2)  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteEnvelopeIgnoresZValues,The following statement contains a magic number: var envelope = new EnvelopeGeoShape(new[]  			{  				new GeoCoordinate(40.73' -74.1' 3)'  				new GeoCoordinate(40.01' -71.12' 2)  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteEnvelopeIgnoresZValues,The following statement contains a magic number: var envelope = new EnvelopeGeoShape(new[]  			{  				new GeoCoordinate(40.73' -74.1' 3)'  				new GeoCoordinate(40.01' -71.12' 2)  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,WriteEnvelopeIgnoresZValues,The following statement contains a magic number: var envelope = new EnvelopeGeoShape(new[]  			{  				new GeoCoordinate(40.73' -74.1' 3)'  				new GeoCoordinate(40.01' -71.12' 2)  			});
Magic Number,Tests.QueryDsl.Geo.GeoShape,GeoWKTTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Geo\GeoShape\GeoWKTTests.cs,ReadAndWriteGeometryCollection,The following statement contains a magic number: geometryCollection.Geometries.Should().HaveCount(2);
Magic Number,Tests.QueryDsl.Specialized.Percolate,PercolateMultipleDocumentsQueryUsageTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Specialized\Percolate\PercolateQueryUsageTests.cs,ExpectResponse,The following statement contains a magic number: values.Should().Contain(new[] { 0' 1' 2 });
Magic Number,Tests.QueryDsl.Geo.Shape,ShapeSerializationTestsBase,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Specialized\Shape\ShapeSerializationTests.cs,ExpectResponse,The following statement contains a magic number: response.Documents.Count.Should().Be(10);
Magic Number,Tests.QueryDsl.Geo.Shape,ShapeGeoWKTSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\Specialized\Shape\ShapeSerializationTests.cs,ExpectResponse,The following statement contains a magic number: i % 2 != 0
Magic Number,Tests.QueryDsl.TermLevel.Terms,TermsListOfListIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\TermLevel\Terms\TermsListQueryUsageTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(400);
Magic Number,Tests.QueryDsl.TermLevel.Terms,TermsListOfListStringAgainstNumericFieldIntegrationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\QueryDsl\TermLevel\Terms\TermsListQueryUsageTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError.Status.Should().Be(400);
Magic Number,Tests.Search.MultiSearch,MultiSearchInvalidApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\MultiSearch\MultiSearchInvalidApiTests.cs,AssertInvalidResponse,The following statement contains a magic number: searchResponse.ServerError.Status.Should().Be(404);
Magic Number,Tests.Search.MultiSearch,MultiSearchLowLevelPostDataTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\MultiSearch\MultiSearchLowLevelPostDataTests.cs,AssertResponse,The following statement contains a magic number: responses.Count().Should().Be(4' "{0}"' response.DebugInformation);
Magic Number,Tests.Search.Request,RoyalBase<TRoyal>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,GenerationSeed,The following statement contains a magic number: return seed * 2;
Magic Number,Tests.Search.Request,RoyalBase<TRoyal>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,GenerationSeed,The following statement contains a magic number: return seed * 3;
Magic Number,Tests.Search.Request,RoyalBase<TRoyal>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,GenerationSeed,The following statement contains a magic number: return seed * 4;
Magic Number,Tests.Search.Request,RoyalBase<TRoyal>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,GenerationSeed,The following statement contains a magic number: return seed * 5;
Magic Number,Tests.Search.Request,RoyalSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,Seed,The following statement contains a magic number: var kings = King.Generator.Generate(2)  				.Select(k =>  				{  					var foes = King.Generator.Generate(2)  						.Select(f =>  						{  							f.Join = null;  							return f;  						})  						.ToList();  					k.Foes = foes;  					return k;  				});
Magic Number,Tests.Search.Request,RoyalSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,Seed,The following statement contains a magic number: var kings = King.Generator.Generate(2)  				.Select(k =>  				{  					var foes = King.Generator.Generate(2)  						.Select(f =>  						{  							f.Join = null;  							return f;  						})  						.ToList();  					k.Foes = foes;  					return k;  				});
Magic Number,Tests.Search.Request,RoyalSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,Seed,The following statement contains a magic number: IndexAll(bulk' () => kings' king =>  				IndexAll(bulk' () => Prince.Generator.Generate(2)' king' prince =>  					IndexAll(bulk' () => Duke.Generator.Generate(3)' prince' duke =>  						IndexAll(bulk' () => Earl.Generator.Generate(5)' duke' earl =>  							IndexAll(bulk' () => Baron.Generator.Generate(1)' earl)  						)  					)  				)  			);
Magic Number,Tests.Search.Request,RoyalSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,Seed,The following statement contains a magic number: IndexAll(bulk' () => kings' king =>  				IndexAll(bulk' () => Prince.Generator.Generate(2)' king' prince =>  					IndexAll(bulk' () => Duke.Generator.Generate(3)' prince' duke =>  						IndexAll(bulk' () => Earl.Generator.Generate(5)' duke' earl =>  							IndexAll(bulk' () => Baron.Generator.Generate(1)' earl)  						)  					)  				)  			);
Magic Number,Tests.Search.Request,RoyalSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Request\InnerHitsUsageTests.cs,Seed,The following statement contains a magic number: IndexAll(bulk' () => kings' king =>  				IndexAll(bulk' () => Prince.Generator.Generate(2)' king' prince =>  					IndexAll(bulk' () => Duke.Generator.Generate(3)' prince' duke =>  						IndexAll(bulk' () => Earl.Generator.Generate(5)' duke' earl =>  							IndexAll(bulk' () => Baron.Generator.Generate(1)' earl)  						)  					)  				)  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,StructuredSearch,The following statement contains a magic number: var searchResponse = _client.Search<Project>(s => s  				.Query(q => q  					.DateRange(r => r  						.Field(f => f.StartedOn)  						.GreaterThanOrEquals(new DateTime(2017' 01' 01))  						.LessThan(new DateTime(2018' 01' 01))// <1> Find all the projects that have been started in 2017  					)  				)  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,StructuredSearch,The following statement contains a magic number: var searchResponse = _client.Search<Project>(s => s  				.Query(q => q  					.DateRange(r => r  						.Field(f => f.StartedOn)  						.GreaterThanOrEquals(new DateTime(2017' 01' 01))  						.LessThan(new DateTime(2018' 01' 01))// <1> Find all the projects that have been started in 2017  					)  				)  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,StructuredSearch,The following statement contains a magic number: searchResponse = _client.Search<Project>(s => s  			   .Query(q => q  				   .Bool(b => b  					   .Filter(bf => bf  						   .DateRange(r => r  							   .Field(f => f.StartedOn)  							   .GreaterThanOrEquals(new DateTime(2017' 01' 01))  							   .LessThan(new DateTime(2018' 01' 01))  						   )  					   )  				   )    			   )  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,StructuredSearch,The following statement contains a magic number: searchResponse = _client.Search<Project>(s => s  			   .Query(q => q  				   .Bool(b => b  					   .Filter(bf => bf  						   .DateRange(r => r  							   .Field(f => f.StartedOn)  							   .GreaterThanOrEquals(new DateTime(2017' 01' 01))  							   .LessThan(new DateTime(2018' 01' 01))  						   )  					   )  				   )    			   )  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,BoolQuery,The following statement contains a magic number: var searchResponse = _client.Search<Project>(s => s  				.Query(q => q  					.Bool(b => b  						.Must(mu => mu  							.Match(m => m // <1> match documents where lead developer first name contains Russ  								.Field(f => f.LeadDeveloper.FirstName)  								.Query("Russ")  							)' mu => mu  							.Match(m => m // <2> ...and where the lead developer last name contains Cam  								.Field(f => f.LeadDeveloper.LastName)  								.Query("Cam")  							)  						)  						.Filter(fi => fi  							 .DateRange(r => r  								.Field(f => f.StartedOn)  								.GreaterThanOrEquals(new DateTime(2017' 01' 01))  								.LessThan(new DateTime(2018' 01' 01)) // <3> ...and where the project started in 2017  							)  						)  					)  				)  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,BoolQuery,The following statement contains a magic number: var searchResponse = _client.Search<Project>(s => s  				.Query(q => q  					.Bool(b => b  						.Must(mu => mu  							.Match(m => m // <1> match documents where lead developer first name contains Russ  								.Field(f => f.LeadDeveloper.FirstName)  								.Query("Russ")  							)' mu => mu  							.Match(m => m // <2> ...and where the lead developer last name contains Cam  								.Field(f => f.LeadDeveloper.LastName)  								.Query("Cam")  							)  						)  						.Filter(fi => fi  							 .DateRange(r => r  								.Field(f => f.StartedOn)  								.GreaterThanOrEquals(new DateTime(2017' 01' 01))  								.LessThan(new DateTime(2018' 01' 01)) // <3> ...and where the project started in 2017  							)  						)  					)  				)  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,BoolQuery,The following statement contains a magic number: searchResponse = _client.Search<Project>(s => s  				.Query(q => q  					.Match(m => m  						.Field(f => f.LeadDeveloper.FirstName)  						.Query("Russ")  					) && q // <1> combine queries using the binary `&&` operator  					.Match(m => m  						.Field(f => f.LeadDeveloper.LastName)  						.Query("Cam")  					) && +q // <2> wrap a query in a `bool` query filter clause using the unary `+` operator and combine using the binary `&&` operator  					.DateRange(r => r  						.Field(f => f.StartedOn)  						.GreaterThanOrEquals(new DateTime(2017' 01' 01))  						.LessThan(new DateTime(2018' 01' 01))  					)  				)  			);
Magic Number,Tests.Search,WritingQueries,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\WritingQueries.doc.cs,BoolQuery,The following statement contains a magic number: searchResponse = _client.Search<Project>(s => s  				.Query(q => q  					.Match(m => m  						.Field(f => f.LeadDeveloper.FirstName)  						.Query("Russ")  					) && q // <1> combine queries using the binary `&&` operator  					.Match(m => m  						.Field(f => f.LeadDeveloper.LastName)  						.Query("Cam")  					) && +q // <2> wrap a query in a `bool` query filter clause using the unary `+` operator and combine using the binary `&&` operator  					.DateRange(r => r  						.Field(f => f.StartedOn)  						.GreaterThanOrEquals(new DateTime(2017' 01' 01))  						.LessThan(new DateTime(2018' 01' 01))  					)  				)  			);
Magic Number,Tests.Search.Scroll.Scroll,SlicedScrollSearchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Scroll\Scroll\SlicedScrollSearchApiTests.cs,OnBeforeCall,The following statement contains a magic number: var maxSlices = 2;
Magic Number,Tests.Search.Search,InvalidSearchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Search\InvalidSearchApiTests.cs,ExpectResponse,The following statement contains a magic number: serverError.Status.Should().Be(400);
Magic Number,Tests.Search.Search,CrossClusterSearchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Search\SearchApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Clusters.Total.Should().Be(2);
Magic Number,Tests.Search.Search,SearchUrlTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Search\SearchUrlTests.cs,Urls,The following statement contains a magic number: await POST("/_search?scroll=1m")  					.Request(c => c.Search<Project>(new SearchRequest { Scroll = TimeSpan.FromMinutes(1) }))  					.RequestAsync(c => c.SearchAsync<Project>(new SearchRequest { Scroll = 60000 }))  				;
Magic Number,Tests.XPack.License.GetLicense,GetLicenseApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\License\GetLicense\GetLicenseApiTests.cs,ExpectResponse,The following statement contains a magic number: l.ExpiryDate.Should().BeAfter(DateTime.UtcNow.AddYears(-2));
Magic Number,Tests.XPack.License.GetLicense,GetLicenseApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\License\GetLicense\GetLicenseApiTests.cs,ExpectResponse,The following statement contains a magic number: l.IssueDate.Should().BeAfter(DateTime.UtcNow.AddYears(-30));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,GetScheduledEvents,The following statement contains a magic number: i < 10
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PostJobData,The following statement contains a magic number: var timestamp = 1483228800000L;
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PostJobData,The following statement contains a magic number: i % 1000 == 0
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,PostJobData,The following statement contains a magic number: timestamp += bucketSpanSeconds * 1000;
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexSnapshot,The following statement contains a magic number: var unixTimestamp = (int)DateTime.Parse(timestamp).Subtract(new DateTime(1970' 1' 1)).TotalSeconds;
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexSnapshot,The following statement contains a magic number: client.Index<object>(new  			{  				job_id = jobId'  				snapshot_id = snapshotId'  				timestamp = timestamp'  				description = snapshotId + " description"'  				latest_record_time_stamp = timestamp'  				latest_result_time_stamp = timestamp'  				snapshot_doc_count = 1'  				model_size_stats = new  				{  					job_id = jobId'  					model_bytes = 20'  					log_time = timestamp  				}'  				quantiles = new  				{  					job_id = jobId'  					timestamp = unixTimestamp'  					quantile_state = "quantiles-2"  				}  			}' i => i.Id(jobId + "_model_snapshot_" + snapshotId)  				.Index(".ml-anomalies-" + jobId)  				.Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					forecast_id =  forecastId'  					result_type =  "model_forecast"'  					bucket_span =  1800'  					detector_index =  0'  					timestamp =  1486591300000'  					model_feature =  "'arithmetic mean value by person'"'  					forecast_lower =  5440.502250736747'  					forecast_upper =  6294.296972680027'  					forecast_prediction =  5867.399611708387  				}  				' i => i.Id($"{jobId}_model_forecast_{forecastId}_1486591300000_1800_0_961_0").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					forecast_id =  forecastId'  					result_type =  "model_forecast"'  					bucket_span =  1800'  					detector_index =  0'  					timestamp =  1486591300000'  					model_feature =  "'arithmetic mean value by person'"'  					forecast_lower =  5440.502250736747'  					forecast_upper =  6294.296972680027'  					forecast_prediction =  5867.399611708387  				}  				' i => i.Id($"{jobId}_model_forecast_{forecastId}_1486591300000_1800_0_961_0").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					forecast_id =  forecastId'  					result_type =  "model_forecast"'  					bucket_span =  1800'  					detector_index =  0'  					timestamp =  1486591300000'  					model_feature =  "'arithmetic mean value by person'"'  					forecast_lower =  5440.502250736747'  					forecast_upper =  6294.296972680027'  					forecast_prediction =  5867.399611708387  				}  				' i => i.Id($"{jobId}_model_forecast_{forecastId}_1486591300000_1800_0_961_0").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					forecast_id =  forecastId'  					result_type =  "model_forecast"'  					bucket_span =  1800'  					detector_index =  0'  					timestamp =  1486591300000'  					model_feature =  "'arithmetic mean value by person'"'  					forecast_lower =  5440.502250736747'  					forecast_upper =  6294.296972680027'  					forecast_prediction =  5867.399611708387  				}  				' i => i.Id($"{jobId}_model_forecast_{forecastId}_1486591300000_1800_0_961_0").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					forecast_id =  forecastId'  					result_type =  "model_forecast"'  					bucket_span =  1800'  					detector_index =  0'  					timestamp =  1486591300000'  					model_feature =  "'arithmetic mean value by person'"'  					forecast_lower =  5440.502250736747'  					forecast_upper =  6294.296972680027'  					forecast_prediction =  5867.399611708387  				}  				' i => i.Id($"{jobId}_model_forecast_{forecastId}_1486591300000_1800_0_961_0").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningIntegrationTestBase<TResponse;TInterface;TDescriptor;TInitializer>,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningIntegrationTestBase.cs,IndexForecast,The following statement contains a magic number: client.Index<object>(new  				{  					job_id =  jobId'  					result_type =  "model_forecast_request_stats"'  					forecast_id =  forecastId'  					processed_record_count =  48'  					forecast_messages =  new object[0]'  					timestamp =  1486575000000'  					forecast_start_timestamp =  1486575000000'  					forecast_end_timestamp =  1486661400000'  					forecast_create_timestamp =  1535721789000'  					forecast_expiry_timestamp =  1536931389000'  					forecast_progress =  1'  					processing_time_ms =  3'  					forecast_memory_bytes =  7034'  					forecast_status =  "finished"  				}  				' i => i.Id($"{jobId}_model_forecast_request_stats_{forecastId}").Index(".ml-anomalies-shared").Refresh(Refresh.WaitFor));
Magic Number,Tests.XPack.MachineLearning,MachineLearningSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningSeeder.cs,SeedIndexData,The following statement contains a magic number: Enumerable.Range(1' 4)  				.ToList()  				.ForEach(i =>  				{  					var metricsFile = Path.Combine(folder' $"server-metrics_{i}.json");    					// TODO: Remove metric type from server-metrics files. Remove this when example is patched for 7.x  					var fileContents = File.ReadAllText(metricsFile);  					fileContents = fileContents.Replace("'\"_type\":\"metric\"'"' "'");    					var bulkResponse = Client.LowLevel.Bulk<BulkResponse>(  						fileContents'  						new BulkRequestParameters  						{  							RequestConfiguration = new RequestConfiguration  							{  								RequestTimeout = TimeSpan.FromMinutes(3)  							}  						});    					if (!bulkResponse.ApiCall.Success || !bulkResponse.IsValid)  					{  						// only use the Audit trail as failed bulk items will be YUGE  						var sb = new StringBuilder();  						ResponseStatics.DebugAuditTrail(bulkResponse.ApiCall.AuditTrail' sb);  						throw new Exception($"Problem seeding server-metrics data for machine learning: {sb}");  					}    					Console.WriteLine($"Indexed docs from {metricsFile}");  				});
Magic Number,Tests.XPack.MachineLearning,MachineLearningSeeder,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningSeeder.cs,SeedIndexData,The following statement contains a magic number: Enumerable.Range(1' 4)  				.ToList()  				.ForEach(i =>  				{  					var metricsFile = Path.Combine(folder' $"server-metrics_{i}.json");    					// TODO: Remove metric type from server-metrics files. Remove this when example is patched for 7.x  					var fileContents = File.ReadAllText(metricsFile);  					fileContents = fileContents.Replace("'\"_type\":\"metric\"'"' "'");    					var bulkResponse = Client.LowLevel.Bulk<BulkResponse>(  						fileContents'  						new BulkRequestParameters  						{  							RequestConfiguration = new RequestConfiguration  							{  								RequestTimeout = TimeSpan.FromMinutes(3)  							}  						});    					if (!bulkResponse.ApiCall.Success || !bulkResponse.IsValid)  					{  						// only use the Audit trail as failed bulk items will be YUGE  						var sb = new StringBuilder();  						ResponseStatics.DebugAuditTrail(bulkResponse.ApiCall.AuditTrail' sb);  						throw new Exception($"Problem seeding server-metrics data for machine learning: {sb}");  					}    					Console.WriteLine($"Indexed docs from {metricsFile}");  				});
Magic Number,Tests.XPack.MachineLearning.ForecastJob,ForecastJobApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\ForecastJob\ForecastJobApiTests.cs,IntegrationSetup,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Tests.XPack.MachineLearning.ForecastJob,ForecastJobApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\ForecastJob\ForecastJobApiTests.cs,IntegrationSetup,The following statement contains a magic number: var timestamp = now - 50 * BucketSpanSeconds;
Magic Number,Tests.XPack.MachineLearning.ForecastJob,ForecastJobApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\ForecastJob\ForecastJobApiTests.cs,IntegrationSetup,The following statement contains a magic number: var data = new List<object>(50);
Magic Number,Tests.XPack.MachineLearning.ForecastJob,ForecastJobApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\ForecastJob\ForecastJobApiTests.cs,IntegrationSetup,The following statement contains a magic number: data.AddRange(new[]  					{  						new { time = timestamp' value = 10d }'  						new { time = timestamp' value = 30d }  					});
Magic Number,Tests.XPack.MachineLearning.ForecastJob,ForecastJobApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\ForecastJob\ForecastJobApiTests.cs,IntegrationSetup,The following statement contains a magic number: data.AddRange(new[]  					{  						new { time = timestamp' value = 10d }'  						new { time = timestamp' value = 30d }  					});
Magic Number,Tests.XPack.MachineLearning.GetAnomalyRecords,GetAnomalyRecordsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetAnomalyRecords\GetAnomalyRecordsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexAnomalyRecord(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetAnomalyRecords,GetAnomalyRecordsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetAnomalyRecords\GetAnomalyRecordsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexAnomalyRecord(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetAnomalyRecords,GetAnomalyRecordsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetAnomalyRecords\GetAnomalyRecordsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexAnomalyRecord(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetAnomalyRecords,GetAnomalyRecordsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetAnomalyRecords\GetAnomalyRecordsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Records.First().RecordScore.Should().Be(80);
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexBucket(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexBucket(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexBucket(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,ExpectResponse,The following statement contains a magic number: bucket.AnomalyScore.Should().Be(90);
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsWithTimestampApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexBucket(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsWithTimestampApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexBucket(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsWithTimestampApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexBucket(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetBuckets,GetBucketsWithTimestampApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetBuckets\GetBucketsApiTests.cs,ExpectResponse,The following statement contains a magic number: bucket.AnomalyScore.Should().Be(90);
Magic Number,Tests.XPack.MachineLearning.GetCalendarEvents,GetCalendarEventsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetCalendarEvents\GetCalendarEventsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Count.Should().Be(10);
Magic Number,Tests.XPack.MachineLearning.GetCalendarEvents,GetCalendarEventsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetCalendarEvents\GetCalendarEventsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Events.Count().Should().Be(10);
Magic Number,Tests.XPack.MachineLearning.GetCalendars,GetCalendarsPagingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetCalendars\GetCalendarsApiTests.cs,IntegrationSetup,The following statement contains a magic number: i < 20
Magic Number,Tests.XPack.MachineLearning.GetDatafeeds,GetDatafeedsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetDatafeeds\GetDatafeedsApiTests.cs,ExpectResponse,The following statement contains a magic number: firstDatafeed.ScrollSize.Should().Be(1000);
Magic Number,Tests.XPack.MachineLearning.GetDatafeeds,GetDatafeedsWithDatafeedIdApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetDatafeeds\GetDatafeedsApiTests.cs,ExpectResponse,The following statement contains a magic number: firstDatafeed.ScrollSize.Should().Be(1000);
Magic Number,Tests.XPack.MachineLearning.GetFilters,GetFiltersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetFilters\GetFiltersApiTests.cs,ExpectResponse,The following statement contains a magic number: filter.Items.Should().NotBeNull()  				.And.HaveCount(2)  				.And.Contain("*.google.com")  				.And.Contain("wikipedia.org");
Magic Number,Tests.XPack.MachineLearning.GetFilters,GetFiltersPagingApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetFilters\GetFiltersApiTests.cs,ExpectResponse,The following statement contains a magic number: filter.Items.Should().NotBeNull()  				.And.HaveCount(2)  				.And.Contain("*.google.com")  				.And.Contain("wikipedia.org");
Magic Number,Tests.XPack.MachineLearning.GetInfluencers,GetInfluencersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetInfluencers\GetInfluencersApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexInfluencer(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetInfluencers,GetInfluencersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetInfluencers\GetInfluencersApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexInfluencer(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetInfluencers,GetInfluencersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetInfluencers\GetInfluencersApiTests.cs,IntegrationSetup,The following statement contains a magic number: IndexInfluencer(client' callUniqueValue.Value' new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetInfluencers,GetInfluencersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetInfluencers\GetInfluencersApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Influencers.First().InfluencerScore.Should().Be(50);
Magic Number,Tests.XPack.MachineLearning.GetInfluencers,GetInfluencersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetInfluencers\GetInfluencersApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Influencers.First().Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetInfluencers,GetInfluencersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetInfluencers\GetInfluencersApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Influencers.First().Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetInfluencers,GetInfluencersApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetInfluencers\GetInfluencersApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Influencers.First().Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetJobStats,GetJobStatsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetJobStats\GetJobStatsApiTests.cs,ExpectResponse,The following statement contains a magic number: firstJob.ModelSizeStats.LogTime.Should().BeAfter(new DateTime(2017' 9' 1));
Magic Number,Tests.XPack.MachineLearning.GetJobStats,GetJobStatsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetJobStats\GetJobStatsApiTests.cs,ExpectResponse,The following statement contains a magic number: firstJob.ModelSizeStats.LogTime.Should().BeAfter(new DateTime(2017' 9' 1));
Magic Number,Tests.XPack.MachineLearning.GetJobStats,GetJobStatsWithJobIdApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetJobStats\GetJobStatsApiTests.cs,ExpectResponse,The following statement contains a magic number: firstJob.ModelSizeStats.LogTime.Should().BeAfter(new DateTime(2017' 9' 1));
Magic Number,Tests.XPack.MachineLearning.GetJobStats,GetJobStatsWithJobIdApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetJobStats\GetJobStatsApiTests.cs,ExpectResponse,The following statement contains a magic number: firstJob.ModelSizeStats.LogTime.Should().BeAfter(new DateTime(2017' 9' 1));
Magic Number,Tests.XPack.MachineLearning.GetModelSnapshots,GetModelSnapshotsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetModelSnapshots\GetModelSnapshotsApiTests.cs,ExpectResponse,The following statement contains a magic number: modelSnapshot.Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetModelSnapshots,GetModelSnapshotsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetModelSnapshots\GetModelSnapshotsApiTests.cs,ExpectResponse,The following statement contains a magic number: modelSnapshot.Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetModelSnapshots,GetModelSnapshotsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetModelSnapshots\GetModelSnapshotsApiTests.cs,ExpectResponse,The following statement contains a magic number: modelSnapshot.Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetModelSnapshots,GetModelSnapshotsWithSnapshotIdApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetModelSnapshots\GetModelSnapshotsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ModelSnapshots.First().Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetModelSnapshots,GetModelSnapshotsWithSnapshotIdApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetModelSnapshots\GetModelSnapshotsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ModelSnapshots.First().Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.GetModelSnapshots,GetModelSnapshotsWithSnapshotIdApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\GetModelSnapshots\GetModelSnapshotsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ModelSnapshots.First().Timestamp.Should().Be(new DateTimeOffset(2016' 6' 2' 00' 00' 00' TimeSpan.Zero));
Magic Number,Tests.XPack.MachineLearning.MachineLearningInfo,MachineLearningInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningInfo\MachineLearningInfoApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Defaults.AnomalyDetectors.CategorizationExamplesLimit.Should().Be(4);
Magic Number,Tests.XPack.MachineLearning.MachineLearningInfo,MachineLearningInfoApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\MachineLearningInfo\MachineLearningInfoApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Defaults.Datafeeds.ScrollSize.Should().Be(1000);
Magic Number,Tests.XPack.MachineLearning.PostCalendarEvents,PostCalendarEventsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PostCalendarEvents\PostCalendarEventsApiTests.cs,GetScheduledJsonEvents,The following statement contains a magic number: i < 10
Magic Number,Tests.XPack.MachineLearning.PostCalendarEvents,PostCalendarEventsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PostCalendarEvents\PostCalendarEventsApiTests.cs,GetScheduledEvents,The following statement contains a magic number: i < 10
Magic Number,Tests.XPack.MachineLearning.PostCalendarEvents,PostCalendarEventsApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PostCalendarEvents\PostCalendarEventsApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Events.Count().Should().Be(10);
Magic Number,Tests.XPack.MachineLearning.PostJobData,PostJobDataApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PostJobData\PostJobDataApiTests.cs,ExpectResponse,The following statement contains a magic number: response.InputFieldCount.Should().Be(6);
Magic Number,Tests.XPack.MachineLearning.PostJobData,PostJobDataWithResetStartAndResetEndApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PostJobData\PostJobDataApiTests.cs,ExpectResponse,The following statement contains a magic number: response.InputFieldCount.Should().Be(6);
Magic Number,Tests.XPack.MachineLearning.PostJobData,PostJobDataWithResetStartAndResetEndApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PostJobData\PostJobDataApiTests.cs,ExpectResponse,The following statement contains a magic number: response.LastDataTime.Should().BeAfter(new DateTime(2017' 9' 1));
Magic Number,Tests.XPack.MachineLearning.PostJobData,PostJobDataWithResetStartAndResetEndApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PostJobData\PostJobDataApiTests.cs,ExpectResponse,The following statement contains a magic number: response.LastDataTime.Should().BeAfter(new DateTime(2017' 9' 1));
Magic Number,Tests.XPack.MachineLearning.PutDatafeed,PutDatafeedApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PutDatafeed\PutDatafeedApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ScrollSize.Should().Be(1000);
Magic Number,Tests.XPack.MachineLearning.PutFilter,PutFilterApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PutFilter\PutFilterApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Items.Should().NotBeNull()  				.And.HaveCount(2)  				.And.Contain("*.google.com")  				.And.Contain("wikipedia.org");
Magic Number,Tests.XPack.MachineLearning.PutJob,PutJobWithCustomRulesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PutJob\PutJobApiTests.cs,ExpectResponse,The following statement contains a magic number: customRule.Scope.Should().NotBeNull().And.HaveCount(3);
Magic Number,Tests.XPack.MachineLearning.PutJob,PutJobWithCustomRulesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\PutJob\PutJobApiTests.cs,ExpectResponse,The following statement contains a magic number: customRule.Conditions.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.XPack.MachineLearning.RevertModelSnapshot,RevertModelSnapshotApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\RevertModelSnapshot\RevertModelSnapshotApiTests.cs,IntegrationSetup,The following statement contains a magic number: client.MachineLearning.GetModelSnapshots(callUniqueValue.Value).Count.Should().Be(2);
Magic Number,Tests.XPack.MachineLearning.UpdateDatafeed,UpdateDatafeedApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\UpdateDatafeed\UpdateDatafeedApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ScrollSize.Should().Be(1000);
Magic Number,Tests.XPack.MachineLearning.UpdateFilter,UpdateFilterApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\MachineLearning\UpdateFilter\UpdateFilterApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Items.Should().NotBeNull()  				.And.HaveCount(2)  				.And.Contain("*.microsoft.com")  				.And.Contain("wikipedia.org");
Magic Number,Tests.XPack.Rollup,RollupJobCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Rollup\RollupJobCrudTests.cs,WaitForFinish,The following statement contains a magic number: var tasks = new List<Task<GetRollupJobResponse>>(4);
Magic Number,Tests.XPack.Rollup,RollupJobCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Rollup\RollupJobCrudTests.cs,WaitForFinish,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Tests.XPack.Rollup,RollupJobCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Rollup\RollupJobCrudTests.cs,ExpectAfterCreate,The following statement contains a magic number: j.Config.PageSize.Should().Be(1000);
Magic Number,Tests.XPack.Rollup,RollupJobCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Rollup\RollupJobCrudTests.cs,ExpectAfterCreate,The following statement contains a magic number: j.Config.Groups.Histogram.Interval.Should().NotBeNull().And.Be(5);
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingCrudTests.cs,ExpectAfterCreate,The following statement contains a magic number: mapping.Metadata.Should().HaveCount(2).And.ContainKeys("x"' "z");
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingCrudTests.cs,ExpectAfterUpdate,The following statement contains a magic number: mapping.Metadata.Should().HaveCount(2).And.ContainKeys("x"' "z");
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingRulesTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingRules.doc.cs,RulesConjunction,The following statement contains a magic number: allRule.All.Should().NotBeEmpty().And.HaveCount(3);
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingRulesTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingRules.doc.cs,RulesConjunction,The following statement contains a magic number: i<10
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingRulesTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingRules.doc.cs,RulesConjunction,The following statement contains a magic number: allRule.All.Should().NotBeEmpty().And.HaveCount(10);
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingRulesTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingRules.doc.cs,RulesDisjunction,The following statement contains a magic number: anyRule.Any.Should().NotBeEmpty().And.HaveCount(3);
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingRulesTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingRules.doc.cs,RulesDisjunction,The following statement contains a magic number: i<10
Magic Number,Tests.XPack.Security.RoleMapping,RoleMappingRulesTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\RoleMapping\RoleMappingRules.doc.cs,RulesDisjunction,The following statement contains a magic number: anyRule.Any.Should().NotBeEmpty().And.HaveCount(10);
Magic Number,Tests.XPack.Security.Role,RoleCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\Role\RoleCrudTests.cs,ExpectAfterCreate,The following statement contains a magic number: indexPrivilege.FieldSecurity.Grant.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.XPack.Security.Role,RoleCrudTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Security\Role\RoleCrudTests.cs,ExpectAfterUpdate,The following statement contains a magic number: indexPrivilege.FieldSecurity.Grant.Should().NotBeNull().And.HaveCount(2);
Magic Number,Tests.XPack.Sql.ClearSqlCursor,ClearSqlCursorApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Sql\ClearSqlCursor\ClearSqlCursorApiTests.cs,OnBeforeCall,The following statement contains a magic number: var sqlQueryResponse = Client.Sql.Query(q => q.Query(SqlQuery).FetchSize(5));
Magic Number,Tests.XPack.Sql.QuerySql,QuerySqlApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Sql\QuerySql\QuerySqlApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Columns.Should().NotBeNullOrEmpty().And.HaveCount(4);
Magic Number,Tests.XPack.Sql.QuerySql,QuerySqlApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Sql\QuerySql\QuerySqlApiTests.cs,ExpectResponse,The following statement contains a magic number: r.Should().NotBeNull().And.HaveCount(4);
Magic Number,Tests.XPack.Sql.QuerySql,QuerySqlApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Sql\QuerySql\QuerySqlApiTests.cs,ExpectResponse,The following statement contains a magic number: var date = r[2].As<DateTime>().Should().BeAfter(default(DateTime));
Magic Number,Tests.XPack.Sql.QuerySql,QuerySqlApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Sql\QuerySql\QuerySqlApiTests.cs,ExpectResponse,The following statement contains a magic number: var numberOfCommits = r[3].As<int?>();
Magic Number,Tests.XPack.Sql.TranslateSql,TranslateSqlApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Sql\TranslateSql\TranslateSqlQueryApiTests.cs,ExpectResponse,The following statement contains a magic number: search.Size.Should().HaveValue().And.Be(5);
Magic Number,Tests.XPack.Ssl.GetCertificates,GetCertificatesApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Ssl\GetCertificates\GetCertificatesApiTests.cs,ExpectResponse,The following statement contains a magic number: c.Expiry.Should().BeAfter(DateTime.UtcNow.AddYears(-2));
Magic Number,Tests.XPack.Watcher.AcknowledgeWatch,AcknowledgeWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\AcknowledgeWatch\AcknowledgeWatchApiTests.cs,IntegrationSetup,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(watchId' p => p  					.Input(i => i  						.Simple(s => s  							.Add("payload"' new { send = "yes" })  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Hourly(h => h  								.Minute(0' 5)  							)  						)  					)  					.Condition(co => co  						.Always()  					)  					.Actions(a => a  						.Index("test_index"' i => i  							.ThrottlePeriod("15m")  							.Index("test-" + CallIsolatedValue)  						)  					)  				);
Magic Number,Tests.XPack.Watcher.ActivateWatch,ActivateWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\ActivateWatch\ActivateWatchApiTests.cs,IntegrationSetup,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Active(false)  					.Input(i => i  						.Http(h => h  							.Request(r => r  								.Scheme(ConnectionScheme.Https)  								.Host("localhost")  								.Port(8080)  								.Method(HttpInputMethod.Get)  							)  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Yearly(y => y  								.Add(ty => ty  									.In(Month.January' Month.December)  									.On(1)  									.At("noon")  								)  							)  						)  					)  					.Actions(a => a  						.Logging("test_logging"' l => l  							.ThrottlePeriod("15m")  							.Level(LogLevel.Debug)  							.Category("Test")  							.Text("Logging action test")  						)  					)  				);
Magic Number,Tests.XPack.Watcher.DeactivateWatch,DeactivateWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\DeactivateWatch\DeactivateWatchApiTests.cs,IntegrationSetup,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Active()  					.Input(i => i  						.Search(s => s  							.Request(si => si  								.Indices("_all")  								.Body<object>(sd => sd  									.MatchAll()  								)  							)  						)  					)  					.Condition(c => c  						.Never()  					)  					.Trigger(t => t  						.Schedule(s => s  							.Monthly(m => m  								.Add(ti => ti  									.On(1)  									.At("16:10")  								)  							)  						)  					)  					.Actions(a => a  						.Webhook("test_webhook"' w => w  							.ThrottlePeriod("15m")  							.Host("localhost")  							.Port(8080)  						)  					)  				);
Magic Number,Tests.XPack.Watcher.DeleteWatch,DeleteWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\DeleteWatch\DeleteWatchApiTests.cs,ExpectResponse,The following statement contains a magic number: response.Version.Should().Be(2);
Magic Number,Tests.XPack.Watcher.DeleteWatch,DeleteNonExistentWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\DeleteWatch\DeleteWatchApiTests.cs,ExpectResponse,The following statement contains a magic number: response.ServerError?.Status == 404
Magic Number,Tests.XPack.Watcher.ExecuteWatch,ExecuteWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\ExecuteWatch\ExecuteWatchApiTests.cs,IntegrationSetup,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Input(i => i  						.Search(s => s  							.Request(r => r  								.Indices("logstash")  								.Body<object>(b => b  									.Query(q => q  											.Match(m => m  												.Field("response")  												.Query("404")  											) && +q  											.DateRange(ffrr => ffrr  												.Field("@timestamp")  												.GreaterThanOrEquals("{{ctx.trigger.scheduled_time}}||-5m")  												.LessThanOrEquals("{{ctx.trigger.triggered_time}}")  											)  									)  								)  							)  						)  					)  					.Condition(c => c  						.Script(ss => ss  							.Source("ctx.payload.hits.total > 1")  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Cron("0 0 0 1 * ? 2099")  						)  					)  					.Metadata(meta => meta.Add("foo"' "bar"))  					.Actions(a => a  						.Email("email_admin"' e => e  							.To("someone@domain.host.com")  							.Subject("404 recently encountered")  						)  						.Index("index_action"' i => i  							.Index("test")  						)  						.Logging("logging_action"' l => l  							.Text("404 recently encountered")  						)  						.Webhook("webhook_action"' w => w  							.Host("foo.com")  							.Port(80)  							.Path("/bar")  							.Method(HttpInputMethod.Post)  							.Body("{}")  						)  						.PagerDuty("pagerduty_action"' pd => pd  							.Account("my_pagerduty_account")  							.Description("pager duty description")  							.AttachPayload()  							.EventType(PagerDutyEventType.Trigger)  							.IncidentKey("incident_key")  							.Context(c => c  								.Context(PagerDutyContextType.Image' cd => cd  									.Src("http://example.com/image")  								)  								.Context(PagerDutyContextType.Link' cd => cd  									.Href("http://example.com/link")  								)  							)  						)  						.Slack("slack_action"' sl => sl  							.Account("monitoring")  							.Message(sm => sm  								.From("nest integration test")  								.To("#nest")  								.Text("slack message")  								.Attachments(sa => sa  									.Attachment(saa => saa  										.Title("Attachment 1")  										.AuthorName("Russ Cam")  									)  								)  							)  						)  					)  				);
Magic Number,Tests.XPack.Watcher.ExecuteWatch,ExecuteWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\ExecuteWatch\ExecuteWatchApiTests.cs,ExpectResponse,The following statement contains a magic number: resultActions.Count.Should().Be(6);
Magic Number,Tests.XPack.Watcher.ExecuteWatch,ExecuteInlineWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\ExecuteWatch\ExecuteWatchApiTests.cs,IntegrationSetup,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Input(i => i  						.Search(s => s  							.Request(r => r  								.Indices("logstash")  								.Body<object>(b => b  									.Query(q => q  											.Match(m => m  												.Field("response")  												.Query("404")  											) && +q  											.DateRange(ffrr => ffrr  												.Field("@timestamp")  												.GreaterThanOrEquals("{{ctx.trigger.scheduled_time}}||-5m")  												.LessThanOrEquals("{{ctx.trigger.triggered_time}}")  											)  									)  								)  							)  						)  					)  					.Condition(c => c  						.Script(ss => ss  							.Source("ctx.payload.hits.total > 1")  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Cron("0 0 0 1 * ? 2099")  						)  					)  					.Metadata(meta => meta.Add("foo"' "bar"))  					.Actions(a => a  						.Email("email_admin"' e => e  							.To("someone@domain.host.com")  							.Subject("404 recently encountered")  						)  						.Index("index_action"' i => i  							.Index("test")  						)  						.Logging("logging_action"' l => l  							.Text("404 recently encountered")  						)  						.Webhook("webhook_action"' w => w  							.Host("foo.com")  							.Port(80)  							.Path("/bar")  							.Method(HttpInputMethod.Post)  							.Body("{}")  						)  					)  				);
Magic Number,Tests.XPack.Watcher.GetWatch,GetWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\GetWatch\GetWatchApiTests.cs,PutWatch,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Input(i => i  						.Chain(c => c  							.Input("simple"' ci => ci  								.Simple(s => s  									.Add("str"' "val1")  									.Add("num"' 23)  									.Add("obj"' new { str = "val2" })  								)  							)  							.Input("http"' ci => ci  								.Http(h => h  									.Request(r => r  										.Host("localhost")  										.Port(8080)  										.Method(HttpInputMethod.Post)  										.Path("/path.html")  										.Proxy(pr => pr  											.Host("proxy")  											.Port(6000)  										)  										.Scheme(ConnectionScheme.Https)  										.Authentication(a => a  											.Basic(b => b  												.Username("Username123")  												.Password("Password123")  											)  										)  										.Body(  											"{\"query\" : {\"range\": {\"@timestamp\" : {\"from\": \"{{ctx.trigger.triggered_time}}||-5m\"'\"to\": \"{{ctx.trigger.triggered_time}}\"}}}}")  										.Headers(he => he  											.Add("header1"' "value1")  										)  										.Params(pa => pa  											.Add("lat"' "52.374031")  											.Add("lon"' "4.88969")  											.Add("appid"' "appid")  										)  										.ConnectionTimeout("3s")  										.ReadTimeout(TimeSpan.FromMilliseconds(500))  									)  									.ResponseContentType(ResponseContentType.Text)  								)  							)  							.Input("search"' ci => ci  								.Search(s => s  									.Request(si => si  										.Indices<Project>()  										.Body<Project>(b => b  											.Size(0)  											.Aggregations(a => a  												.Nested("nested_tags"' n => n  													.Path(np => np.Tags)  													.Aggregations(aa => aa  														.Terms("top_project_tags"' ta => ta  															.Field(f => f.Tags.First().Name)  														)  													)  												)  											)  										)  									)  								)  							)  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Cron("0 5 9 * * ?")  						)  					)  					.Transform(tr => tr  						.Chain(ct => ct  							.Transform(ctt => ctt  								.Search(st => st  									.Request(str => str  										.Indices(typeof(Project))  										.SearchType(SearchType.DfsQueryThenFetch)  										.IndicesOptions(io => io  											.ExpandWildcards(ExpandWildcards.Open)  											.IgnoreUnavailable()  										)  										.Body<Project>(b => b  											.Query(q => q  												.Match(m => m  													.Field("state")  													.Query(StateOfBeing.Stable.ToString().ToLowerInvariant())  												)  											)  										)  									)  									.Timeout("10s")  								)  							)  							.Transform(ctt => ctt  								.Script(st => st  									.Source("return [ 'time' : ctx.trigger.scheduled_time ]")  								)  							)  						)  					)  					.Actions(a => a  						.Email("reminder_email"' e => e  							.To("me@example.com")  							.Subject("Something's strange in the neighbourhood")  							.Body(b => b  								.Text("Dear {{ctx.payload.name}}' by the time you read these lines' I'll be gone")  							)  							.Attachments(ea => ea  								.HttpAttachment("http_attachment"' ha => ha  									.Inline()  									.ContentType(RequestData.MimeType)  									.Request(r => r  										.Url("http://localhost:8080/http_attachment")  									)  								)  								.DataAttachment("data_attachment"' da => da  									.Format(DataAttachmentFormat.Json)  								)  							)  						)  						.Index("reminder_index"' i => i  							.Index("put-watch-test-index")  							.ExecutionTimeField("execution_time")  						)  						.PagerDuty("reminder_pagerduty"' pd => pd  							.Account("my_pagerduty_account")  							.Description("pager duty description")  							.AttachPayload()  							.EventType(PagerDutyEventType.Trigger)  							.IncidentKey("incident_key")  							.Context(c => c  								.Context(PagerDutyContextType.Image' cd => cd  									.Src("http://example.com/image")  								)  								.Context(PagerDutyContextType.Link' cd => cd  									.Href("http://example.com/link")  								)  							)  						)  						.Slack("reminder_slack"' sl => sl  							.Account("monitoring")  							.Message(sm => sm  								.From("nest integration test")  								.To("#nest")  								.Text("slack message")  								.Attachments(sa => sa  									.Attachment(saa => saa  										.Title("Attachment 1")  										.AuthorName("Russ Cam")  									)  								)  							)  						)  						.Webhook("webhook"' w => w  							.Scheme(ConnectionScheme.Https)  							.Host("localhost")  							.Port(9200)  							.Method(HttpInputMethod.Post)  							.Path("/_bulk")  							.Authentication(au => au  								.Basic(b => b  									.Username("username")  									.Password("password")  								)  							)  							.Body("{{ctx.payload._value}}")  						)  					)  				);
Magic Number,Tests.XPack.Watcher.GetWatch,GetWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\GetWatch\GetWatchApiTests.cs,PutWatch,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Input(i => i  						.Chain(c => c  							.Input("simple"' ci => ci  								.Simple(s => s  									.Add("str"' "val1")  									.Add("num"' 23)  									.Add("obj"' new { str = "val2" })  								)  							)  							.Input("http"' ci => ci  								.Http(h => h  									.Request(r => r  										.Host("localhost")  										.Port(8080)  										.Method(HttpInputMethod.Post)  										.Path("/path.html")  										.Proxy(pr => pr  											.Host("proxy")  											.Port(6000)  										)  										.Scheme(ConnectionScheme.Https)  										.Authentication(a => a  											.Basic(b => b  												.Username("Username123")  												.Password("Password123")  											)  										)  										.Body(  											"{\"query\" : {\"range\": {\"@timestamp\" : {\"from\": \"{{ctx.trigger.triggered_time}}||-5m\"'\"to\": \"{{ctx.trigger.triggered_time}}\"}}}}")  										.Headers(he => he  											.Add("header1"' "value1")  										)  										.Params(pa => pa  											.Add("lat"' "52.374031")  											.Add("lon"' "4.88969")  											.Add("appid"' "appid")  										)  										.ConnectionTimeout("3s")  										.ReadTimeout(TimeSpan.FromMilliseconds(500))  									)  									.ResponseContentType(ResponseContentType.Text)  								)  							)  							.Input("search"' ci => ci  								.Search(s => s  									.Request(si => si  										.Indices<Project>()  										.Body<Project>(b => b  											.Size(0)  											.Aggregations(a => a  												.Nested("nested_tags"' n => n  													.Path(np => np.Tags)  													.Aggregations(aa => aa  														.Terms("top_project_tags"' ta => ta  															.Field(f => f.Tags.First().Name)  														)  													)  												)  											)  										)  									)  								)  							)  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Cron("0 5 9 * * ?")  						)  					)  					.Transform(tr => tr  						.Chain(ct => ct  							.Transform(ctt => ctt  								.Search(st => st  									.Request(str => str  										.Indices(typeof(Project))  										.SearchType(SearchType.DfsQueryThenFetch)  										.IndicesOptions(io => io  											.ExpandWildcards(ExpandWildcards.Open)  											.IgnoreUnavailable()  										)  										.Body<Project>(b => b  											.Query(q => q  												.Match(m => m  													.Field("state")  													.Query(StateOfBeing.Stable.ToString().ToLowerInvariant())  												)  											)  										)  									)  									.Timeout("10s")  								)  							)  							.Transform(ctt => ctt  								.Script(st => st  									.Source("return [ 'time' : ctx.trigger.scheduled_time ]")  								)  							)  						)  					)  					.Actions(a => a  						.Email("reminder_email"' e => e  							.To("me@example.com")  							.Subject("Something's strange in the neighbourhood")  							.Body(b => b  								.Text("Dear {{ctx.payload.name}}' by the time you read these lines' I'll be gone")  							)  							.Attachments(ea => ea  								.HttpAttachment("http_attachment"' ha => ha  									.Inline()  									.ContentType(RequestData.MimeType)  									.Request(r => r  										.Url("http://localhost:8080/http_attachment")  									)  								)  								.DataAttachment("data_attachment"' da => da  									.Format(DataAttachmentFormat.Json)  								)  							)  						)  						.Index("reminder_index"' i => i  							.Index("put-watch-test-index")  							.ExecutionTimeField("execution_time")  						)  						.PagerDuty("reminder_pagerduty"' pd => pd  							.Account("my_pagerduty_account")  							.Description("pager duty description")  							.AttachPayload()  							.EventType(PagerDutyEventType.Trigger)  							.IncidentKey("incident_key")  							.Context(c => c  								.Context(PagerDutyContextType.Image' cd => cd  									.Src("http://example.com/image")  								)  								.Context(PagerDutyContextType.Link' cd => cd  									.Href("http://example.com/link")  								)  							)  						)  						.Slack("reminder_slack"' sl => sl  							.Account("monitoring")  							.Message(sm => sm  								.From("nest integration test")  								.To("#nest")  								.Text("slack message")  								.Attachments(sa => sa  									.Attachment(saa => saa  										.Title("Attachment 1")  										.AuthorName("Russ Cam")  									)  								)  							)  						)  						.Webhook("webhook"' w => w  							.Scheme(ConnectionScheme.Https)  							.Host("localhost")  							.Port(9200)  							.Method(HttpInputMethod.Post)  							.Path("/_bulk")  							.Authentication(au => au  								.Basic(b => b  									.Username("username")  									.Password("password")  								)  							)  							.Body("{{ctx.payload._value}}")  						)  					)  				);
Magic Number,Tests.XPack.Watcher.GetWatch,GetWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\GetWatch\GetWatchApiTests.cs,PutWatch,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Input(i => i  						.Chain(c => c  							.Input("simple"' ci => ci  								.Simple(s => s  									.Add("str"' "val1")  									.Add("num"' 23)  									.Add("obj"' new { str = "val2" })  								)  							)  							.Input("http"' ci => ci  								.Http(h => h  									.Request(r => r  										.Host("localhost")  										.Port(8080)  										.Method(HttpInputMethod.Post)  										.Path("/path.html")  										.Proxy(pr => pr  											.Host("proxy")  											.Port(6000)  										)  										.Scheme(ConnectionScheme.Https)  										.Authentication(a => a  											.Basic(b => b  												.Username("Username123")  												.Password("Password123")  											)  										)  										.Body(  											"{\"query\" : {\"range\": {\"@timestamp\" : {\"from\": \"{{ctx.trigger.triggered_time}}||-5m\"'\"to\": \"{{ctx.trigger.triggered_time}}\"}}}}")  										.Headers(he => he  											.Add("header1"' "value1")  										)  										.Params(pa => pa  											.Add("lat"' "52.374031")  											.Add("lon"' "4.88969")  											.Add("appid"' "appid")  										)  										.ConnectionTimeout("3s")  										.ReadTimeout(TimeSpan.FromMilliseconds(500))  									)  									.ResponseContentType(ResponseContentType.Text)  								)  							)  							.Input("search"' ci => ci  								.Search(s => s  									.Request(si => si  										.Indices<Project>()  										.Body<Project>(b => b  											.Size(0)  											.Aggregations(a => a  												.Nested("nested_tags"' n => n  													.Path(np => np.Tags)  													.Aggregations(aa => aa  														.Terms("top_project_tags"' ta => ta  															.Field(f => f.Tags.First().Name)  														)  													)  												)  											)  										)  									)  								)  							)  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Cron("0 5 9 * * ?")  						)  					)  					.Transform(tr => tr  						.Chain(ct => ct  							.Transform(ctt => ctt  								.Search(st => st  									.Request(str => str  										.Indices(typeof(Project))  										.SearchType(SearchType.DfsQueryThenFetch)  										.IndicesOptions(io => io  											.ExpandWildcards(ExpandWildcards.Open)  											.IgnoreUnavailable()  										)  										.Body<Project>(b => b  											.Query(q => q  												.Match(m => m  													.Field("state")  													.Query(StateOfBeing.Stable.ToString().ToLowerInvariant())  												)  											)  										)  									)  									.Timeout("10s")  								)  							)  							.Transform(ctt => ctt  								.Script(st => st  									.Source("return [ 'time' : ctx.trigger.scheduled_time ]")  								)  							)  						)  					)  					.Actions(a => a  						.Email("reminder_email"' e => e  							.To("me@example.com")  							.Subject("Something's strange in the neighbourhood")  							.Body(b => b  								.Text("Dear {{ctx.payload.name}}' by the time you read these lines' I'll be gone")  							)  							.Attachments(ea => ea  								.HttpAttachment("http_attachment"' ha => ha  									.Inline()  									.ContentType(RequestData.MimeType)  									.Request(r => r  										.Url("http://localhost:8080/http_attachment")  									)  								)  								.DataAttachment("data_attachment"' da => da  									.Format(DataAttachmentFormat.Json)  								)  							)  						)  						.Index("reminder_index"' i => i  							.Index("put-watch-test-index")  							.ExecutionTimeField("execution_time")  						)  						.PagerDuty("reminder_pagerduty"' pd => pd  							.Account("my_pagerduty_account")  							.Description("pager duty description")  							.AttachPayload()  							.EventType(PagerDutyEventType.Trigger)  							.IncidentKey("incident_key")  							.Context(c => c  								.Context(PagerDutyContextType.Image' cd => cd  									.Src("http://example.com/image")  								)  								.Context(PagerDutyContextType.Link' cd => cd  									.Href("http://example.com/link")  								)  							)  						)  						.Slack("reminder_slack"' sl => sl  							.Account("monitoring")  							.Message(sm => sm  								.From("nest integration test")  								.To("#nest")  								.Text("slack message")  								.Attachments(sa => sa  									.Attachment(saa => saa  										.Title("Attachment 1")  										.AuthorName("Russ Cam")  									)  								)  							)  						)  						.Webhook("webhook"' w => w  							.Scheme(ConnectionScheme.Https)  							.Host("localhost")  							.Port(9200)  							.Method(HttpInputMethod.Post)  							.Path("/_bulk")  							.Authentication(au => au  								.Basic(b => b  									.Username("username")  									.Password("password")  								)  							)  							.Body("{{ctx.payload._value}}")  						)  					)  				);
Magic Number,Tests.XPack.Watcher.GetWatch,GetWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\GetWatch\GetWatchApiTests.cs,PutWatch,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Input(i => i  						.Chain(c => c  							.Input("simple"' ci => ci  								.Simple(s => s  									.Add("str"' "val1")  									.Add("num"' 23)  									.Add("obj"' new { str = "val2" })  								)  							)  							.Input("http"' ci => ci  								.Http(h => h  									.Request(r => r  										.Host("localhost")  										.Port(8080)  										.Method(HttpInputMethod.Post)  										.Path("/path.html")  										.Proxy(pr => pr  											.Host("proxy")  											.Port(6000)  										)  										.Scheme(ConnectionScheme.Https)  										.Authentication(a => a  											.Basic(b => b  												.Username("Username123")  												.Password("Password123")  											)  										)  										.Body(  											"{\"query\" : {\"range\": {\"@timestamp\" : {\"from\": \"{{ctx.trigger.triggered_time}}||-5m\"'\"to\": \"{{ctx.trigger.triggered_time}}\"}}}}")  										.Headers(he => he  											.Add("header1"' "value1")  										)  										.Params(pa => pa  											.Add("lat"' "52.374031")  											.Add("lon"' "4.88969")  											.Add("appid"' "appid")  										)  										.ConnectionTimeout("3s")  										.ReadTimeout(TimeSpan.FromMilliseconds(500))  									)  									.ResponseContentType(ResponseContentType.Text)  								)  							)  							.Input("search"' ci => ci  								.Search(s => s  									.Request(si => si  										.Indices<Project>()  										.Body<Project>(b => b  											.Size(0)  											.Aggregations(a => a  												.Nested("nested_tags"' n => n  													.Path(np => np.Tags)  													.Aggregations(aa => aa  														.Terms("top_project_tags"' ta => ta  															.Field(f => f.Tags.First().Name)  														)  													)  												)  											)  										)  									)  								)  							)  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Cron("0 5 9 * * ?")  						)  					)  					.Transform(tr => tr  						.Chain(ct => ct  							.Transform(ctt => ctt  								.Search(st => st  									.Request(str => str  										.Indices(typeof(Project))  										.SearchType(SearchType.DfsQueryThenFetch)  										.IndicesOptions(io => io  											.ExpandWildcards(ExpandWildcards.Open)  											.IgnoreUnavailable()  										)  										.Body<Project>(b => b  											.Query(q => q  												.Match(m => m  													.Field("state")  													.Query(StateOfBeing.Stable.ToString().ToLowerInvariant())  												)  											)  										)  									)  									.Timeout("10s")  								)  							)  							.Transform(ctt => ctt  								.Script(st => st  									.Source("return [ 'time' : ctx.trigger.scheduled_time ]")  								)  							)  						)  					)  					.Actions(a => a  						.Email("reminder_email"' e => e  							.To("me@example.com")  							.Subject("Something's strange in the neighbourhood")  							.Body(b => b  								.Text("Dear {{ctx.payload.name}}' by the time you read these lines' I'll be gone")  							)  							.Attachments(ea => ea  								.HttpAttachment("http_attachment"' ha => ha  									.Inline()  									.ContentType(RequestData.MimeType)  									.Request(r => r  										.Url("http://localhost:8080/http_attachment")  									)  								)  								.DataAttachment("data_attachment"' da => da  									.Format(DataAttachmentFormat.Json)  								)  							)  						)  						.Index("reminder_index"' i => i  							.Index("put-watch-test-index")  							.ExecutionTimeField("execution_time")  						)  						.PagerDuty("reminder_pagerduty"' pd => pd  							.Account("my_pagerduty_account")  							.Description("pager duty description")  							.AttachPayload()  							.EventType(PagerDutyEventType.Trigger)  							.IncidentKey("incident_key")  							.Context(c => c  								.Context(PagerDutyContextType.Image' cd => cd  									.Src("http://example.com/image")  								)  								.Context(PagerDutyContextType.Link' cd => cd  									.Href("http://example.com/link")  								)  							)  						)  						.Slack("reminder_slack"' sl => sl  							.Account("monitoring")  							.Message(sm => sm  								.From("nest integration test")  								.To("#nest")  								.Text("slack message")  								.Attachments(sa => sa  									.Attachment(saa => saa  										.Title("Attachment 1")  										.AuthorName("Russ Cam")  									)  								)  							)  						)  						.Webhook("webhook"' w => w  							.Scheme(ConnectionScheme.Https)  							.Host("localhost")  							.Port(9200)  							.Method(HttpInputMethod.Post)  							.Path("/_bulk")  							.Authentication(au => au  								.Basic(b => b  									.Username("username")  									.Password("password")  								)  							)  							.Body("{{ctx.payload._value}}")  						)  					)  				);
Magic Number,Tests.XPack.Watcher.GetWatch,GetWatchApiTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\XPack\Watcher\GetWatch\GetWatchApiTests.cs,PutWatch,The following statement contains a magic number: var putWatchResponse = client.Watcher.Put(callUniqueValue.Value' p => p  					.Input(i => i  						.Chain(c => c  							.Input("simple"' ci => ci  								.Simple(s => s  									.Add("str"' "val1")  									.Add("num"' 23)  									.Add("obj"' new { str = "val2" })  								)  							)  							.Input("http"' ci => ci  								.Http(h => h  									.Request(r => r  										.Host("localhost")  										.Port(8080)  										.Method(HttpInputMethod.Post)  										.Path("/path.html")  										.Proxy(pr => pr  											.Host("proxy")  											.Port(6000)  										)  										.Scheme(ConnectionScheme.Https)  										.Authentication(a => a  											.Basic(b => b  												.Username("Username123")  												.Password("Password123")  											)  										)  										.Body(  											"{\"query\" : {\"range\": {\"@timestamp\" : {\"from\": \"{{ctx.trigger.triggered_time}}||-5m\"'\"to\": \"{{ctx.trigger.triggered_time}}\"}}}}")  										.Headers(he => he  											.Add("header1"' "value1")  										)  										.Params(pa => pa  											.Add("lat"' "52.374031")  											.Add("lon"' "4.88969")  											.Add("appid"' "appid")  										)  										.ConnectionTimeout("3s")  										.ReadTimeout(TimeSpan.FromMilliseconds(500))  									)  									.ResponseContentType(ResponseContentType.Text)  								)  							)  							.Input("search"' ci => ci  								.Search(s => s  									.Request(si => si  										.Indices<Project>()  										.Body<Project>(b => b  											.Size(0)  											.Aggregations(a => a  												.Nested("nested_tags"' n => n  													.Path(np => np.Tags)  													.Aggregations(aa => aa  														.Terms("top_project_tags"' ta => ta  															.Field(f => f.Tags.First().Name)  														)  													)  												)  											)  										)  									)  								)  							)  						)  					)  					.Trigger(t => t  						.Schedule(s => s  							.Cron("0 5 9 * * ?")  						)  					)  					.Transform(tr => tr  						.Chain(ct => ct  							.Transform(ctt => ctt  								.Search(st => st  									.Request(str => str  										.Indices(typeof(Project))  										.SearchType(SearchType.DfsQueryThenFetch)  										.IndicesOptions(io => io  											.ExpandWildcards(ExpandWildcards.Open)  											.IgnoreUnavailable()  										)  										.Body<Project>(b => b  											.Query(q => q  												.Match(m => m  													.Field("state")  													.Query(StateOfBeing.Stable.ToString().ToLowerInvariant())  												)  											)  										)  									)  									.Timeout("10s")  								)  							)  							.Transform(ctt => ctt  								.Script(st => st  									.Source("return [ 'time' : ctx.trigger.scheduled_time ]")  								)  							)  						)  					)  					.Actions(a => a  						.Email("reminder_email"' e => e  							.To("me@example.com")  							.Subject("Something's strange in the neighbourhood")  							.Body(b => b  								.Text("Dear {{ctx.payload.name}}' by the time you read these lines' I'll be gone")  							)  							.Attachments(ea => ea  								.HttpAttachment("http_attachment"' ha => ha  									.Inline()  									.ContentType(RequestData.MimeType)  									.Request(r => r  										.Url("http://localhost:8080/http_attachment")  									)  								)  								.DataAttachment("data_attachment"' da => da  									.Format(DataAttachmentFormat.Json)  								)  							)  						)  						.Index("reminder_index"' i => i  							.Index("put-watch-test-index")  							.ExecutionTimeField("execution_time")  						)  						.PagerDuty("reminder_pagerduty"' pd => pd  							.Account("my_pagerduty_account")  							.Description("pager duty description")  							.AttachPayload()  							.EventType(PagerDutyEventType.Trigger)  							.IncidentKey("incident_key")  							.Context(c => c  								.Context(PagerDutyContextType.Image' cd => cd  									.Src("http://example.com/image")  								)  								.Context(PagerDutyContextType.Link' cd => cd  									.Href("http://example.com/link")  								)  							)  						)  						.Slack("reminder_slack"' sl => sl  							.Account("monitoring")  							.Message(sm => sm  								.From("nest integration test")  								.To("#nest")  								.Text("slack message")  								.Attachments(sa => sa  									.Attachment(saa => saa  										.Title("Attachment 1")  										.AuthorName("Russ Cam")  									)  								)  							)  						)  						.Webhook("webhook"' w => w  							.Scheme(ConnectionScheme.Https)  							.Host("localhost")  							.Port(9200)  							.Method(HttpInputMethod.Post)  							.Path("/_bulk")  							.Authentication(au => au  								.Basic(b => b  									.Username("username")  									.Password("password")  								)  							)  							.Body("{{ctx.payload._value}}")  						)  					)  				);
Duplicate Code,Tests.ClientConcepts.HighLevel.Mapping,AutoMap,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\ClientConcepts\HighLevel\Mapping\AutoMap.doc.cs,UsingAutoMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((34' 54)' (57' 77))
Duplicate Code,Tests.Search.Hits,HitsSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Hits\HitsSerializationTests.cs,CanDeserializeNestedNestedTopHits,The method contains a code clone-set at the following line numbers (starting from the method definition): ((43' 65)' (123' 145))
Duplicate Code,Tests.Search.Hits,HitsSerializationTests,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Search\Hits\HitsSerializationTests.cs,CanDeserializeNestedNestedTopHits,The method contains a code clone-set at the following line numbers (starting from the method definition): ((164' 184)' (231' 251))
Missing Default,Tests.Framework.Extensions,NumericExtensions,D:\research\architectureSmells\repos\elastic_elasticsearch-net\src\Tests\Tests\Framework\Extensions\Numeric.cs,ToOrdinal,The following switch statement is missing a default case: switch (num % 100)  			{  				case 11:  				case 12:  				case 13:  					return num + "th";  			}
