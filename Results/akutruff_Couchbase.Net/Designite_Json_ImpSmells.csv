Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Json,BoolJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\BoolJsonValueSerializer.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Json,JsonGroupParser,C:\repos\akutruff_Couchbase.Net\Json\Json\JsonGroupParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,Cyclomatic complexity of the method is 35
Complex Method,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,SkipNextValue,Cyclomatic complexity of the method is 24
Complex Method,Json,StringJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\StringJsonValueSerializer.cs,Append,Cyclomatic complexity of the method is 32
Long Identifier,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,The length of the parameter lengthFromStartToFirstBackslash is 31.
Long Identifier,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,The length of the parameter numberOfHexCharacterForJsonEncodedUtfCharacter is 46.
Long Identifier,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,The length of the parameter jsonWithEscapedCharactersRemoved is 32.
Long Statement,Json,GuidJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\GuidJsonValueSerializer.cs,GetHexByte,The length of the statement  "	var result = HexSerializer.GetCharacterHexValue (json [index++]) << 4 | HexSerializer.GetCharacterHexValue (json [index++]); " is 124.
Long Statement,Json,GuidJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\GuidJsonValueSerializer.cs,GetHexInt,The length of the statement  "	var result = HexSerializer.GetCharacterHexValue (json [index++]) << 28 | HexSerializer.GetCharacterHexValue (json [index++]) << 24 | HexSerializer.GetCharacterHexValue (json [index++]) << 20 | HexSerializer.GetCharacterHexValue (json [index++]) << 16 | HexSerializer.GetCharacterHexValue (json [index++]) << 12 | HexSerializer.GetCharacterHexValue (json [index++]) << 8 | HexSerializer.GetCharacterHexValue (json [index++]) << 4 | HexSerializer.GetCharacterHexValue (json [index++]); " is 483.
Long Statement,Json,GuidJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\GuidJsonValueSerializer.cs,GetHexShort,The length of the statement  "	var result = HexSerializer.GetCharacterHexValue (json [index++]) << 12 | HexSerializer.GetCharacterHexValue (json [index++]) << 8 | HexSerializer.GetCharacterHexValue (json [index++]) << 4 | HexSerializer.GetCharacterHexValue (json [index++]); " is 243.
Long Statement,Json,JsonGroupParser,C:\repos\akutruff_Couchbase.Net\Json\Json\JsonGroupParser.cs,OnGroup,The length of the statement  "	_callbacks [new HashedSubstring (fieldName)] = new JsonSubGroupParsingCallback<TSubGroup> (subGroupParser' onParsed' subGroupSelector); " is 135.
Long Statement,Json,JsonGroupParser,C:\repos\akutruff_Couchbase.Net\Json\Json\JsonGroupParser.cs,OnArray,The length of the statement  "	_callbacks [new HashedSubstring (fieldName)] = new JsonArrayOfSubGroupParsingCallback<TSubGroup> (subGroupParser' onParsed' subGroupSelector); " is 142.
Long Statement,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,The length of the statement  "	var stringBuilder = new StringBuilder (json' startingIndex' lengthFromStartToFirstBackslash' (int)(1.6f * lengthFromStartToFirstBackslash)); " is 140.
Long Statement,Json,HashedSubstringComparer,C:\repos\akutruff_Couchbase.Net\Json\Json\SubstringComparer.cs,Equals,The length of the statement  "	return x.Length == y.Length && x.HashCode == y.HashCode && string.Compare (x.String' x.Index' y.String' y.Index' x.Length) == 0; " is 128.
Magic Number,Json,Crc32,C:\repos\akutruff_Couchbase.Net\Json\Json\Crc32.cs,GetUTF16Hash,The following statement contains a magic number: for (int i = 0; i < numberOfCharacters; i++) {  	var currentCharacter = str [currentCharacterIndex++];  	var charAsShort = (ushort)currentCharacter;  	byte upper = (byte)(charAsShort >> 8);  	currentCrc = UpdateCrc (currentCrc' upper);  	byte lower = (byte)(charAsShort & 0xFF);  	currentCrc = UpdateCrc (currentCrc' upper);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,Parse,The following statement contains a magic number: for (int i = 1; i < charactersForHexValue; i++) {  	character = json [index];  	var hexCharacterValue = GetCharacterHexValue (character);  	value <<= 4;  	value += hexCharacterValue;  	index++;  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,Parse,The following statement contains a magic number: value <<= 4;  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterHexValue,The following statement contains a magic number: if (character <= '9' && character >= '0') {  	value = character - '0';  }  else if (character <= 'f' && character >= 'a') {  	value = character - 'a' + 10;  }  else if (character <= 'F' && character >= 'A') {  	value = character - 'A' + 10;  }  else {  	throw new ArgumentOutOfRangeException ("Not a valid hex character: " + character);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterHexValue,The following statement contains a magic number: if (character <= '9' && character >= '0') {  	value = character - '0';  }  else if (character <= 'f' && character >= 'a') {  	value = character - 'a' + 10;  }  else if (character <= 'F' && character >= 'A') {  	value = character - 'A' + 10;  }  else {  	throw new ArgumentOutOfRangeException ("Not a valid hex character: " + character);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterHexValue,The following statement contains a magic number: if (character <= 'f' && character >= 'a') {  	value = character - 'a' + 10;  }  else if (character <= 'F' && character >= 'A') {  	value = character - 'A' + 10;  }  else {  	throw new ArgumentOutOfRangeException ("Not a valid hex character: " + character);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterHexValue,The following statement contains a magic number: if (character <= 'f' && character >= 'a') {  	value = character - 'a' + 10;  }  else if (character <= 'F' && character >= 'A') {  	value = character - 'A' + 10;  }  else {  	throw new ArgumentOutOfRangeException ("Not a valid hex character: " + character);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterHexValue,The following statement contains a magic number: value = character - 'a' + 10;  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterHexValue,The following statement contains a magic number: if (character <= 'F' && character >= 'A') {  	value = character - 'A' + 10;  }  else {  	throw new ArgumentOutOfRangeException ("Not a valid hex character: " + character);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterHexValue,The following statement contains a magic number: value = character - 'A' + 10;  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,WriteHexEncoded,The following statement contains a magic number: builder.Append (GetCharacterForNibble (character >> 12));  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,WriteHexEncoded,The following statement contains a magic number: builder.Append (GetCharacterForNibble (character >> 8));  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,WriteHexEncoded,The following statement contains a magic number: builder.Append (GetCharacterForNibble (character >> 4));  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterForNibble,The following statement contains a magic number: if (casted < 10) {  	return (char)('0' + casted);  }  else {  	return (char)('a' - 10 + casted);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterForNibble,The following statement contains a magic number: if (casted < 10) {  	return (char)('0' + casted);  }  else {  	return (char)('a' - 10 + casted);  }  
Magic Number,Json,HexSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\HexSerializer.cs,GetCharacterForNibble,The following statement contains a magic number: return (char)('a' - 10 + casted);  
Magic Number,Json,IntJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\IntJsonValueSerializer.cs,Parse,The following statement contains a magic number: for (; index < json.Length; index++) {  	character = json [index];  	if (character < '0' || character > '9') {  		break;  	}  	var digit = character - '0';  	value *= 10;  	value += digit;  }  
Magic Number,Json,IntJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\IntJsonValueSerializer.cs,Parse,The following statement contains a magic number: value *= 10;  
Magic Number,Json,LongJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\LongJsonValueSerializer.cs,Parse,The following statement contains a magic number: while (index < json.Length) {  	character = json [index];  	if (character < '0' || character > '9') {  		break;  	}  	long digit = character - '0';  	value *= 10;  	value += digit;  	index++;  }  
Magic Number,Json,LongJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\LongJsonValueSerializer.cs,Parse,The following statement contains a magic number: value *= 10;  
Magic Number,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,The following statement contains a magic number: while (index < json.Length) {  	var character = json [index];  	if (character == '\\') {  		var indexOfBackslashForEscaping = index;  		index++;  		character = json [index];  		switch (character) {  		case '\'':  		case '\"':  		case '\\':  		case '/':  			stringBuilder.Append (character);  			index++;  			break;  		case 'n':  			stringBuilder.Append ('\n');  			index++;  			break;  		case 'r':  			stringBuilder.Append ('\r');  			index++;  			break;  		case 'f':  			stringBuilder.Append ('\f');  			index++;  			break;  		case 'b':  			stringBuilder.Append ('\b');  			index++;  			break;  		case 't':  			stringBuilder.Append ('\t');  			index++;  			break;  		case 'u':  			{  				const int numberOfHexCharacterForJsonEncodedUtfCharacter = 4;  				index++;  				var hexValue = HexSerializer.Parse (json' ref index' numberOfHexCharacterForJsonEncodedUtfCharacter);  				var unicodeCharacter = (char)hexValue;  				stringBuilder.Append (unicodeCharacter);  			}  			break;  		default:  			throw new Exception ("Invalid escape character");  		}  	}  	else if (character == '\"') {  		string jsonWithEscapedCharactersRemoved = stringBuilder.ToString ();  		substring = new Substring (jsonWithEscapedCharactersRemoved);  		index++;  		return;  	}  	else {  		stringBuilder.Append (character);  		index++;  	}  }  
Magic Number,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,The following statement contains a magic number: if (character == '\\') {  	var indexOfBackslashForEscaping = index;  	index++;  	character = json [index];  	switch (character) {  	case '\'':  	case '\"':  	case '\\':  	case '/':  		stringBuilder.Append (character);  		index++;  		break;  	case 'n':  		stringBuilder.Append ('\n');  		index++;  		break;  	case 'r':  		stringBuilder.Append ('\r');  		index++;  		break;  	case 'f':  		stringBuilder.Append ('\f');  		index++;  		break;  	case 'b':  		stringBuilder.Append ('\b');  		index++;  		break;  	case 't':  		stringBuilder.Append ('\t');  		index++;  		break;  	case 'u':  		{  			const int numberOfHexCharacterForJsonEncodedUtfCharacter = 4;  			index++;  			var hexValue = HexSerializer.Parse (json' ref index' numberOfHexCharacterForJsonEncodedUtfCharacter);  			var unicodeCharacter = (char)hexValue;  			stringBuilder.Append (unicodeCharacter);  		}  		break;  	default:  		throw new Exception ("Invalid escape character");  	}  }  else if (character == '\"') {  	string jsonWithEscapedCharactersRemoved = stringBuilder.ToString ();  	substring = new Substring (jsonWithEscapedCharactersRemoved);  	index++;  	return;  }  else {  	stringBuilder.Append (character);  	index++;  }  
Magic Number,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,BuildNextStringFromEscaped,The following statement contains a magic number: switch (character) {  case '\'':  case '\"':  case '\\':  case '/':  	stringBuilder.Append (character);  	index++;  	break;  case 'n':  	stringBuilder.Append ('\n');  	index++;  	break;  case 'r':  	stringBuilder.Append ('\r');  	index++;  	break;  case 'f':  	stringBuilder.Append ('\f');  	index++;  	break;  case 'b':  	stringBuilder.Append ('\b');  	index++;  	break;  case 't':  	stringBuilder.Append ('\t');  	index++;  	break;  case 'u':  	{  		const int numberOfHexCharacterForJsonEncodedUtfCharacter = 4;  		index++;  		var hexValue = HexSerializer.Parse (json' ref index' numberOfHexCharacterForJsonEncodedUtfCharacter);  		var unicodeCharacter = (char)hexValue;  		stringBuilder.Append (unicodeCharacter);  	}  	break;  default:  	throw new Exception ("Invalid escape character");  }  
Magic Number,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,SkipString,The following statement contains a magic number: while (index < json.Length) {  	var character = json [index];  	if (character == '\\') {  		index += 2;  	}  	else if (character == '\"') {  		index++;  		return;  	}  	else {  		index++;  	}  }  
Magic Number,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,SkipString,The following statement contains a magic number: if (character == '\\') {  	index += 2;  }  else if (character == '\"') {  	index++;  	return;  }  else {  	index++;  }  
Magic Number,Json,Scanner,C:\repos\akutruff_Couchbase.Net\Json\Json\Scanner.cs,SkipString,The following statement contains a magic number: index += 2;  
Magic Number,Json,UIntJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\UIntJsonValueSerializer.cs,Parse,The following statement contains a magic number: while (index < json.Length) {  	character = json [index];  	if (character < '0' || character > '9') {  		break;  	}  	var digit = (uint)(character - '0');  	value *= 10;  	value += digit;  	index++;  }  
Magic Number,Json,UIntJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\UIntJsonValueSerializer.cs,Parse,The following statement contains a magic number: value *= 10;  
Magic Number,Json,ULongJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\ULongJsonValueSerializer.cs,Parse,The following statement contains a magic number: while (index < json.Length) {  	character = json [index];  	if (character < '0' || character > '9') {  		break;  	}  	var digit = (ulong)(character - '0');  	value *= 10;  	value += digit;  	index++;  }  
Magic Number,Json,ULongJsonValueSerializer,C:\repos\akutruff_Couchbase.Net\Json\Json\Serializers\ULongJsonValueSerializer.cs,Parse,The following statement contains a magic number: value *= 10;  
