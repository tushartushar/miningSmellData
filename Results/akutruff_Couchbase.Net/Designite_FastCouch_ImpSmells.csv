Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FastCouch,Cluster,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\Cluster.cs,AreMapsEquivalent,Cyclomatic complexity of the method is 8
Complex Method,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnPossiblyRecoverableMemcachedError,Cyclomatic complexity of the method is 9
Complex Method,FastCouch,MemcachedClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedClient.cs,OnErrorReceived,Cyclomatic complexity of the method is 11
Complex Method,FastCouch,View,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\View.cs,GetUrlForQuery,Cyclomatic complexity of the method is 12
Long Parameter List,FastCouch,BufferUtils,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BufferUtils.cs,CopyAsMuchAsPossible,The method has 6 parameters.
Long Parameter List,FastCouch,Cluster,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\Cluster.cs,ConfigureClusterFromExistingClusterAndCommitAnyConnectionChanges,The method has 5 parameters.
Long Parameter List,FastCouch,ClusterParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ClusterParser.cs,ClusterParser,The method has 21 parameters.
Long Parameter List,FastCouch,HttpClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\HttpClient.cs,HttpClient,The method has 10 parameters.
Long Parameter List,FastCouch,MemcachedCommand,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedCommands\MemcachedCommand.cs,Parse,The method has 6 parameters.
Long Parameter List,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,RequestServerStreamingMap,The method has 6 parameters.
Long Parameter List,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,Connect,The method has 5 parameters.
Long Parameter List,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,CheckAndSet,The method has 5 parameters.
Long Parameter List,FastCouch,GetCommand,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedCommands\GetCommand.cs,Parse,The method has 6 parameters.
Long Parameter List,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,RequestStreamWriter,The method has 5 parameters.
Long Parameter List,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ResponseStreamReader,The method has 7 parameters.
Long Parameter List,FastCouch,SetCommand,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedCommands\SetCommand.cs,SetCommand,The method has 6 parameters.
Long Parameter List,FastCouch,View,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\View.cs,Get,The method has 10 parameters.
Long Parameter List,FastCouch,View,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\View.cs,GetUrlForQuery,The method has 8 parameters.
Long Identifier,FastCouch,BufferPool,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BufferPool.cs,BufferPool,The length of the parameter totalNumberOfBytesInBufferPool is 30.
Long Identifier,FastCouch,Cluster,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\Cluster.cs,ConfigureClusterFromExistingClusterAndCommitAnyConnectionChanges,The length of the parameter existingServersThatAreNoLongerInTheCluster is 42.
Long Identifier,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,UpdateConfigurationAuthorityServerBasedOnMostAvailableServer,The length of the parameter mentionCountOfCurrentAuthority is 30.
Long Identifier,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,Connect,The length of the parameter millisecondsToWaitForVBucketMap is 31.
Long Identifier,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,Connect,The length of the parameter millisecondsToWaitForVBucketMap is 31.
Long Identifier,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnMemcachedReconnectionError,The length of the parameter millisecondsToWaitBetweenReconnectAttempts is 42.
Long Identifier,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,TryToReconnectServerAndUpdateClusterIfServerStillExists,The length of the parameter serverWithDisconnectedMemcachedClient is 37.
Long Identifier,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,GetIndexOfNextServerInCluster,The length of the parameter indexOfLastServerTriedToSendTo is 30.
Long Identifier,FastCouch,MemcachedClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedClient.cs,HandleDisconnection,The length of the parameter callbackForWhenBothReaderAndWriterHaveDisconnected is 50.
Long Identifier,FastCouch,StringDecoder,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\StringDecoder.cs,DecodeAndSplitAtUtf8Character,The length of the parameter bytesForRestOfStringExcludingTheSpecialCharacter is 48.
Long Identifier,FastCouch,StringDecoder,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\StringDecoder.cs,DecodeAndSplitAtUtf8Character,The length of the parameter indexOfByteImmediatelyFollowingTheSpecialCharacter is 50.
Long Statement,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseInt,The length of the statement  "	return buffer [firstByteOfValueInBuffer] << 24 | buffer [firstByteOfValueInBuffer + 1] << 16 | buffer [firstByteOfValueInBuffer + 2] << 8 | buffer [firstByteOfValueInBuffer + 3]; " is 178.
Long Statement,FastCouch,BufferUtils,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BufferUtils.cs,CopyAsMuchAsPossible,The length of the statement  "	var bytesAvailable = CalculateMaxPossibleBytesForCopy (sourceIndex' sourceArrayLength' destinationIndex' destinationArrayLength); " is 129.
Long Statement,FastCouch,Cluster,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\Cluster.cs,IsEquivalentConfiguration,The length of the statement  "	bool doVBucketMapsMatch = AreMapsEquivalent (this.Servers' _vBucketToServerMapIndices' otherCluster.Servers' otherCluster._vBucketToServerMapIndices) && AreMapsEquivalent (this.Servers' _fastForwardVBucketToServerMapIndices' otherCluster.Servers' otherCluster._fastForwardVBucketToServerMapIndices); " is 299.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,RequestServerStreamingMap,The length of the statement  "	var streamingCommand = new LineReadingHttpCommand (uri' null' (json' _) => OnServerStreamMapUpdated (serverId' json)' (response' value' state) =>  { " is 148.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnServerStreamMapUpdated,The length of the statement  "			//Clone so that the table of _activeServersToLastReportedClusterConfig does not have references to tcpClient' htttpClient' etc. " is 127.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnServerStreamMapUpdated,The length of the statement  "			newAuthorityCluster.ConfigureClusterFromExistingClusterAndCommitAnyConnectionChanges (currentCluster' OnPossiblyRecoverableMemcachedError' OnMemcachedDisconnection' OnViewRequestError); " is 185.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,UpdateConfigurationAuthorityServerBasedOnMostAvailableServer,The length of the statement  "	if (!serverMentionCounts.TryGetValue (_configurationAuthorityServerId' out mentionCountOfCurrentAuthority) || mostMentionedCount > mentionCountOfCurrentAuthority) { " is 164.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,WaitForInitialClusterUpdate,The length of the statement  "	//Logic here is complicated-ish because of spurious wakeups.  I don't trust that Monitor.Wait won't wakeup before it's timeout even though there hasn't been a pulse. " is 165.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnMemcachedDisconnection,The length of the statement  "	//  technically this could kick off a lot of "not my vbucket" errors if the cluster map doesn't come through right quick. " is 121.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,BeginMemcachedReconnection,The length of the statement  "	var result = tcpClient.BeginConnect (reconnectAttempt.Server.HostName' reconnectAttempt.Server.MemcachedPort' pattern.OnCompleted' reconnectAttempt); " is 149.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnMemcacachedReconnectionCompleted,The length of the statement  "			MemcachedClient newMemcachedClient = new MemcachedClient (serverInLatestCluster.Id' serverInLatestCluster.HostName' serverInLatestCluster.MemcachedPort); " is 153.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnMemcachedReconnectionError,The length of the statement  "			reconnectAttempt.Timer = new Timer (OnReconnectTimerElapsed' reconnectAttempt' millisecondsToWaitBetweenReconnectAttempts' Timeout.Infinite); " is 141.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,GetIndexOfNextServerInCluster,The length of the statement  "	int indexOfServerToTry = indexOfLastServerTriedToSendTo == -1 ? 0 : MathUtils.CircularIncrement (indexOfLastServerTriedToSendTo' cluster.Servers.Count); " is 152.
Long Statement,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,GetNextServerToUseForQuery,The length of the statement  "	uint indexOfNextServer = ((uint)Interlocked.Increment (ref _nextServerToUseForHttpQuery)) % (uint)cluster.Servers.Count; " is 120.
Long Statement,FastCouch,MemcachedClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedClient.cs,Connect,The length of the statement  "		_responseReader = new ResponseStreamReader (_stream' GetPendingReceiveCommandById' OnCommandResponseReceived' OnErrorReceived' OnResponseStreamReaderDisconnected); " is 163.
Long Statement,FastCouch,MemcachedClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedClient.cs,HandleDisconnection,The length of the statement  "	Action<string' IEnumerable<MemcachedCommand>' IEnumerable<MemcachedCommand>> callbackForWhenBothReaderAndWriterHaveDisconnected = null; " is 135.
Long Statement,FastCouch,MemcachedClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedClient.cs,HandleDisconnection,The length of the statement  "			//The first item in the pending sends has actually already been passed along the wire so report as pendingReceive rather than pendingSend. " is 138.
Long Statement,FastCouch,MemcachedClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedClient.cs,OnErrorReceived,The length of the statement  "		//The error is not something we can deal with inside the library itself' either the caller screwed up' or there was a catastrophic failure. " is 139.
Long Statement,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteCommandHeader,The length of the statement  "	command.WriteExtras (new ArraySegment<byte> (_sendBuffer' _currentByteInSendBuffer' command.RequestHeader.ExtrasLength)); " is 121.
Long Statement,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,BeginWrite,The length of the statement  "	int bytesToBeWrittenByCommand = BufferUtils.CalculateMaxPossibleBytesForCopy (_writeState.CurrentByteInValue' _writeState.TotalBytesInValue' _currentByteInSendBuffer' _sendBuffer.Length); " is 187.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The length of the statement  "	BufferUtils.CopyAsMuchAsPossible (_receiveBuffer' ref _currentByteInReceiveBuffer' _bytesAvailableFromLastRead' _responseHeader' ref _readState.CurrentByteOfResponseHeader' _responseHeader.Length); " is 197.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The length of the statement  "		//TODO: AK TotalBodyLength should *technically* be a uint and not an int. In the .NET world all lengths are typically ints' not uints. " is 134.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The length of the statement  "		//      Do we really care about supporting an extra bits worth of body length?  Who is storing values over 2GB in their memcache database?  " is 138.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseExtras,The length of the statement  "	BufferUtils.CopyAsMuchAsPossible (_receiveBuffer' ref _currentByteInReceiveBuffer' _bytesAvailableFromLastRead' _extras' ref _readState.CurrentByteOfExtras' _readState.ExtrasLength); " is 182.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseKey,The length of the statement  "	BufferUtils.CopyAsMuchAsPossible (_receiveBuffer' ref _currentByteInReceiveBuffer' _bytesAvailableFromLastRead' _key' ref _readState.CurrentByteOfKey' _readState.KeyLength); " is 173.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadCommandResponse,The length of the statement  "	int numberConsumedByCommand = BufferUtils.CalculateMaxPossibleBytesForCopy (_readState.CurrentByteOfValue' _readState.ValueLength' _currentByteInReceiveBuffer' _bytesAvailableFromLastRead); " is 189.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadCommandResponse,The length of the statement  "	_readState.Command.Parse (_readState.ResponseStatus' new ArraySegment<byte> (_receiveBuffer' _currentByteInReceiveBuffer' numberConsumedByCommand)' new ArraySegment<byte> (_extras' 0' _readState.ExtrasLength)' new ArraySegment<byte> (_key' 0' _readState.KeyLength)' _readState.CurrentByteOfValue' _readState.ValueLength); " is 321.
Long Statement,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadError,The length of the statement  "	int bytesToCopy = BufferUtils.CalculateMaxPossibleBytesForCopy (_currentByteInReceiveBuffer' _bytesAvailableFromLastRead' _readState.CurrentByteOfValue' _readState.ValueLength); " is 177.
Long Statement,FastCouch,SetCommand,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedCommands\SetCommand.cs,WriteValue,The length of the statement  "				_encoder.Convert (pChars + _currentCharacter' charactersToWrite' pBodyBuffer + bodyBuffer.Offset' bodyBuffer.Count' false' out charsUsed' out bytesWritten' out completed); " is 171.
Long Statement,FastCouch,StringDecoder,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\StringDecoder.cs,Decode,The length of the statement  "		_decoder.Convert (pSource + totalBytesDecoded' sourceCount - totalBytesDecoded' pDecode' decodeCount' false' out bytesUsed' out charsUsed' out completed); " is 154.
Long Statement,FastCouch,StringDecoder,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\StringDecoder.cs,DecodeAndSplitAtUtf8Character,The length of the statement  "							int indexOfByteImmediatelyFollowingTheSpecialCharacter = sourceBuffer.Offset + Math.Min (numberOfBytesToDecode + 1' sourceBuffer.Count); " is 136.
Long Statement,FastCouch,StringDecoder,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\StringDecoder.cs,DecodeAndSplitAtUtf8Character,The length of the statement  "							bytesLeftover = new ArraySegment<byte> (sourceBuffer.Array' indexOfByteImmediatelyFollowingTheSpecialCharacter' bytesForRestOfStringExcludingTheSpecialCharacter); " is 162.
Long Statement,FastCouch,View,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\View.cs,Get,The length of the statement  "	_client.ExecuteViewHttpQuery (uriBuilder' !string.IsNullOrEmpty (key) ? key : !string.IsNullOrEmpty (startKey) ? startKey : endKey' callback' state); " is 149.
Complex Conditional,FastCouch,MemcachedClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedClient.cs,GetNextCommandAfterPreviousSendCompleted,The conditional expression  "_isWriterConnectionOpen && _isReaderConnectionOpen && !_hasBeenDisposed && _pendingSends.Count > 0"  is complex.
Empty Catch Block,FastCouch,TcpClientExtensions,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\TcpClientExtensions.cs,SafeClose,The method has an empty catch block.
Empty Catch Block,FastCouch,TcpClientExtensions,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\TcpClientExtensions.cs,SafeClose,The method has an empty catch block.
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseInt,The following statement contains a magic number: return buffer [firstByteOfValueInBuffer] << 24 | buffer [firstByteOfValueInBuffer + 1] << 16 | buffer [firstByteOfValueInBuffer + 2] << 8 | buffer [firstByteOfValueInBuffer + 3];  
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseInt,The following statement contains a magic number: return buffer [firstByteOfValueInBuffer] << 24 | buffer [firstByteOfValueInBuffer + 1] << 16 | buffer [firstByteOfValueInBuffer + 2] << 8 | buffer [firstByteOfValueInBuffer + 3];  
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseInt,The following statement contains a magic number: return buffer [firstByteOfValueInBuffer] << 24 | buffer [firstByteOfValueInBuffer + 1] << 16 | buffer [firstByteOfValueInBuffer + 2] << 8 | buffer [firstByteOfValueInBuffer + 3];  
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseInt,The following statement contains a magic number: return buffer [firstByteOfValueInBuffer] << 24 | buffer [firstByteOfValueInBuffer + 1] << 16 | buffer [firstByteOfValueInBuffer + 2] << 8 | buffer [firstByteOfValueInBuffer + 3];  
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseInt,The following statement contains a magic number: return buffer [firstByteOfValueInBuffer] << 24 | buffer [firstByteOfValueInBuffer + 1] << 16 | buffer [firstByteOfValueInBuffer + 2] << 8 | buffer [firstByteOfValueInBuffer + 3];  
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseLong,The following statement contains a magic number: return upper << 32 | lower;  
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseUShort,The following statement contains a magic number: return buffer [firstByteOfValueInBuffer] << 8 | buffer [firstByteOfValueInBuffer + 1];  
Magic Number,FastCouch,BitParser,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\BitParser.cs,ParseResponseStatus,The following statement contains a magic number: return (ResponseStatus)(buffer [firstByteOfValueInBuffer] << 8 | buffer [firstByteOfValueInBuffer + 1]);  
Magic Number,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnServerStreamingMapDisconnected,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (_ =>  {  	Thread.Sleep (1000);  	lock (_gate) {  		Cluster cluster = _cluster;  		var server = cluster.GetServerById (serverId);  		if (!_hasQuit && server != null) {  			RequestServerStreamingMap (server);  		}  	}  });  
Magic Number,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnServerStreamingMapDisconnected,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnMemcachedReconnectionError,The following statement contains a magic number: lock (_gate) {  	var cluster = _cluster;  	var serverInLatestCluster = cluster.GetServerById (reconnectAttempt.Server.Id);  	if (_hasQuit || serverInLatestCluster == null || reconnectAttempt.HasBeenCanceled) {  		_currentlyUnderwayMemcachedReconnectAttempts.Remove (reconnectAttempt);  		reconnectAttempt.Cancel ();  	}  	else {  		const int millisecondsToWaitBetweenReconnectAttempts = 1000;  		reconnectAttempt.Timer = new Timer (OnReconnectTimerElapsed' reconnectAttempt' millisecondsToWaitBetweenReconnectAttempts' Timeout.Infinite);  	}  	return _reconnectMemcachedAsync.Stop ();  }  
Magic Number,FastCouch,CouchbaseClient,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\CouchbaseClient.cs,OnMemcachedReconnectionError,The following statement contains a magic number: if (_hasQuit || serverInLatestCluster == null || reconnectAttempt.HasBeenCanceled) {  	_currentlyUnderwayMemcachedReconnectAttempts.Remove (reconnectAttempt);  	reconnectAttempt.Cancel ();  }  else {  	const int millisecondsToWaitBetweenReconnectAttempts = 1000;  	reconnectAttempt.Timer = new Timer (OnReconnectTimerElapsed' reconnectAttempt' millisecondsToWaitBetweenReconnectAttempts' Timeout.Infinite);  }  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [2] = (byte)(keyLength >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [2] = (byte)(keyLength >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [3] = (byte)(keyLength);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [4] = (byte)(header.ExtrasLength);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [5] = dataType;  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [6] = (byte)(vBucket >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [6] = (byte)(vBucket >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [7] = (byte)(vBucket);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [8] = (byte)(totalBodyLength >> 24);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [8] = (byte)(totalBodyLength >> 24);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [9] = (byte)(totalBodyLength >> 16);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [9] = (byte)(totalBodyLength >> 16);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [10] = (byte)(totalBodyLength >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [10] = (byte)(totalBodyLength >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [11] = (byte)(totalBodyLength);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [12] = (byte)(opaque >> 24);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [12] = (byte)(opaque >> 24);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [13] = (byte)(opaque >> 16);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [13] = (byte)(opaque >> 16);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [14] = (byte)(opaque >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [14] = (byte)(opaque >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [15] = (byte)(opaque);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [16] = (byte)(cas >> 56);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [16] = (byte)(cas >> 56);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [17] = (byte)(cas >> 48);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [17] = (byte)(cas >> 48);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [18] = (byte)(cas >> 40);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [18] = (byte)(cas >> 40);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [19] = (byte)(cas >> 32);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [19] = (byte)(cas >> 32);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [20] = (byte)(cas >> 24);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [20] = (byte)(cas >> 24);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [21] = (byte)(cas >> 16);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [21] = (byte)(cas >> 16);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [22] = (byte)(cas >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [22] = (byte)(cas >> 8);  
Magic Number,FastCouch,RequestStreamWriter,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\RequestStreamWriter.cs,WriteRequestHeader,The following statement contains a magic number: buffer [23] = (byte)(cas);  
Magic Number,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The following statement contains a magic number: if (_readState.CurrentByteOfResponseHeader == _responseHeader.Length) {  	const int keyLengthFieldOffset = 2;  	const int extrasLengthFieldOffset = 4;  	const int responseStatusByteOffset = 6;  	const int totalBodyLengthFieldOffset = 8;  	const int opaqueFieldOffset = 12;  	const int casFieldOffset = 16;  	Opcode opcode = (Opcode)_responseHeader [1];  	if (opcode == Opcode.Quit) {  		_hasQuit = true;  		return;  	}  	var commandId = BitParser.ParseInt (_responseHeader' opaqueFieldOffset);  	//Console.WriteLine(opcode.ToString() + " " + (commandId + Int32.MinValue));  	MemcachedCommand command = _commandRetriever (commandId);  	_readState.Command = command;  	_readState.KeyLength = BitParser.ParseUShort (_responseHeader' keyLengthFieldOffset);  	_readState.ExtrasLength = _responseHeader [extrasLengthFieldOffset];  	_readState.ResponseStatus = BitParser.ParseResponseStatus (_responseHeader' responseStatusByteOffset);  	command.ResponseStatus = _readState.ResponseStatus;  	//TODO: AK TotalBodyLength should *technically* be a uint and not an int. In the .NET world all lengths are typically ints' not uints.  	//      Do we really care about supporting an extra bits worth of body length?  Who is storing values over 2GB in their memcache database?   	var totalBodyLength = BitParser.ParseInt (_responseHeader' totalBodyLengthFieldOffset);  	_readState.ValueLength = totalBodyLength - _readState.ExtrasLength - _readState.KeyLength;  	_readState.Cas = BitParser.ParseLong (_responseHeader' casFieldOffset);  	command.Cas = _readState.Cas;  	if (_readState.ResponseStatus == ResponseStatus.NoError) {  		_currentReadState = ReadResponseExtras;  		ReadResponseExtras ();  	}  	else {  		_currentReadState = ReadError;  		ReadError ();  	}  }  
Magic Number,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The following statement contains a magic number: if (_readState.CurrentByteOfResponseHeader == _responseHeader.Length) {  	const int keyLengthFieldOffset = 2;  	const int extrasLengthFieldOffset = 4;  	const int responseStatusByteOffset = 6;  	const int totalBodyLengthFieldOffset = 8;  	const int opaqueFieldOffset = 12;  	const int casFieldOffset = 16;  	Opcode opcode = (Opcode)_responseHeader [1];  	if (opcode == Opcode.Quit) {  		_hasQuit = true;  		return;  	}  	var commandId = BitParser.ParseInt (_responseHeader' opaqueFieldOffset);  	//Console.WriteLine(opcode.ToString() + " " + (commandId + Int32.MinValue));  	MemcachedCommand command = _commandRetriever (commandId);  	_readState.Command = command;  	_readState.KeyLength = BitParser.ParseUShort (_responseHeader' keyLengthFieldOffset);  	_readState.ExtrasLength = _responseHeader [extrasLengthFieldOffset];  	_readState.ResponseStatus = BitParser.ParseResponseStatus (_responseHeader' responseStatusByteOffset);  	command.ResponseStatus = _readState.ResponseStatus;  	//TODO: AK TotalBodyLength should *technically* be a uint and not an int. In the .NET world all lengths are typically ints' not uints.  	//      Do we really care about supporting an extra bits worth of body length?  Who is storing values over 2GB in their memcache database?   	var totalBodyLength = BitParser.ParseInt (_responseHeader' totalBodyLengthFieldOffset);  	_readState.ValueLength = totalBodyLength - _readState.ExtrasLength - _readState.KeyLength;  	_readState.Cas = BitParser.ParseLong (_responseHeader' casFieldOffset);  	command.Cas = _readState.Cas;  	if (_readState.ResponseStatus == ResponseStatus.NoError) {  		_currentReadState = ReadResponseExtras;  		ReadResponseExtras ();  	}  	else {  		_currentReadState = ReadError;  		ReadError ();  	}  }  
Magic Number,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The following statement contains a magic number: if (_readState.CurrentByteOfResponseHeader == _responseHeader.Length) {  	const int keyLengthFieldOffset = 2;  	const int extrasLengthFieldOffset = 4;  	const int responseStatusByteOffset = 6;  	const int totalBodyLengthFieldOffset = 8;  	const int opaqueFieldOffset = 12;  	const int casFieldOffset = 16;  	Opcode opcode = (Opcode)_responseHeader [1];  	if (opcode == Opcode.Quit) {  		_hasQuit = true;  		return;  	}  	var commandId = BitParser.ParseInt (_responseHeader' opaqueFieldOffset);  	//Console.WriteLine(opcode.ToString() + " " + (commandId + Int32.MinValue));  	MemcachedCommand command = _commandRetriever (commandId);  	_readState.Command = command;  	_readState.KeyLength = BitParser.ParseUShort (_responseHeader' keyLengthFieldOffset);  	_readState.ExtrasLength = _responseHeader [extrasLengthFieldOffset];  	_readState.ResponseStatus = BitParser.ParseResponseStatus (_responseHeader' responseStatusByteOffset);  	command.ResponseStatus = _readState.ResponseStatus;  	//TODO: AK TotalBodyLength should *technically* be a uint and not an int. In the .NET world all lengths are typically ints' not uints.  	//      Do we really care about supporting an extra bits worth of body length?  Who is storing values over 2GB in their memcache database?   	var totalBodyLength = BitParser.ParseInt (_responseHeader' totalBodyLengthFieldOffset);  	_readState.ValueLength = totalBodyLength - _readState.ExtrasLength - _readState.KeyLength;  	_readState.Cas = BitParser.ParseLong (_responseHeader' casFieldOffset);  	command.Cas = _readState.Cas;  	if (_readState.ResponseStatus == ResponseStatus.NoError) {  		_currentReadState = ReadResponseExtras;  		ReadResponseExtras ();  	}  	else {  		_currentReadState = ReadError;  		ReadError ();  	}  }  
Magic Number,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The following statement contains a magic number: if (_readState.CurrentByteOfResponseHeader == _responseHeader.Length) {  	const int keyLengthFieldOffset = 2;  	const int extrasLengthFieldOffset = 4;  	const int responseStatusByteOffset = 6;  	const int totalBodyLengthFieldOffset = 8;  	const int opaqueFieldOffset = 12;  	const int casFieldOffset = 16;  	Opcode opcode = (Opcode)_responseHeader [1];  	if (opcode == Opcode.Quit) {  		_hasQuit = true;  		return;  	}  	var commandId = BitParser.ParseInt (_responseHeader' opaqueFieldOffset);  	//Console.WriteLine(opcode.ToString() + " " + (commandId + Int32.MinValue));  	MemcachedCommand command = _commandRetriever (commandId);  	_readState.Command = command;  	_readState.KeyLength = BitParser.ParseUShort (_responseHeader' keyLengthFieldOffset);  	_readState.ExtrasLength = _responseHeader [extrasLengthFieldOffset];  	_readState.ResponseStatus = BitParser.ParseResponseStatus (_responseHeader' responseStatusByteOffset);  	command.ResponseStatus = _readState.ResponseStatus;  	//TODO: AK TotalBodyLength should *technically* be a uint and not an int. In the .NET world all lengths are typically ints' not uints.  	//      Do we really care about supporting an extra bits worth of body length?  Who is storing values over 2GB in their memcache database?   	var totalBodyLength = BitParser.ParseInt (_responseHeader' totalBodyLengthFieldOffset);  	_readState.ValueLength = totalBodyLength - _readState.ExtrasLength - _readState.KeyLength;  	_readState.Cas = BitParser.ParseLong (_responseHeader' casFieldOffset);  	command.Cas = _readState.Cas;  	if (_readState.ResponseStatus == ResponseStatus.NoError) {  		_currentReadState = ReadResponseExtras;  		ReadResponseExtras ();  	}  	else {  		_currentReadState = ReadError;  		ReadError ();  	}  }  
Magic Number,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The following statement contains a magic number: if (_readState.CurrentByteOfResponseHeader == _responseHeader.Length) {  	const int keyLengthFieldOffset = 2;  	const int extrasLengthFieldOffset = 4;  	const int responseStatusByteOffset = 6;  	const int totalBodyLengthFieldOffset = 8;  	const int opaqueFieldOffset = 12;  	const int casFieldOffset = 16;  	Opcode opcode = (Opcode)_responseHeader [1];  	if (opcode == Opcode.Quit) {  		_hasQuit = true;  		return;  	}  	var commandId = BitParser.ParseInt (_responseHeader' opaqueFieldOffset);  	//Console.WriteLine(opcode.ToString() + " " + (commandId + Int32.MinValue));  	MemcachedCommand command = _commandRetriever (commandId);  	_readState.Command = command;  	_readState.KeyLength = BitParser.ParseUShort (_responseHeader' keyLengthFieldOffset);  	_readState.ExtrasLength = _responseHeader [extrasLengthFieldOffset];  	_readState.ResponseStatus = BitParser.ParseResponseStatus (_responseHeader' responseStatusByteOffset);  	command.ResponseStatus = _readState.ResponseStatus;  	//TODO: AK TotalBodyLength should *technically* be a uint and not an int. In the .NET world all lengths are typically ints' not uints.  	//      Do we really care about supporting an extra bits worth of body length?  Who is storing values over 2GB in their memcache database?   	var totalBodyLength = BitParser.ParseInt (_responseHeader' totalBodyLengthFieldOffset);  	_readState.ValueLength = totalBodyLength - _readState.ExtrasLength - _readState.KeyLength;  	_readState.Cas = BitParser.ParseLong (_responseHeader' casFieldOffset);  	command.Cas = _readState.Cas;  	if (_readState.ResponseStatus == ResponseStatus.NoError) {  		_currentReadState = ReadResponseExtras;  		ReadResponseExtras ();  	}  	else {  		_currentReadState = ReadError;  		ReadError ();  	}  }  
Magic Number,FastCouch,ResponseStreamReader,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\ResponseStreamReader.cs,ReadResponseHeader,The following statement contains a magic number: if (_readState.CurrentByteOfResponseHeader == _responseHeader.Length) {  	const int keyLengthFieldOffset = 2;  	const int extrasLengthFieldOffset = 4;  	const int responseStatusByteOffset = 6;  	const int totalBodyLengthFieldOffset = 8;  	const int opaqueFieldOffset = 12;  	const int casFieldOffset = 16;  	Opcode opcode = (Opcode)_responseHeader [1];  	if (opcode == Opcode.Quit) {  		_hasQuit = true;  		return;  	}  	var commandId = BitParser.ParseInt (_responseHeader' opaqueFieldOffset);  	//Console.WriteLine(opcode.ToString() + " " + (commandId + Int32.MinValue));  	MemcachedCommand command = _commandRetriever (commandId);  	_readState.Command = command;  	_readState.KeyLength = BitParser.ParseUShort (_responseHeader' keyLengthFieldOffset);  	_readState.ExtrasLength = _responseHeader [extrasLengthFieldOffset];  	_readState.ResponseStatus = BitParser.ParseResponseStatus (_responseHeader' responseStatusByteOffset);  	command.ResponseStatus = _readState.ResponseStatus;  	//TODO: AK TotalBodyLength should *technically* be a uint and not an int. In the .NET world all lengths are typically ints' not uints.  	//      Do we really care about supporting an extra bits worth of body length?  Who is storing values over 2GB in their memcache database?   	var totalBodyLength = BitParser.ParseInt (_responseHeader' totalBodyLengthFieldOffset);  	_readState.ValueLength = totalBodyLength - _readState.ExtrasLength - _readState.KeyLength;  	_readState.Cas = BitParser.ParseLong (_responseHeader' casFieldOffset);  	command.Cas = _readState.Cas;  	if (_readState.ResponseStatus == ResponseStatus.NoError) {  		_currentReadState = ReadResponseExtras;  		ReadResponseExtras ();  	}  	else {  		_currentReadState = ReadError;  		ReadError ();  	}  }  
Magic Number,FastCouch,SetCommand,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedCommands\SetCommand.cs,SetCommand,The following statement contains a magic number: this.RequestHeader.ExtrasLength = 8;  
Magic Number,FastCouch,SetCommand,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\MemcachedCommands\SetCommand.cs,WriteValue,The following statement contains a magic number: if (bodyBuffer.Count < 2)  	return 0;  
Missing Default,FastCouch,View,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\View.cs,GetUrlForQuery,The following switch statement is missing a default case: switch (sortDirection) {  case ViewSortDirection.Ascending:  	break;  case ViewSortDirection.Descending:  	UriQueryBuilder.AddToQuery (stringBuilder' "descending"' "true");  	break;  }  
Missing Default,FastCouch,View,C:\repos\akutruff_Couchbase.Net\FastCouch\FastCouch\View.cs,GetUrlForQuery,The following switch statement is missing a default case: switch (stalenessOptions) {  case ViewStalenessOptions.NotStale:  	break;  case ViewStalenessOptions.AllowStale:  	UriQueryBuilder.AddToQuery (stringBuilder' "stale"' "ok");  	break;  case ViewStalenessOptions.AllowStaleButUpdateAfter:  	UriQueryBuilder.AddToQuery (stringBuilder' "stale"' "update_after");  	break;  }  
