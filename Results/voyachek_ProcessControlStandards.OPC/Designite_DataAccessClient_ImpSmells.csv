Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,DataChangeEventArgs,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\DataChangeEventArgs.cs,DataChangeEventArgs,The method has 5 parameters. Parameters: groupId' transactionId' quality' error' values
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCAsyncIO2,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCAsyncIO2.cs,Read,The method has 5 parameters. Parameters: count' serverIds' transactionId' cancelId' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCAsyncIO2,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCAsyncIO2.cs,Write,The method has 6 parameters. Parameters: count' serverIds' values' transactionId' cancelId' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCDataCallback,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCDataCallback.cs,OnDataChange,The method has 10 parameters. Parameters: transactionId' groupId' quality' error' count' clientIds' values' qualities' timeStamps' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCDataCallback,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCDataCallback.cs,OnReadComplete,The method has 10 parameters. Parameters: transactionId' groupId' quality' error' count' clientIds' values' qualities' timeStamps' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCDataCallback,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCDataCallback.cs,OnWriteComplete,The method has 6 parameters. Parameters: transactionId' groupId' error' count' clientIds' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCGroupStateMgt,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCGroupStateMgt.cs,GetState,The method has 8 parameters. Parameters: updateRate' active' name' timeBias' percentDeadband' locale' clientId' serverId
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCGroupStateMgt,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCGroupStateMgt.cs,SetState,The method has 7 parameters. Parameters: requestedUpdateRate' revisedUpdateRate' active' timeBias' percentDeadband' locale' clientId
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCSyncIO,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCSyncIO.cs,Read,The method has 5 parameters. Parameters: source' count' serverIds' values' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,ItemValueReader,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\ItemValueReader.cs,Read,The method has 5 parameters. Parameters: clientIds' values' qualities' timeStamps' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,Group,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\Group.cs,Group,The method has 6 parameters. Parameters: server' clientId' serverId' name' updateRate' group
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,DataCallback,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\Group.cs,OnDataChange,The method has 10 parameters. Parameters: transactionId' groupId' quality' error' count' clientIds' values' qualities' timeStamps' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,DataCallback,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\Group.cs,OnReadComplete,The method has 10 parameters. Parameters: transactionId' groupId' quality' error' count' clientIds' values' qualities' timeStamps' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,DataCallback,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\Group.cs,OnWriteComplete,The method has 6 parameters. Parameters: transactionId' groupId' error' count' clientIds' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCItemMgt,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCItemMgt.cs,ValidateItems,The method has 5 parameters. Parameters: count' itemArray' blobUpdate' validationResults' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCItemProperties,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCItemProperties.cs,QueryAvailableProperties,The method has 5 parameters. Parameters: itemId' count' propertyIds' descriptions' dataTypes
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCItemProperties,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCItemProperties.cs,GetItemProperties,The method has 5 parameters. Parameters: itemId' count' propertyIds' data' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCItemProperties,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCItemProperties.cs,LookupItemIDs,The method has 5 parameters. Parameters: itemId' count' propertyIds' data' errors
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,DAServer,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\DAServer.cs,AddGroup,The method has 5 parameters. Parameters: clientId' name' active' updateRate' percentDeadband
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,DAServer,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\DAServer.cs,AddGroup,The method has 6 parameters. Parameters: clientId' name' active' updateRate' percentDeadband' timeBias
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCBrowseServerAddressSpace,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCBrowseServerAddressSpace.cs,BrowseOPCItemIDs,The method has 5 parameters. Parameters: browseFilterType' filterCriteria' vtDataTypeFilter' dwAccessRightsFilter' ppIEnumString
Long Parameter List,ProcessControlStandards.OPC.DataAccessClient,IOPCServer,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\IOPCServer.cs,AddGroup,The method has 11 parameters. Parameters: name' active' requestedUpdateRate' clientGroup' timeBias' percentDeadband' lcid' serverGroup' revisedUpdateRate' iid' group
Empty Catch Block,ProcessControlStandards.OPC.DataAccessClient,Group,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\Group.cs,Group,The method has an empty catch block.
Empty Catch Block,ProcessControlStandards.OPC.DataAccessClient,Group,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\Group.cs,Group,The method has an empty catch block.
Magic Number,ProcessControlStandards.OPC.DataAccessClient,ItemResultReader,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\ItemResultReader.cs,ItemResultReader,The following statement contains a magic number: stringsToClear = new List<IntPtr>(items.Count * 2);
Magic Number,ProcessControlStandards.OPC.DataAccessClient,ItemResultReader,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\ItemResultReader.cs,ItemResultReader,The following statement contains a magic number: foreach (var item in items)              {  				// string szAccessPath;  	            var accessPath = Marshal.StringToCoTaskMemUni(item.AccessPath);  				stringsToClear.Add(accessPath);  				Marshal.WriteIntPtr(Items' position' accessPath);  				position += IntPtr.Size;    				// string szItemID;  	            var itemId = Marshal.StringToCoTaskMemUni(item.ItemId);  				stringsToClear.Add(itemId);  				Marshal.WriteIntPtr(Items' position' itemId);  				position += IntPtr.Size;    				// int bActive;  				Marshal.WriteInt32(Items' position' item.Active ? 1 : 0);  				position += sizeof(int);    				// uint hClient;  				Marshal.WriteInt32(Items' position' item.ClientId);  				position += sizeof(int);    				// uint dwBlobSize;  				Marshal.WriteInt32(Items' position' 0);  				position += sizeof(int);                  if(IntPtr.Size == 8)                      position += sizeof(int);    				// IntPtr pBlob;  				Marshal.WriteIntPtr(Items' position' IntPtr.Zero);  				position += IntPtr.Size;                    var type = (short)item.RequestedDataType;                  if (item.RequestedDataSubType != VarEnum.VT_EMPTY)                      type = (short)(type | (short) item.RequestedDataSubType);    				// ushort vtRequestedDataType;                  Marshal.WriteInt16(Items' position' type);  				position += sizeof(short);    				// ushort wReserved;  				Marshal.WriteInt16(Items' position' 0);  				position += sizeof(short);                    if (IntPtr.Size == 8)                      position += sizeof(int);              }
Magic Number,ProcessControlStandards.OPC.DataAccessClient,ItemResultReader,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\ItemResultReader.cs,ItemResultReader,The following statement contains a magic number: foreach (var item in items)              {  				// string szAccessPath;  	            var accessPath = Marshal.StringToCoTaskMemUni(item.AccessPath);  				stringsToClear.Add(accessPath);  				Marshal.WriteIntPtr(Items' position' accessPath);  				position += IntPtr.Size;    				// string szItemID;  	            var itemId = Marshal.StringToCoTaskMemUni(item.ItemId);  				stringsToClear.Add(itemId);  				Marshal.WriteIntPtr(Items' position' itemId);  				position += IntPtr.Size;    				// int bActive;  				Marshal.WriteInt32(Items' position' item.Active ? 1 : 0);  				position += sizeof(int);    				// uint hClient;  				Marshal.WriteInt32(Items' position' item.ClientId);  				position += sizeof(int);    				// uint dwBlobSize;  				Marshal.WriteInt32(Items' position' 0);  				position += sizeof(int);                  if(IntPtr.Size == 8)                      position += sizeof(int);    				// IntPtr pBlob;  				Marshal.WriteIntPtr(Items' position' IntPtr.Zero);  				position += IntPtr.Size;                    var type = (short)item.RequestedDataType;                  if (item.RequestedDataSubType != VarEnum.VT_EMPTY)                      type = (short)(type | (short) item.RequestedDataSubType);    				// ushort vtRequestedDataType;                  Marshal.WriteInt16(Items' position' type);  				position += sizeof(short);    				// ushort wReserved;  				Marshal.WriteInt16(Items' position' 0);  				position += sizeof(short);                    if (IntPtr.Size == 8)                      position += sizeof(int);              }
Magic Number,ProcessControlStandards.OPC.DataAccessClient,DAServer,C:\repos\voyachek_ProcessControlStandards.OPC\DataAccessClient\DAServer.cs,GetProperties,The following statement contains a magic number: try  			{  				var position = 0;  				var result = new ServerProperties();    				// FILETIME ftStartTime;  				var time = Marshal.ReadInt64(dataPtr' position);  				result.StartTime = DateTime.FromFileTimeUtc(time);  				position += sizeof(long);    				// FILETIME ftCurrentTime;  				time = Marshal.ReadInt64(dataPtr' position);  				result.CurrentTime = DateTime.FromFileTimeUtc(time);  				position += sizeof(long);    				// FILETIME ftLastUpdateTime;  				time = Marshal.ReadInt64(dataPtr' position);  				result.LastUpdateTime = DateTime.FromFileTimeUtc(time);  				position += sizeof(long);    				// tagOPCSERVERSTATE dwServerState;  				result.ServerState = (ServerState)Marshal.ReadInt32(dataPtr' position);  				position += sizeof(int);    				// uint dwGroupCount;  				result.GroupCount = Marshal.ReadInt32(dataPtr' position);  				position += sizeof(int);    				// uint dwBandWidth;  				result.Bandwidth = Marshal.ReadInt32(dataPtr' position);  				position += sizeof(int);    				// ushort wMajorVersion;  				result.MajorVersion = Marshal.ReadInt16(dataPtr' position);  				position += sizeof(short);    				// ushort wMinorVersion;  				result.MinorVersion = Marshal.ReadInt16(dataPtr' position);  				position += sizeof(short);    				// ushort wBuildNumber;  				result.BuildNumber = Marshal.ReadInt16(dataPtr' position);  				position += sizeof(short);    				// ushort wReserved;  				position += sizeof(short);    				if (IntPtr.Size == 8)  					position += sizeof(int);    				// string szVendorInfo;  				var vendorInfo = Marshal.ReadIntPtr(dataPtr' position);  			    if (vendorInfo != IntPtr.Zero)  			    {                      result.VendorInfo = Marshal.PtrToStringUni(vendorInfo);                      Marshal.FreeCoTaskMem(vendorInfo);  			    }    				return result;  			}  			finally  			{  				if(dataPtr != IntPtr.Zero)  					Marshal.FreeCoTaskMem(dataPtr);				  			}
