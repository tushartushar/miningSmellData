Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintUsersManager,Cyclomatic complexity of the method is 9
Complex Method,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,AssignLicenses,Cyclomatic complexity of the method is 10
Complex Method,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintGroupMembers,Cyclomatic complexity of the method is 13
Complex Method,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintDevicesAndOwners,Cyclomatic complexity of the method is 9
Complex Method,GraphConsoleAppV3,Program,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\Program.cs,Main,Cyclomatic complexity of the method is 17
Long Statement,GraphConsoleAppV3,AuthenticationHelper,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\AuthenticationHelper.cs,GetActiveDirectoryClientAsApplication,The length of the statement  "	ActiveDirectoryClient activeDirectoryClient = new ActiveDirectoryClient (serviceRoot' async () => await AcquireTokenAsyncForApplication ()); " is 140.
Long Statement,GraphConsoleAppV3,AuthenticationHelper,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\AuthenticationHelper.cs,GetTokenForApplication,The length of the statement  "		AuthenticationResult authenticationResult = await authenticationContext.AcquireTokenAsync (GlobalConstants.ResourceUrl' clientCred); " is 132.
Long Statement,GraphConsoleAppV3,AuthenticationHelper,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\AuthenticationHelper.cs,GetActiveDirectoryClientAsUser,The length of the statement  "	ActiveDirectoryClient activeDirectoryClient = new ActiveDirectoryClient (serviceRoot' async () => await AcquireTokenAsyncForUser ()); " is 133.
Long Statement,GraphConsoleAppV3,AuthenticationHelper,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\AuthenticationHelper.cs,GetTokenForUser,The length of the statement  "		AuthenticationResult userAuthnResult = await authenticationContext.AcquireTokenAsync (GlobalConstants.ResourceUrl' UserModeConstants.ClientId' redirectUri' new PlatformParameters (PromptBehavior.RefreshSession)); " is 212.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,UserMode,The length of the statement  "		//TODO: Implement retry and back-off logic per the guidance given here:http://msdn.microsoft.com/en-us/library/dn168916.aspx " is 124.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,UserMode,The length of the statement  "		newUser = await CreateNewUser (client' tenantDetail.VerifiedDomains.First (x => x.@default.HasValue && x.@default.Value)); " is 122.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,AppMode,The length of the statement  "		//TODO: Implement retry and back-off logic per the guidance given here:http://msdn.microsoft.com/en-us/library/dn168916.aspx " is 124.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,GetTenantDetails,The length of the statement  "	// containing your TenantId e.g. "https://sts.windows.net/4fd2b2f2-ea27-4fe5-a8f3-7b1a7c975f34/" is returned for GraphDir1.onMicrosoft.com " is 138.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,GetTenantDetails,The length of the statement  "		IPagedCollection<ITenantDetail> tenantsCollection = await client.TenantDetails.Where (tenantDetail => tenantDetail.ObjectId.Equals (tenantId)).ExecuteAsync (); " is 159.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PeoplePickerExample,The length of the statement  "		searchResults = await userCollection.Where (user => user.UserPrincipalName.StartsWith (searchString) || user.DisplayName.StartsWith (searchString) || user.GivenName.StartsWith (searchString) || user.Surname.StartsWith (searchString)).Take (10).ExecuteAsync (); " is 260.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintUsersGroupsAndRoles,The length of the statement  "		Program.WriteError ("\nError getting Signed in user's groups and roles memberships. {0}"' Program.ExtractErrorMessage (e)); " is 123.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintGroupMembers,The length of the statement  "		IPagedCollection<IGroup> groupsCollection = await client.Groups.Where (g => g.DisplayName.StartsWith (groupName)).ExecuteAsync (); " is 130.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintGroupMembers,The length of the statement  "		Console.WriteLine ("\n Enumerating group members for: " + retrievedGroup.DisplayName + "\n " + retrievedGroup.Description); " is 123.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintGroupMembers,The length of the statement  "						Console.WriteLine ("User DisplayName: {0}  UPN: {1}"' (member as User).DisplayName' (member as User).UserPrincipalName); " is 120.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintDomainVerificationDetails,The length of the statement  "	// get verification details - this onfo is used to update your registrar/DNS host' so that verification can be performed " is 120.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintDomainVerificationDetails,The length of the statement  "				Console.WriteLine ("MX Record:\n  Label: {0}\n  VerifyText: {1}\n  Preference: {2}"' txtRecord.Label' txtRecord.MailExchange' txtRecord.Preference); " is 148.
Long Statement,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,BatchOperations,The length of the statement  "				Console.WriteLine ("Batch Item Result {0} failed. Exception: {1} "' responseCount' result.FailureResult.InnerException); " is 120.
Long Statement,GraphConsoleAppV3,Program,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\Program.cs,Main,The length of the statement  "	Console.WriteLine ("[a] - app-only\n[u] - as user\n[b] - both as user first' and then as app.\nPlease enter your choice:\n"); " is 125.
Long Statement,GraphConsoleAppV3,Program,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\Program.cs,ExtractErrorMessage,The length of the statement  "			Dictionary<string' object> odataError = new JavaScriptSerializer ().Deserialize<Dictionary<string' object>> (exception.Message); " is 128.
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PeoplePickerExample,The following statement contains a magic number: try {  	IUserCollection userCollection = client.Users;  	searchResults = await userCollection.Where (user => user.UserPrincipalName.StartsWith (searchString) || user.DisplayName.StartsWith (searchString) || user.GivenName.StartsWith (searchString) || user.Surname.StartsWith (searchString)).Take (10).ExecuteAsync ();  	usersList = searchResults.CurrentPage.ToList ();  } catch (Exception e) {  	Program.WriteError ("\nError getting User {0}"' Program.ExtractErrorMessage (e));  }  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PeoplePickerExample,The following statement contains a magic number: searchResults = await userCollection.Where (user => user.UserPrincipalName.StartsWith (searchString) || user.DisplayName.StartsWith (searchString) || user.GivenName.StartsWith (searchString) || user.Surname.StartsWith (searchString)).Take (10).ExecuteAsync ();  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,CreateNewUser,The following statement contains a magic number: if (defaultDomain.Name != null) {  	Console.WriteLine ("\nCreating a new user...");  	Console.WriteLine ("\n  Please enter first name for new user:");  	String firstName = Console.ReadLine ();  	Console.WriteLine ("\n  Please enter last name for new user:");  	String lastName = Console.ReadLine ();  	newUser.DisplayName = firstName + " " + lastName;  	newUser.UserPrincipalName = firstName + "." + lastName + Helper.GetRandomString (4) + "@" + defaultDomain.Name;  	newUser.AccountEnabled = true;  	newUser.MailNickname = firstName + lastName;  	newUser.PasswordProfile = new PasswordProfile {  		Password = "ChangeMe123!"'  		ForceChangePasswordNextLogin = true  	};  	newUser.UsageLocation = "US";  	try {  		await client.Users.AddUserAsync (newUser);  		Console.WriteLine ("\nNew User {0} was created"' newUser.DisplayName);  	} catch (Exception e) {  		Program.WriteError ("\nError creating new user {0}"' Program.ExtractErrorMessage (e));  	}  }  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,CreateNewUser,The following statement contains a magic number: newUser.UserPrincipalName = firstName + "." + lastName + Helper.GetRandomString (4) + "@" + defaultDomain.Name;  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintApplications,The following statement contains a magic number: try {  	applications = await client.Applications.Take (50).ExecuteAsync ();  } catch (Exception e) {  	Program.WriteError ("\nError getting Applications {0}"' Program.ExtractErrorMessage (e));  }  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,PrintApplications,The following statement contains a magic number: applications = await client.Applications.Take (50).ExecuteAsync ();  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,CreateOAuth2Permission,The following statement contains a magic number: if (servicePrincipal.ObjectId != null) {  	OAuth2PermissionGrant permissionObject = new OAuth2PermissionGrant {  		ConsentType = "AllPrincipals"'  		Scope = "user_impersonation"'  		StartTime = DateTime.Now'  		ExpiryTime = (DateTime.Now).AddMonths (12)'  		ResourceId = await GetServicePrincipalObjectId (client' GlobalConstants.GraphServiceObjectId)'  		ClientId = servicePrincipal.ObjectId  	};  	try {  		await client.Oauth2PermissionGrants.AddOAuth2PermissionGrantAsync (permissionObject);  		Console.WriteLine ("New Permission object created: " + permissionObject.ObjectId);  	} catch (Exception e) {  		Program.WriteError ("\nError with Permission Creation: {0}"' Program.ExtractErrorMessage (e));  	}  	return permissionObject;  }  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,VerifyDomain,The following statement contains a magic number: try {  	while (!domain.IsVerified && count < 5) {  		count++;  		domain.VerifyAsync ().Wait ();  	}  } catch (Exception e) {  	Program.WriteError ("\nError verifying domain {0}"' Program.ExtractErrorMessage (e));  	Thread.Sleep (1000 * count);  }  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,VerifyDomain,The following statement contains a magic number: try {  	while (!domain.IsVerified && count < 5) {  		count++;  		domain.VerifyAsync ().Wait ();  	}  } catch (Exception e) {  	Program.WriteError ("\nError verifying domain {0}"' Program.ExtractErrorMessage (e));  	Thread.Sleep (1000 * count);  }  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,VerifyDomain,The following statement contains a magic number: while (!domain.IsVerified && count < 5) {  	count++;  	domain.VerifyAsync ().Wait ();  }  
Magic Number,GraphConsoleAppV3,Requests,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\GraphRequests.cs,VerifyDomain,The following statement contains a magic number: Thread.Sleep (1000 * count);  
Magic Number,GraphConsoleAppV3,Helper,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\Helper.cs,GetRandomString,The following statement contains a magic number: return Guid.NewGuid ().ToString ("N").Substring (0' length > 32 ? 32 : length);  
Magic Number,GraphConsoleAppV3,Helper,F:\newReposMay17\AzureADSamples_ConsoleApp-GraphAPI-DotNet\GraphConsoleAppV3\Helper.cs,GetRandomString,The following statement contains a magic number: return Guid.NewGuid ().ToString ("N").Substring (0' length > 32 ? 32 : length);  
