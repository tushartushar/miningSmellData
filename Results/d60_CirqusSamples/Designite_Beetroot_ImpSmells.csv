Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Beetroot,Program,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\Program.cs,Main,The length of the statement  "	var beetrootCrushingTimeView = new MsSqlViewManager<BeetrootCrushingTimeView> (ConnectionStringName' "BeetrootCrushingTimeView"); " is 129.
Long Statement,Beetroot,Program,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\Program.cs,Main,The length of the statement  "	var commandProcessor = CommandProcessor.With ().Logging (l => l.UseConsole (minLevel: Logger.Level.Warn)).EventStore (e => e.UseSqlServer (ConnectionStringName' "Events"' automaticallyCreateSchema: true)).EventDispatcher (e =>  { " is 229.
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: if (howMuch <= 0) {  	// this is your punishment for being so sloppy with the arguments  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	throw new ArgumentException (string.Format ("Attempted to squeeze by {0}' but it must be positive!"' howMuch));  }  
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: if (howMuch <= 0) {  	// this is your punishment for being so sloppy with the arguments  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	throw new ArgumentException (string.Format ("Attempted to squeeze by {0}' but it must be positive!"' howMuch));  }  
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: if (howMuch <= 0) {  	// this is your punishment for being so sloppy with the arguments  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	throw new ArgumentException (string.Format ("Attempted to squeeze by {0}' but it must be positive!"' howMuch));  }  
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: if (howMuch <= 0) {  	// this is your punishment for being so sloppy with the arguments  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	Console.Write (".");  	Thread.Sleep (500);  	throw new ArgumentException (string.Format ("Attempted to squeeze by {0}' but it must be positive!"' howMuch));  }  
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Beetroot.AggregateRoots,Beetroot,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\AggregateRoots\Beetroot.cs,Squeeze,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Beetroot,Program,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\Program.cs,GetHowMuch,The following statement contains a magic number: using (var timer = new Timer ()) {  	timer.Interval = 10;  	timer.Elapsed += delegate {  		var elapsedSeconds = (DateTime.UtcNow - startTime).TotalSeconds;  		sine = Math.Sin (elapsedSeconds * 5 + randomPhaseShift);  		Console.WriteLine ("{0:0.00}   "' sine);  		Console.SetCursorPosition (Console.CursorLeft' Console.CursorTop - 1);  	};  	timer.Start ();  	Console.ReadLine ();  	Console.WriteLine ();  }  
Magic Number,Beetroot,Program,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\Program.cs,GetHowMuch,The following statement contains a magic number: using (var timer = new Timer ()) {  	timer.Interval = 10;  	timer.Elapsed += delegate {  		var elapsedSeconds = (DateTime.UtcNow - startTime).TotalSeconds;  		sine = Math.Sin (elapsedSeconds * 5 + randomPhaseShift);  		Console.WriteLine ("{0:0.00}   "' sine);  		Console.SetCursorPosition (Console.CursorLeft' Console.CursorTop - 1);  	};  	timer.Start ();  	Console.ReadLine ();  	Console.WriteLine ();  }  
Magic Number,Beetroot,Program,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\Program.cs,GetHowMuch,The following statement contains a magic number: timer.Interval = 10;  
Magic Number,Beetroot,Program,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\Program.cs,GetHowMuch,The following statement contains a magic number: timer.Elapsed += delegate {  	var elapsedSeconds = (DateTime.UtcNow - startTime).TotalSeconds;  	sine = Math.Sin (elapsedSeconds * 5 + randomPhaseShift);  	Console.WriteLine ("{0:0.00}   "' sine);  	Console.SetCursorPosition (Console.CursorLeft' Console.CursorTop - 1);  };  
Magic Number,Beetroot,Program,C:\repos\d60_CirqusSamples\Beetroot\Beetroot\Program.cs,GetHowMuch,The following statement contains a magic number: sine = Math.Sin (elapsedSeconds * 5 + randomPhaseShift);  
