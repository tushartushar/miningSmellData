Implementation smell,Namespace,Class,File,Method,Description
Long Method,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The method has 114 lines of code.
Long Method,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The method has 199 lines of code.
Long Method,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,GetNextToken,The method has 100 lines of code.
Complex Method,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,NGettext.Plural,AstPluralRule,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\AstPluralRule.cs,Evaluate,Cyclomatic complexity of the method is 18
Complex Method,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,Cyclomatic complexity of the method is 21
Complex Method,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,GetNextToken,Cyclomatic complexity of the method is 25
Long Parameter List,NGettext,Catalog,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Catalog.cs,GetParticularPluralString,The method has 5 parameters. Parameters: context' text' pluralText' n' args
Long Parameter List,NGettext,ICatalog,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\ICatalog.cs,GetParticularPluralString,The method has 5 parameters. Parameters: context' text' pluralText' n' args
Long Parameter List,NGettext.Loaders,ReadOnlyStreamWrapper,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\ReadOnlyStreamWrapper.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,NGettext.Loaders,ReadOnlyStreamWrapper,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\ReadOnlyStreamWrapper.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Statement,NGettext,Catalog,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Catalog.cs,GetParticularPluralString,The length of the statement  "			return String.Format(this.CultureInfo' this.GetPluralStringDefault(context + CONTEXT_GLUE + text' text' pluralText' n)' args); " is 126.
Long Statement,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The length of the statement  "				Trace.WriteLine(String.Format("MO File Revision: {0}.{1}."' parsedFile.FormatRevision.Major' parsedFile.FormatRevision.Minor)' "NGettext"); " is 139.
Long Statement,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The length of the statement  "					throw new CatalogLoadingException(String.Format("Unsupported MO file major revision: {0}."' parsedFile.FormatRevision.Major)); " is 126.
Long Statement,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The length of the statement  "					var translatedStrings = this._ReadStrings(reader' translationTable[i].Offset' translationTable[i].Length' parsedFile.Encoding); " is 127.
Long Statement,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The length of the statement  "									Trace.WriteLine(String.Format("File encoding switched to \"{0}\" (\"{1}\" requested)."' parsedFile.Encoding' contentType.CharSet)' "NGettext"); " is 143.
Long Statement,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The length of the statement  "								throw new CatalogLoadingException(String.Format("Unable to change parser encoding using the Content-Type header: \"{0}\"."' exception.Message)' exception); " is 155.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "			Trace.WriteLine(String.Format("Creating a built-in plural rule for langcode \"{0}\" for locale \"{1}\"."' langCode' cultureInfo.Name)' "NGettext"); " is 147.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5))))); " is 187.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4)))); " is 159.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2)); " is 129.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2)); " is 167.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2)); " is 189.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2)); " is 157.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3))); " is 145.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3))); " is 182.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5))))); " is 146.
Long Statement,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The length of the statement  "					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3)))); " is 204.
Long Statement,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AdvancePosition,The length of the statement  "				throw new ParserException(String.Format("Expected token \"{0}\" but received \"{1}\""' expectedTokenType' this.CurrentToken.Type)); " is 131.
Long Statement,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,GetNextToken,The length of the statement  "						throw new ParserException(String.Format("Found invalid character \"{0}\" after character \"{1}\" in input stream."' this.Input[this.Position]' character)); " is 155.
Long Statement,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,GetNextToken,The length of the statement  "					throw new ParserException(String.Format("Found invalid character \"{0}\" in input stream at position {1}."' character' this.Position)); " is 135.
Virtual Method Call from Constructor,NGettext,Catalog,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Catalog.cs,Catalog,The constructor "Catalog" calls a virtual method "CreateRule".
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt16,The following statement contains a magic number: this._FillBuffer(2);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt16,The following statement contains a magic number: return (short)(this._Buffer[1] | this._Buffer[0] << 8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt16,The following statement contains a magic number: this._FillBuffer(2);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(this._Buffer[1] | this._Buffer[0] << 8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: this._FillBuffer(4);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: this._FillBuffer(4);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)(this._Buffer[3] | this._Buffer[2] << 8 | this._Buffer[1] << 16 | this._Buffer[0] << 24);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt64,The following statement contains a magic number: this._FillBuffer(8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadInt64,The following statement contains a magic number: Array.Reverse(this._Buffer' 0' 8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt64,The following statement contains a magic number: this._FillBuffer(8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadUInt64,The following statement contains a magic number: Array.Reverse(this._Buffer' 0' 8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadSingle,The following statement contains a magic number: this._FillBuffer(4);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadSingle,The following statement contains a magic number: Array.Reverse(this._Buffer' 0' 4);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadDouble,The following statement contains a magic number: this._FillBuffer(8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,ReadDouble,The following statement contains a magic number: Array.Reverse(this._Buffer' 0' 8);
Magic Number,NGettext.Loaders,BigEndianBinaryReader,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\BigEndianBinaryReader.cs,_FillBuffer,The following statement contains a magic number: numBytes < 2 || numBytes > this._Buffer.Length
Magic Number,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The following statement contains a magic number: stream == null || stream.Length < 20
Magic Number,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,Parse,The following statement contains a magic number: var parsedFile = new MoFile(new Version(revision >> 16' revision & 0xffff)' this.DefaultEncoding' bigEndian);
Magic Number,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,_ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 |  				   (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;
Magic Number,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,_ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 |  				   (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;
Magic Number,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,_ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 |  				   (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;
Magic Number,NGettext.Loaders,MoFileParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Loaders\MoFileParser.cs,_ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 |  				   (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;
Magic Number,NGettext.Plural,AstPluralRule,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\AstPluralRule.cs,Evaluate,The following statement contains a magic number: switch (node.Type)  			{  				case TokenType.Number:  					return node.Value;    				case TokenType.N:  					return number;    				case TokenType.Plus:  					return this.Evaluate(node.Children[0]' number)  						 + this.Evaluate(node.Children[1]' number);    				case TokenType.Minus:  					return this.Evaluate(node.Children[0]' number)  						 - this.Evaluate(node.Children[1]' number);    				case TokenType.Divide:  					return this.Evaluate(node.Children[0]' number)  						 / this.Evaluate(node.Children[1]' number);    				case TokenType.Multiply:  					return this.Evaluate(node.Children[0]' number)  						 * this.Evaluate(node.Children[1]' number);    				case TokenType.Modulo:  					return this.Evaluate(node.Children[0]' number)  						 % this.Evaluate(node.Children[1]' number);    				case TokenType.GreaterThan:  					return this.Evaluate(node.Children[0]' number)  						 > this.Evaluate(node.Children[1]' number)  						 ? 1 : 0;    				case TokenType.GreaterOrEquals:  					return this.Evaluate(node.Children[0]' number)  						>= this.Evaluate(node.Children[1]' number)  						 ? 1 : 0;    				case TokenType.LessThan:  					return this.Evaluate(node.Children[0]' number)  						 < this.Evaluate(node.Children[1]' number)  						 ? 1 : 0;    				case TokenType.LessOrEquals:  					return this.Evaluate(node.Children[0]' number)  						<= this.Evaluate(node.Children[1]' number)  						 ? 1 : 0;    				case TokenType.Equals:  					return this.Evaluate(node.Children[0]' number)  						== this.Evaluate(node.Children[1]' number)  						 ? 1 : 0;    				case TokenType.NotEquals:  					return this.Evaluate(node.Children[0]' number)  						!= this.Evaluate(node.Children[1]' number)  						 ? 1 : 0;    				case TokenType.And:  					return this.Evaluate(node.Children[0]' number) != 0  						&& this.Evaluate(node.Children[1]' number) != 0  						 ? 1 : 0;    				case TokenType.Or:  					return this.Evaluate(node.Children[0]' number) != 0  						|| this.Evaluate(node.Children[1]' number) != 0  						 ? 1 : 0;    				case TokenType.Not:  					return this.Evaluate(node.Children[0]' number) == 0  						 ? 1 : 0;    				case TokenType.TernaryIf:  					return this.Evaluate(node.Children[0]' number) != 0  						 ? this.Evaluate(node.Children[1]' number)  						 : this.Evaluate(node.Children[2]' number);    				default:  					throw new InvalidOperationException(String.Format("Can not evaluate token: {0}."' node.Type));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following statement contains a magic number: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterTokenDefinition(TokenType.TernaryIf' 20)  				.SetLeftDenotationGetter((self' left) => {  					self.Children[0] = left;  					self.Children[1] = this.ParseNextExpression();  					this.AdvancePosition(TokenType.TernaryElse);  					self.Children[2] = this.ParseNextExpression();  					return self;  				});
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterTokenDefinition(TokenType.TernaryIf' 20)  				.SetLeftDenotationGetter((self' left) => {  					self.Children[0] = left;  					self.Children[1] = this.ParseNextExpression();  					this.AdvancePosition(TokenType.TernaryElse);  					self.Children[2] = this.ParseNextExpression();  					return self;  				});
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.Or' 30);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.And' 40);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.Equals' 50);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.NotEquals' 50);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.GreaterThan' 50);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.LessThan' 50);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.GreaterOrEquals' 50);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.LessOrEquals' 50);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.Minus' 60);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.Plus' 60);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.Multiply' 70);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.Divide' 70);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterLeftInfixTokenDefinition(TokenType.Modulo' 70);
Magic Number,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,AstTokenParser,The following statement contains a magic number: this.RegisterPrefixTokenDefinition(TokenType.Not' 80);
Missing Default,NGettext.Plural,DefaultPluralRuleGenerator,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\DefaultPluralRuleGenerator.cs,CreateRule,The following switch statement is missing a default case: switch (langCode)  			{  				case "az":  				case "bm":  				case "bo":  				case "dz":  				case "fa":  				case "id":  				case "ig":  				case "ii":  				case "hu":  				case "ja":  				case "jv":  				case "ka":  				case "kde":  				case "kea":  				case "km":  				case "kn":  				case "ko":  				case "lo":  				case "ms":  				case "my":  				case "sah":  				case "ses":  				case "sg":  				case "th":  				case "to":  				case "tr":  				case "vi":  				case "wo":  				case "yo":  				case "zh":  					return new PluralRule(1' number => 0);    				case "ar":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5)))));    				case "asa":  				case "af":  				case "bem":  				case "bez":  				case "bg":  				case "bn":  				case "brx":  				case "ca":  				case "cgg":  				case "chr":  				case "da":  				case "de":  				case "dv":  				case "ee":  				case "el":  				case "en":  				case "eo":  				case "es":  				case "et":  				case "eu":  				case "fi":  				case "fo":  				case "fur":  				case "fy":  				case "gl":  				case "gsw":  				case "gu":  				case "ha":  				case "haw":  				case "he":  				case "is":  				case "it":  				case "jmc":  				case "kaj":  				case "kcg":  				case "kk":  				case "kl":  				case "ksb":  				case "ku":  				case "lb":  				case "lg":  				case "mas":  				case "ml":  				case "mn":  				case "mr":  				case "nah":  				case "nb":  				case "nd":  				case "ne":  				case "nl":  				case "nn":  				case "no":  				case "nr":  				case "ny":  				case "nyn":  				case "om":  				case "or":  				case "pa":  				case "pap":  				case "ps":  				case "pt":  				case "rof":  				case "rm":  				case "rwk":  				case "saq":  				case "seh":  				case "sn":  				case "so":  				case "sq":  				case "ss":  				case "ssy":  				case "st":  				case "sv":  				case "sw":  				case "syr":  				case "ta":  				case "te":  				case "teo":  				case "tig":  				case "tk":  				case "tn":  				case "ts":  				case "ur":  				case "wae":  				case "ve":  				case "vun":  				case "xh":  				case "xog":  				case "zu":  					return new PluralRule(2' number => (number == 1) ? 0 : 1);    				case "ak":  				case "am":  				case "bh":  				case "fil":  				case "ff":  				case "fr":  				case "guw":  				case "hi":  				case "kab":  				case "ln":  				case "mg":  				case "nso":  				case "ti":  				case "wa":  					return new PluralRule(2' number => ((number == 0) || (number == 1)) ? 0 : 1);    				case "lv":  					return new PluralRule(3' number => (number == 0) ? 0 : (((number % 10 == 1) && (number % 100 != 11)) ? 1 : 2));    				case "iu":  				case "kw":  				case "naq":  				case "se":  				case "sma":  				case "smi":  				case "smj":  				case "smn":  				case "sms":  					return new PluralRule(3' number => (number == 1) ? 0 : ((number == 2) ? 1 : 2));    				case "ga":  					return new PluralRule(5' number => (number == 1) ? 0 : ((number == 2) ? 1 : (((number >= 3) && (number <= 6)) ? 2 : ((number >= 7 && number <= 10) ? 3 : 4))));    				case "ro":  				case "mo":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2));    				case "lt":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "be":  				case "bs":  				case "hr":  				case "ru":  				case "sh":  				case "sr":  				case "uk":  					return new PluralRule(3' number => ((number % 10 == 1) && (number % 100 != 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2));    				case "cs":  				case "sk":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2));    				case "pl":  					return new PluralRule(3' number => (number == 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2));    				case "sl":  					return new PluralRule(4' number => (number % 100 == 1) ? 0 : ((number % 100 == 2) ? 1 : (((number % 100 == 3) || (number % 100 == 4)) ? 2 : 3)));    				case "mt":  					return new PluralRule(4' number => (number == 1) ? 0 : (((number == 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3)));    				case "mk":  					return new PluralRule(2' number => ((number % 10 == 1) && (number != 11)) ? 0 : 1);    				case "cy":  					return new PluralRule(6' number => (number == 0) ? 0 : ((number == 1) ? 1 : ((number == 2) ? 2 : ((number == 3) ? 3 : ((number == 6) ? 4 : 5)))));    				case "lag":  				case "ksh":  					return new PluralRule(3' number => (number == 0) ? 0 : ((number == 1) ? 1 : 2));    				case "shi":  					return new PluralRule(3' number => ((number == 0) && (number == 1)) ? 0 : (((number >= 2) && (number <= 10)) ? 1 : 2));    				case "tzm":  					return new PluralRule(2' number => ((number == 0) || (number == 1) || (((number >= 11) && (number <= 99)))) ? 0 : 1);    				case "gv":  					return new PluralRule(2' number => ((number % 10 == 1) || (number % 10 == 2) || (number % 20 == 0)) ? 0 : 1);    				case "gd":  					return new PluralRule(4' number => ((number == 1) || (number == 11)) ? 0 : (((number == 2) || (number == 12)) ? 1 : (((((number >= 3) && (number <= 10)) || ((number >= 13) && (number <= 19))) ? 2 : 3))));  			}
Missing Default,NGettext.Plural.Ast,AstTokenParser,C:\research\architectureSmells\repos\neris_NGettext\src\NGettext\Plural\Ast\AstTokenParser.cs,GetNextToken,The following switch statement is missing a default case: switch (character)  						{  							case '=': tokenType = TokenType.Equals; break;  							case '&': tokenType = TokenType.And; break;  							case '|': tokenType = TokenType.Or; break;  						}
