Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The method has 228 lines of code.
Long Method,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetWindowList,The method has 125 lines of code.
Long Method,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The method has 109 lines of code.
Long Method,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKey,The method has 137 lines of code.
Long Method,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,The method has 132 lines of code.
Long Method,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The method has 358 lines of code.
Long Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetWindowHandle,The method has 294 lines of code.
Long Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,The method has 162 lines of code.
Long Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,The method has 217 lines of code.
Long Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The method has 104 lines of code.
Complex Method,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,Cyclomatic complexity of the method is 9
Complex Method,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,Cyclomatic complexity of the method is 28
Complex Method,Ldtpd,ObjInfo,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\CommonStruct.cs,GetObjectType,Cyclomatic complexity of the method is 27
Complex Method,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetWindowList,Cyclomatic complexity of the method is 14
Complex Method,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAllStates,Cyclomatic complexity of the method is 10
Complex Method,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,Cyclomatic complexity of the method is 14
Complex Method,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectName,Cyclomatic complexity of the method is 13
Complex Method,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,Cyclomatic complexity of the method is 12
Complex Method,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKey,Cyclomatic complexity of the method is 52
Complex Method,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,Cyclomatic complexity of the method is 20
Complex Method,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,Cyclomatic complexity of the method is 39
Complex Method,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,GenerateMouseEvent,Cyclomatic complexity of the method is 13
Complex Method,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,Cyclomatic complexity of the method is 11
Complex Method,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,GetTextValue,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetWindowHandle,Cyclomatic complexity of the method is 28
Complex Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,Cyclomatic complexity of the method is 23
Complex Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,Cyclomatic complexity of the method is 27
Complex Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalWaitTillControlTypeExist,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalWaitTillGuiNotExist,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,Cyclomatic complexity of the method is 19
Long Parameter List,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The method has 6 parameters. Parameters: windowName' objName' item' selectedItem' actionType' childList
Long Parameter List,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,SetCellValue,The method has 5 parameters. Parameters: windowName' objName' row' column' data
Long Parameter List,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,CompareTextProperty,The method has 5 parameters. Parameters: windowName' objName' textProperty' start' end
Long Parameter List,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,ContainsTextProperty,The method has 5 parameters. Parameters: windowName' objName' textProperty' start' end
Long Parameter List,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,SelectTextByIndexAndRegion,The method has 5 parameters. Parameters: windowName' objName' start' end' selectionNumber
Long Parameter List,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,SimulateMouseMove,The method has 5 parameters. Parameters: source_x' source_y' dest_x' dest_y' delay
Long Parameter List,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,LaunchApp,The method has 5 parameters. Parameters: cmd' args' delay' env' lang
Long Parameter List,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,ImageCapture,The method has 5 parameters. Parameters: windowName' x' y' width' height
Long Parameter List,Ldtpd,Image,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Image.cs,Capture,The method has 5 parameters. Parameters: windowName' x' y' width' height
Long Parameter List,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The method has 5 parameters. Parameters: source_x' source_y' dest_x' dest_y' delay
Long Parameter List,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The method has 5 parameters. Parameters: windowName' objName' row' column' data
Long Parameter List,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,The method has 5 parameters. Parameters: childHandle' objName' type' objectList' objInfo
Long Parameter List,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,The method has 9 parameters. Parameters: windowHandle' objectList' objectHT' matchedKey' needAll' objName' parentName' type' objInfo
Long Statement,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,GetCursorPosition,The length of the statement  "            // http://stackoverflow.com/questions/10720162/set-text-on-textfield-textbox-with-the-automation-framework-and-get-the-change " is 125.
Complex Conditional,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The conditional expression  "childHandle.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                      out pattern) || childHandle.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern) ||                      (elementItem != null && elementItem.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern))"  is complex.
Complex Conditional,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The conditional expression  "childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem"  is complex.
Complex Conditional,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectNameAtCoords,The conditional expression  "aimElement == null ||                      aimElement.Current.ClassName == "SysListView32" ||                      aimElement.Current.ClassName == "Shell_TrayWnd" ||                      aimElement.Current.ClassName == "MSTaskListWClass" ||                      aimElement.Current.ControlType == ControlType.Window ||                      aimElement.Current.ControlType == ControlType.TitleBar ||                      w.walker.GetParent(aimElement).Current.Name == "Context""  is complex.
Complex Conditional,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The conditional expression  "String.IsNullOrEmpty(windowName) ||                  (String.IsNullOrEmpty(parentName) &&                  String.IsNullOrEmpty(childName) &&                  String.IsNullOrEmpty(role))"  is complex.
Complex Conditional,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The conditional expression  "(String.IsNullOrEmpty(role) ||                                  (!String.IsNullOrEmpty(role) &&                                  (string)ht["class"] == role)) &&                                  ((ht.ContainsKey("label") &&                                  (string)ht["label"] != null &&                                  rx.Match((string)ht["label"]).Success) ||                                  (ht.ContainsKey("key") &&                                  (string)ht["key"] != null &&                                  rx.Match((string)ht["key"]).Success))"  is complex.
Complex Conditional,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The conditional expression  "(actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false)"  is complex.
Complex Conditional,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The conditional expression  "actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window""  is complex.
Complex Conditional,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseLeftClick,The conditional expression  "childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem"  is complex.
Complex Conditional,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The conditional expression  "source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1]"  is complex.
Complex Conditional,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,CopyText,The conditional expression  "start < 0 || end != -1 && (start > end || end < start)"  is complex.
Complex Conditional,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,CutText,The conditional expression  "start < 0 || end != -1 && (start > end || end < start)"  is complex.
Complex Conditional,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,DeleteText,The conditional expression  "start < 0 || end != -1 && (start > end || end < start)"  is complex.
Complex Conditional,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,The conditional expression  "(isAutomationId && automationId == element.Current.AutomationId) ||                          (isObjIndex && !String.IsNullOrEmpty(objIndex) && rx.Match(objIndex).Success) ||                          (!isAutomationId && !isObjIndex &&                          (s != null && rx.Match(s).Success) ||                          (actualString != null && rx.Match(actualString).Success))"  is complex.
Complex Conditional,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,The conditional expression  "(isAutomationId && !String.IsNullOrEmpty(automationId) &&                              automationId == element.Current.AutomationId) ||                              (isObjIndex && !String.IsNullOrEmpty(objIndex) && rx.Match(objIndex).Success) ||                              (!isAutomationId && !isObjIndex &&                              (s != null && rx != null && rx.Match(s).Success) ||                              (utf8 != null && rx != null && rx.Match(utf8).Success))"  is complex.
Empty Catch Block,Ldtpd,WindowList,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\WindowList.cs,OnWindowCreate,The method has an empty catch block.
Empty Catch Block,Ldtpd,WindowList,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\WindowList.cs,OnWindowDelete,The method has an empty catch block.
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[3] { ControlType.ComboBox'                  ControlType.ListItem' ControlType.List/*' ControlType.Text */ };
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Argument cannot be null or empty.");
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find item in the list: " + itemText);
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following statement contains a magic number: ControlType[] comboTtype = new ControlType[3] { ControlType.ComboBox'                  ControlType.ListItem' ControlType.List/*' ControlType.Text */ };
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Object state is disabled");
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following statement contains a magic number: i < 5
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Index out of range: " + index);
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to select item.");
Magic Number,Ldtpd,Common,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Common.cs,Wait,The following statement contains a magic number: Thread.Sleep((int)(waitTime * 1000));
Magic Number,Ldtpd,Common,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Common.cs,LogMessage,The following statement contains a magic number: logStack.Count == 1000
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,ObjectTimeOut,The following statement contains a magic number: this.objectTimeOut = 5;
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,GuiTimeOut,The following statement contains a magic number: this.windowRetry = 3;
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,Remap,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,ActivateText,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,GetCursorPosition,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,CompareTextProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Not implemented.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,ContainsTextProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Not implemented.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,GetTextProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Not implemented.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,SetCursorPosition,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,SelectTextByName,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Core,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Core.cs,SelectTextByIndexAndRegion,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectList,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectList,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to find window: " +                      windowName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAllStates,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Unable to get row count.");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The following statement contains a magic number: ControlType[] type = new ControlType[11] { ControlType.Button'                  ControlType.CheckBox' ControlType.RadioButton'                  ControlType.SplitButton' ControlType.Menu' ControlType.ListItem'                  ControlType.MenuItem' ControlType.MenuBar' ControlType.Pane'                  ControlType.Hyperlink' ControlType.ToolBar };
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Object state is disabled");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAccessKey,The following statement contains a magic number: throw new XmlRpcFaultException(123' "No access key associated");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetWindowSize,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectInfo,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectInfo,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectInfo,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find Object info: " + objName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to find Object property: " +                  property + " of object: " + objName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectNameAtCoords,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get object name");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Unable to find child object: " + childName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported parameter type passed");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GrabFocus,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GrabFocus,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);
Magic Number,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,GrabFocus,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find Object: " + objName);
Magic Number,Ldtpd,Image,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Image.cs,Capture,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Unable to find window: " + windowName);
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKey,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unsupported key type: " + key);
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKeyVal,The following statement contains a magic number: int maxTokenSize = 15;
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKeyVal,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Premature end of string without an opening '<'.");
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,EnterString,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyPress,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyPress,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyRelease,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Keyboard,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyRelease,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,IsMenuChecked,The following statement contains a magic number: isChecked = (state & 16) == 16 ? 1 : 0;
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,IsMenuChecked,The following statement contains a magic number: isChecked = (state & 16) == 16 ? 1 : 0;
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,HandleSubMenu,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be null.");
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: ControlType[] type = new ControlType[3] { ControlType.Menu'                  ControlType.MenuBar' ControlType.MenuItem };
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: ControlType[] controlType = new ControlType[3] { ControlType.Menu'                  ControlType.MenuItem' ControlType.MenuBar };
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + objName);
Magic Number,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Object state is disabled");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseLeftClick,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Object state is disabled");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseLeftClick,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Object state is disabled");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b3c");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b3c");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Object state is disabled");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b1d");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b1d");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Object state is disabled");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "abs");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "abs");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,GenerateMouseEvent,The following statement contains a magic number: switch (type)              {                  case "b1p":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.LeftDown);                      break;                  case "b1r":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.LeftUp);                      break;                  case "b1c":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftUp);                      break;                  case "b1d":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftUp);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftUp);                      break;                  case "b2p":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.MiddleDown);                      break;                  case "b2r":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.MiddleUp);                      break;                  case "b2c":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.MiddleDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.MiddleUp);                      break;                  case "b3p":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.RightDown);                      break;                  case "b3r":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.RightUp);                      break;                  case "b3c":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.RightDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.RightUp);                      break;                  case "abs":                      Input.SendMouseInput(pt.X' pt.Y' 0'                          SendMouseInputFlags.Move | SendMouseInputFlags.Absolute);                      break;                  case "rel":                      Input.SendMouseInput(pt.X' pt.Y' 0' SendMouseInputFlags.Move);                      break;                  default:                      throw new XmlRpcFaultException(123'                          "Unsupported mouse type: " + type);              }
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1]
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1]
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1]
Magic Number,Ldtpd,Mouse,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1]
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetCurrentCpuUsage,The following statement contains a magic number: value = Math.Round(value' 2' MidpointRounding.AwayFromZero);
Magic Number,Ldtpd,ProcessStats,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,StartProcessMonitor,The following statement contains a magic number: interval = 2;
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: ((RangeValuePattern)pattern).SetValue(value + 3);
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: (value + 3) < ((RangeValuePattern)pattern).Current.Maximum
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one down");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: ((RangeValuePattern)pattern).SetValue(value - 3);
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: (value - 3) > ((RangeValuePattern)pattern).Current.Minimum
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one up");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: ((RangeValuePattern)pattern).SetValue(value - 3);
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: (value - 3) > ((RangeValuePattern)pattern).Current.Minimum
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one left");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: ((RangeValuePattern)pattern).SetValue(value + 3);
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: (value + 3) < ((RangeValuePattern)pattern).Current.Maximum
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one right");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollDown,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollDown,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll down");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollUp,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollUp,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll up");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollLeft,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollLeft,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll left");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollRight,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Scrollbar,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollRight,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll right");
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[2] { ControlType.Tab'                  ControlType.TabItem };
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in tab list: " + tabName);
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to select item.");
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabName,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabName,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find item.");
Magic Number,Ldtpd,Tab,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabCount,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetObjectHandle,The following statement contains a magic number: type = new ControlType[6] { ControlType.Tree'                      ControlType.List' ControlType.Table'                      ControlType.DataItem' ControlType.ListItem'                      ControlType.TreeItem };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,DoesRowExist,The following statement contains a magic number: type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + text);
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b3c");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b3c");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + text);
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,VerifySelectRow,The following statement contains a magic number: type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to select item.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to expand item.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Not implemented");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to set item value.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to get item value.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellSize,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellSize,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to get item size.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetTableRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetTableRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to get row index: " + cellValue);
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetRowCount,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,GetRowCount,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Unable to get row count.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' clickType);
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' clickType);
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + text);
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b1d");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b1d");
Magic Number,Ldtpd,Tree,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + row);
Magic Number,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[5] { ControlType.Edit'                  ControlType.Document' ControlType.ComboBox' ControlType.Pane'                  ControlType.Text };
Magic Number,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,SetTextValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Object state is disabled");
Magic Number,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,AppendText,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");
Magic Number,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,CopyText,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Invalid argument.");
Magic Number,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,CutText,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Invalid argument.");
Magic Number,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,DeleteText,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Invalid argument.");
Magic Number,Ldtpd,Text,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Text.cs,InsertText,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,BackgroundThread,The following statement contains a magic number: InternalWait(10);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,GetWindowHandle,The following statement contains a magic number: !thread.Join(30000)
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find Object: " + objName);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,IsEnabled,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalClick,The following statement contains a magic number: Point pt = new Point(rect.X + rect.Width / 2'                  rect.Y + rect.Height / 2);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalClick,The following statement contains a magic number: Point pt = new Point(rect.X + rect.Width / 2'                  rect.Y + rect.Height / 2);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Argument cannot be empty.");
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: ControlType[] type = new ControlType[2] { ControlType.CheckBox'                  ControlType.RadioButton };
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to find Object: " + objName);
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: switch (actionType)                      {                          case "VerifyCheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                                  return 1;                              return 0;                          case "VerifyUncheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.Off)                                  return 1;                              return 0;                          case "Check":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                              {                                  LogMessage("Checkbox / Radio button already checked");                                  return 1;                              }                              break;                          case "UnCheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.Off)                              {                                  LogMessage("Checkbox / Radio button already unchecked");                                  return 1;                              }                              break;                          default:                              throw new XmlRpcFaultException(123' "Unsupported actionType");                      }
Magic Number,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported pattern to perform action");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[2] { ControlType.Slider'                  ControlType.Spinner };
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,SetValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                          "Object state is disabled");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,SetValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Control is read-only.");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,SetValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to set value");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Control is read-only.");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Control is read-only.");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetMaxValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Control is read-only.");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetMaxValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinIncrement,The following statement contains a magic number: throw new XmlRpcFaultException(123'                              "Control is read-only.");
Magic Number,Ldtpd,Value,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinIncrement,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,WindowList,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\WindowList.cs,BackgroundThread,The following statement contains a magic number: common.Wait(10);
Duplicate Code,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetWindowHandle,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 62)' (233' 254))
Missing Default,Ldtpd,Combobox,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following switch statement is missing a default case: switch (actionType)                          {                              case "Hide":                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                      return 1;                                  }                                  else if (pattern != null)                                  {                                      ((ExpandCollapsePattern)pattern).Collapse();                                      // Required to wait 1 second'                                      // before checking the state and retry collapsing                                      utils.InternalWait(1);                                      if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                          ExpandCollapseState.Collapsed)                                      {                                          // Hiding same combobox multiple time consecutively                                          // fails. Check for the state and retry to collapse                                          LogMessage("Collapsed");                                          return 1;                                      }                                  }                                  break;                              case "Show":                              case "Select":                              case "Verify":                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' !verify);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  if (invokePattern != null || (pattern != null &&                                      ((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                      ExpandCollapseState.Expanded))                                  {                                      // Selecting same combobox multiple time consecutively                                      // fails. Check for the state and retry to expand                                      LogMessage("Expaneded");                                      if (actionType == "Show")                                          return 1;                                      else                                      {                                          return SelectListItem(childHandle' item' verify) ? 1 : 0;                                      }                                  }                                  break;                              case "GetComboValue":                                  Object selectionPattern = null;                                  LogMessage("GetComboValue");                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      LogMessage("InvokePattern");                                      childHandle.SetFocus();                                      utils.InternalClick(elementItem);                                      // InvokePattern doesn't work with Virtual Network                                      // Editor of VMware Workstation' so used the above InternalClick                                      //((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                  {                                      LogMessage("ExpandCollapsePattern");                                      ((ExpandCollapsePattern)pattern).Expand();                                  }                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  LogMessage("Handle name: " + childHandle.Current.Name +                                      " - " + childHandle.Current.ControlType.ProgrammaticName);                                  bool typeExist = utils.InternalWaitTillChildControlTypeExist(childHandle' type);                                  LogMessage("Control type exist: " + typeExist);                                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Subtree'                                      Condition.TrueCondition);                                  LogMessage("AutomationElementCollection " + c.Count);                                  foreach (AutomationElement e in c)                                  {                                      LogMessage(e.Current.Name + " : " + e.Current.ControlType.ProgrammaticName);                                      bool status = false;                                      if (e.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                          out selectionPattern))                                      {                                          status = ((SelectionItemPattern)selectionPattern).Current.IsSelected;                                          if (status)                                          {                                              LogMessage("Selected: " + e.Current.Name);                                              selectedItem = e.Current.Name;                                              ((ExpandCollapsePattern)pattern).Collapse();                                              return 1;                                          }                                      }                                  }                                  LogMessage("Unable to find selected combo box value");                                  c = null;                                  selectionPattern = null;                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  return 0;                              case "GetAllItem":                                  string matchedKey = null;                                  Hashtable objectHT = new Hashtable();                                  ArrayList tmpChildList = new ArrayList();                                  InternalTreeWalker w = new InternalTreeWalker();                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  // Changes based on QT 5.0.2                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  utils.InternalGetObjectList(                                      w.walker.GetFirstChild(childHandle)'                                      ref tmpChildList' ref objectHT' ref matchedKey'                                      true' null' null' ControlType.ListItem);                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  // For Linux compatibility                                  Hashtable propertyHT;                                  foreach (String key in objectHT.Keys)                                  {                                      propertyHT = (Hashtable)objectHT[key];                                      string className = (string)propertyHT["class"];                                      if (className != null &&                                          className.Contains("list_item"))                                          // Add only list items                                          childList.Add(propertyHT["label"]);                                  }                                  w = null;                                  tmpChildList = null;                                  propertyHT = objectHT = null;                                  if (childList.Count > 0)                                  {                                      // Don't process the last item                                      return 1;                                  }                                  else                                  {                                      LogMessage("childList.Count <= 0: " + childList.Count);                                  }                                  return 0;                          }
Missing Default,Ldtpd,Generic,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Generic.cs,HasState,The following switch statement is missing a default case: switch (state.ToLower(CultureInfo.CurrentCulture))                      {                          case "visible":                          case "showing":                              if (childHandle.Current.IsOffscreen == false)                                  return 1;                              break;                          case "enabled":                              if (utils.IsEnabled(childHandle' false))                                  return 1;                              break;                          case "focused":                              LogMessage("childHandle.Current.HasKeyboardFocus: " +                                  childHandle.Current.HasKeyboardFocus);                              if (childHandle.Current.HasKeyboardFocus)                                  return 1;                              break;                          case "checked":                              if (childHandle.TryGetCurrentPattern(TogglePattern.Pattern'                                  out pattern))                              {                                  if (((TogglePattern)pattern).Current.ToggleState ==                                      ToggleState.On)                                  {                                      return 1;                                  }                              }                              break;                          case "selected":                              if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                  out pattern))                              {                                  if (((SelectionItemPattern)pattern).Current.IsSelected)                                      return 1;                              }                              break;                          case "selectable":                              if (utils.IsEnabled(childHandle) &&                                  childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                  out pattern))                              {                                  // Assuming' if its enabled and has selection item pattern                                  // then its selectable                                  return 1;                              }                              break;                          case "editable":                              if (childHandle.TryGetCurrentPattern(ValuePattern.Pattern'                                  out pattern))                              {                                  if (((ValuePattern)pattern).Current.IsReadOnly)                                      return 0;                                  else                                      return 1;                              }                              break;                      }
Missing Default,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following switch statement is missing a default case: switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }
Missing Default,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following switch statement is missing a default case: switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }
Missing Default,Ldtpd,Menu,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following switch statement is missing a default case: switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }
Missing Default,Ldtpd,ScreenShot,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Screenshot.cs,saveImage2File,The following switch statement is missing a default case: switch (ext.ToLower())              {                  case ".png":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".jpg":                  case ".jpeg":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".tiff":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".bmp":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".gif":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;              }
Missing Default,Ldtpd,Utils,D:\research\architectureSmells\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following switch statement is missing a default case: switch (actionType)                      {                          case "VerifyCheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected)                                  return 1;                              return 0;                          case "VerifyUncheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected == false)                                  return 1;                              return 0;                          case "Check":                              childHandle.SetFocus();                              ((SelectionItemPattern)pattern).Select();                              return 1;                      }
