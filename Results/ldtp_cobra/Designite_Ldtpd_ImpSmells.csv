Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The method has 228 lines of code.
Long Method,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetWindowList,The method has 125 lines of code.
Long Method,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The method has 109 lines of code.
Long Method,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKey,The method has 137 lines of code.
Long Method,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,The method has 132 lines of code.
Long Method,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The method has 358 lines of code.
Long Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetWindowHandle,The method has 294 lines of code.
Long Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,The method has 162 lines of code.
Long Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,The method has 217 lines of code.
Long Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The method has 104 lines of code.
Complex Method,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetWindowList,Cyclomatic complexity of the method is 12
Complex Method,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAllStates,Cyclomatic complexity of the method is 10
Complex Method,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,Cyclomatic complexity of the method is 14
Complex Method,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectName,Cyclomatic complexity of the method is 10
Complex Method,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,Cyclomatic complexity of the method is 12
Complex Method,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,Cyclomatic complexity of the method is 16
Complex Method,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,Cyclomatic complexity of the method is 21
Complex Method,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,Cyclomatic complexity of the method is 9
Complex Method,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,Cyclomatic complexity of the method is 8
Complex Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetWindowHandle,Cyclomatic complexity of the method is 18
Complex Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,Cyclomatic complexity of the method is 14
Complex Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,Cyclomatic complexity of the method is 21
Complex Method,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalWaitTillControlTypeExist,Cyclomatic complexity of the method is 8
Long Parameter List,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The method has 6 parameters. Parameters: windowName' objName' item' selectedItem' actionType' childList
Long Parameter List,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,SetCellValue,The method has 5 parameters. Parameters: windowName' objName' row' column' data
Long Parameter List,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,CompareTextProperty,The method has 5 parameters. Parameters: windowName' objName' textProperty' start' end
Long Parameter List,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,ContainsTextProperty,The method has 5 parameters. Parameters: windowName' objName' textProperty' start' end
Long Parameter List,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,SelectTextByIndexAndRegion,The method has 5 parameters. Parameters: windowName' objName' start' end' selectionNumber
Long Parameter List,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,SimulateMouseMove,The method has 5 parameters. Parameters: source_x' source_y' dest_x' dest_y' delay
Long Parameter List,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,LaunchApp,The method has 5 parameters. Parameters: cmd' args' delay' env' lang
Long Parameter List,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,ImageCapture,The method has 5 parameters. Parameters: windowName' x' y' width' height
Long Parameter List,Ldtpd,Image,C:\repos\ldtp_cobra\Ldtpd\Image.cs,Capture,The method has 5 parameters. Parameters: windowName' x' y' width' height
Long Parameter List,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The method has 5 parameters. Parameters: source_x' source_y' dest_x' dest_y' delay
Long Parameter List,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The method has 5 parameters. Parameters: windowName' objName' row' column' data
Long Parameter List,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,The method has 5 parameters. Parameters: childHandle' objName' type' objectList' objInfo
Long Parameter List,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,The method has 9 parameters. Parameters: windowHandle' objectList' objectHT' matchedKey' needAll' objName' parentName' type' objInfo
Long Statement,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,GetCursorPosition,The length of the statement  "            // http://stackoverflow.com/questions/10720162/set-text-on-textfield-textbox-with-the-automation-framework-and-get-the-change " is 125.
Complex Conditional,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The conditional expression  "childHandle.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                      out pattern) || childHandle.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern) ||                      (elementItem != null && elementItem.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern))"  is complex.
Complex Conditional,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The conditional expression  "childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem"  is complex.
Complex Conditional,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectNameAtCoords,The conditional expression  "aimElement == null ||                      aimElement.Current.ClassName == "SysListView32" ||                      aimElement.Current.ClassName == "Shell_TrayWnd" ||                      aimElement.Current.ClassName == "MSTaskListWClass" ||                      aimElement.Current.ControlType == ControlType.Window ||                      aimElement.Current.ControlType == ControlType.TitleBar ||                      w.walker.GetParent(aimElement).Current.Name == "Context""  is complex.
Complex Conditional,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The conditional expression  "String.IsNullOrEmpty(windowName) ||                  (String.IsNullOrEmpty(parentName) &&                  String.IsNullOrEmpty(childName) &&                  String.IsNullOrEmpty(role))"  is complex.
Complex Conditional,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The conditional expression  "(String.IsNullOrEmpty(role) ||                                  (!String.IsNullOrEmpty(role) &&                                  (string)ht["class"] == role)) &&                                  ((ht.ContainsKey("label") &&                                  (string)ht["label"] != null &&                                  rx.Match((string)ht["label"]).Success) ||                                  (ht.ContainsKey("key") &&                                  (string)ht["key"] != null &&                                  rx.Match((string)ht["key"]).Success))"  is complex.
Complex Conditional,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The conditional expression  "(actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false)"  is complex.
Complex Conditional,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The conditional expression  "actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window""  is complex.
Complex Conditional,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseLeftClick,The conditional expression  "childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem"  is complex.
Complex Conditional,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The conditional expression  "source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1]"  is complex.
Complex Conditional,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,CopyText,The conditional expression  "start < 0 || end != -1 && (start > end || end < start)"  is complex.
Complex Conditional,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,CutText,The conditional expression  "start < 0 || end != -1 && (start > end || end < start)"  is complex.
Complex Conditional,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,DeleteText,The conditional expression  "start < 0 || end != -1 && (start > end || end < start)"  is complex.
Complex Conditional,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectHandle,The conditional expression  "(isAutomationId && automationId == element.Current.AutomationId) ||                          (isObjIndex && !String.IsNullOrEmpty(objIndex) && rx.Match(objIndex).Success) ||                          (!isAutomationId && !isObjIndex &&                          (s != null && rx.Match(s).Success) ||                          (actualString != null && rx.Match(actualString).Success))"  is complex.
Complex Conditional,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetObjectList,The conditional expression  "(isAutomationId && !String.IsNullOrEmpty(automationId) &&                              automationId == element.Current.AutomationId) ||                              (isObjIndex && !String.IsNullOrEmpty(objIndex) && rx.Match(objIndex).Success) ||                              (!isAutomationId && !isObjIndex &&                              (s != null && rx != null && rx.Match(s).Success) ||                              (utf8 != null && rx != null && rx.Match(utf8).Success))"  is complex.
Empty Catch Block,Ldtpd,WindowList,C:\repos\ldtp_cobra\Ldtpd\WindowList.cs,OnWindowCreate,The method has an empty catch block.
Empty Catch Block,Ldtpd,WindowList,C:\repos\ldtp_cobra\Ldtpd\WindowList.cs,OnWindowDelete,The method has an empty catch block.
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[3] { ControlType.ComboBox'                  ControlType.ListItem' ControlType.List/*' ControlType.Text */ };
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,The following statement contains a magic number: if (element == null || String.IsNullOrEmpty(itemText))              {                  throw new XmlRpcFaultException(123'                      "Argument cannot be null or empty.");              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,The following statement contains a magic number: try              {                  utils.InternalWait(1);                  elementItem = utils.GetObjectHandle(element' itemText);                  if (elementItem != null)                  {                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (verify)                      {                          bool status = false;                          if (elementItem.TryGetCurrentPattern(SelectionItemPattern.Pattern'                              out pattern))                          {                              status = ((SelectionItemPattern)pattern).Current.IsSelected;                          }                          if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                              out pattern))                          {                              LogMessage("ExpandCollapsePattern");                              element.SetFocus();                              ((ExpandCollapsePattern)pattern).Collapse();                          }                          return status;                      }                      if (elementItem.TryGetCurrentPattern(ScrollItemPattern.Pattern'                          out pattern))                      {                          LogMessage("ScrollItemPattern");                          ((ScrollItemPattern)pattern).ScrollIntoView();                      }                      if (elementItem.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          return utils.InternalClick(elementItem);                      }                      else if (elementItem.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return true;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  elementItem = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,The following statement contains a magic number: try              {                  utils.InternalWait(1);                  elementItem = utils.GetObjectHandle(element' itemText);                  if (elementItem != null)                  {                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (verify)                      {                          bool status = false;                          if (elementItem.TryGetCurrentPattern(SelectionItemPattern.Pattern'                              out pattern))                          {                              status = ((SelectionItemPattern)pattern).Current.IsSelected;                          }                          if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                              out pattern))                          {                              LogMessage("ExpandCollapsePattern");                              element.SetFocus();                              ((ExpandCollapsePattern)pattern).Collapse();                          }                          return status;                      }                      if (elementItem.TryGetCurrentPattern(ScrollItemPattern.Pattern'                          out pattern))                      {                          LogMessage("ScrollItemPattern");                          ((ScrollItemPattern)pattern).ScrollIntoView();                      }                      if (elementItem.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          return utils.InternalClick(elementItem);                      }                      else if (elementItem.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return true;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  elementItem = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectListItem,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find item in the list: " + itemText);
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following statement contains a magic number: ControlType[] comboTtype = new ControlType[3] { ControlType.ComboBox'                  ControlType.ListItem' ControlType.List/*' ControlType.Text */ };
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following statement contains a magic number: try              {                  LogMessage("Handle name: " + childHandle.Current.Name +                      " - " + childHandle.Current.ControlType.ProgrammaticName);                  if (!utils.IsEnabled(childHandle' !verify))                  {                      throw new XmlRpcFaultException(123' "Object state is disabled");                  }                  elementItem = utils.GetObjectHandle(childHandle' "Open"' type' true);                  LogMessage("elementItem: " + elementItem.Current.Name +                                      " - " + elementItem.Current.ControlType.ProgrammaticName);                  if (childHandle.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                      out pattern) || childHandle.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern) ||                      (elementItem != null && elementItem.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern)))                  {                      LogMessage("ExpandCollapsePattern");                      // Retry max 5 times                      for (int i = 0; i < 5; i++)                      {                          switch (actionType)                          {                              case "Hide":                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                      return 1;                                  }                                  else if (pattern != null)                                  {                                      ((ExpandCollapsePattern)pattern).Collapse();                                      // Required to wait 1 second'                                      // before checking the state and retry collapsing                                      utils.InternalWait(1);                                      if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                          ExpandCollapseState.Collapsed)                                      {                                          // Hiding same combobox multiple time consecutively                                          // fails. Check for the state and retry to collapse                                          LogMessage("Collapsed");                                          return 1;                                      }                                  }                                  break;                              case "Show":                              case "Select":                              case "Verify":                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' !verify);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  if (invokePattern != null || (pattern != null &&                                      ((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                      ExpandCollapseState.Expanded))                                  {                                      // Selecting same combobox multiple time consecutively                                      // fails. Check for the state and retry to expand                                      LogMessage("Expaneded");                                      if (actionType == "Show")                                          return 1;                                      else                                      {                                          return SelectListItem(childHandle' item' verify) ? 1 : 0;                                      }                                  }                                  break;                              case "GetComboValue":                                  Object selectionPattern = null;                                  LogMessage("GetComboValue");                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      LogMessage("InvokePattern");                                      childHandle.SetFocus();                                      utils.InternalClick(elementItem);                                      // InvokePattern doesn't work with Virtual Network                                      // Editor of VMware Workstation' so used the above InternalClick                                      //((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                  {                                      LogMessage("ExpandCollapsePattern");                                      ((ExpandCollapsePattern)pattern).Expand();                                  }                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  LogMessage("Handle name: " + childHandle.Current.Name +                                      " - " + childHandle.Current.ControlType.ProgrammaticName);                                  bool typeExist = utils.InternalWaitTillChildControlTypeExist(childHandle' type);                                  LogMessage("Control type exist: " + typeExist);                                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Subtree'                                      Condition.TrueCondition);                                  LogMessage("AutomationElementCollection " + c.Count);                                  foreach (AutomationElement e in c)                                  {                                      LogMessage(e.Current.Name + " : " + e.Current.ControlType.ProgrammaticName);                                      bool status = false;                                      if (e.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                          out selectionPattern))                                      {                                          status = ((SelectionItemPattern)selectionPattern).Current.IsSelected;                                          if (status)                                          {                                              LogMessage("Selected: " + e.Current.Name);                                              selectedItem = e.Current.Name;                                              ((ExpandCollapsePattern)pattern).Collapse();                                              return 1;                                          }                                      }                                  }                                  LogMessage("Unable to find selected combo box value");                                  c = null;                                  selectionPattern = null;                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  return 0;                              case "GetAllItem":                                  string matchedKey = null;                                  Hashtable objectHT = new Hashtable();                                  ArrayList tmpChildList = new ArrayList();                                  InternalTreeWalker w = new InternalTreeWalker();                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  // Changes based on QT 5.0.2                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  utils.InternalGetObjectList(                                      w.walker.GetFirstChild(childHandle)'                                      ref tmpChildList' ref objectHT' ref matchedKey'                                      true' null' null' ControlType.ListItem);                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  // For Linux compatibility                                  Hashtable propertyHT;                                  foreach (String key in objectHT.Keys)                                  {                                      propertyHT = (Hashtable)objectHT[key];                                      string className = (string)propertyHT["class"];                                      if (className != null &&                                          className.Contains("list_item"))                                          // Add only list items                                          childList.Add(propertyHT["label"]);                                  }                                  w = null;                                  tmpChildList = null;                                  propertyHT = objectHT = null;                                  if (childList.Count > 0)                                  {                                      // Don't process the last item                                      return 1;                                  }                                  else                                  {                                      LogMessage("childList.Count <= 0: " + childList.Count);                                  }                                  return 0;                          }                      }                  }                  // Handle selectitem and verifyselect on list.                  // Get ExpandCollapsePattern fails on list'                  // VM Library items are selected and                  // verified correctly on Player with this fix                  else                  {                      LogMessage("SelectListItem");                      childHandle.SetFocus();                      return SelectListItem(childHandle' item' verify) ? 1 : 0;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  comboTtype = type = null;                  pattern = invokePattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following statement contains a magic number: try              {                  LogMessage("Handle name: " + childHandle.Current.Name +                      " - " + childHandle.Current.ControlType.ProgrammaticName);                  if (!utils.IsEnabled(childHandle' !verify))                  {                      throw new XmlRpcFaultException(123' "Object state is disabled");                  }                  elementItem = utils.GetObjectHandle(childHandle' "Open"' type' true);                  LogMessage("elementItem: " + elementItem.Current.Name +                                      " - " + elementItem.Current.ControlType.ProgrammaticName);                  if (childHandle.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                      out pattern) || childHandle.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern) ||                      (elementItem != null && elementItem.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern)))                  {                      LogMessage("ExpandCollapsePattern");                      // Retry max 5 times                      for (int i = 0; i < 5; i++)                      {                          switch (actionType)                          {                              case "Hide":                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                      return 1;                                  }                                  else if (pattern != null)                                  {                                      ((ExpandCollapsePattern)pattern).Collapse();                                      // Required to wait 1 second'                                      // before checking the state and retry collapsing                                      utils.InternalWait(1);                                      if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                          ExpandCollapseState.Collapsed)                                      {                                          // Hiding same combobox multiple time consecutively                                          // fails. Check for the state and retry to collapse                                          LogMessage("Collapsed");                                          return 1;                                      }                                  }                                  break;                              case "Show":                              case "Select":                              case "Verify":                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' !verify);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  if (invokePattern != null || (pattern != null &&                                      ((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                      ExpandCollapseState.Expanded))                                  {                                      // Selecting same combobox multiple time consecutively                                      // fails. Check for the state and retry to expand                                      LogMessage("Expaneded");                                      if (actionType == "Show")                                          return 1;                                      else                                      {                                          return SelectListItem(childHandle' item' verify) ? 1 : 0;                                      }                                  }                                  break;                              case "GetComboValue":                                  Object selectionPattern = null;                                  LogMessage("GetComboValue");                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      LogMessage("InvokePattern");                                      childHandle.SetFocus();                                      utils.InternalClick(elementItem);                                      // InvokePattern doesn't work with Virtual Network                                      // Editor of VMware Workstation' so used the above InternalClick                                      //((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                  {                                      LogMessage("ExpandCollapsePattern");                                      ((ExpandCollapsePattern)pattern).Expand();                                  }                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  LogMessage("Handle name: " + childHandle.Current.Name +                                      " - " + childHandle.Current.ControlType.ProgrammaticName);                                  bool typeExist = utils.InternalWaitTillChildControlTypeExist(childHandle' type);                                  LogMessage("Control type exist: " + typeExist);                                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Subtree'                                      Condition.TrueCondition);                                  LogMessage("AutomationElementCollection " + c.Count);                                  foreach (AutomationElement e in c)                                  {                                      LogMessage(e.Current.Name + " : " + e.Current.ControlType.ProgrammaticName);                                      bool status = false;                                      if (e.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                          out selectionPattern))                                      {                                          status = ((SelectionItemPattern)selectionPattern).Current.IsSelected;                                          if (status)                                          {                                              LogMessage("Selected: " + e.Current.Name);                                              selectedItem = e.Current.Name;                                              ((ExpandCollapsePattern)pattern).Collapse();                                              return 1;                                          }                                      }                                  }                                  LogMessage("Unable to find selected combo box value");                                  c = null;                                  selectionPattern = null;                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  return 0;                              case "GetAllItem":                                  string matchedKey = null;                                  Hashtable objectHT = new Hashtable();                                  ArrayList tmpChildList = new ArrayList();                                  InternalTreeWalker w = new InternalTreeWalker();                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  // Changes based on QT 5.0.2                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  utils.InternalGetObjectList(                                      w.walker.GetFirstChild(childHandle)'                                      ref tmpChildList' ref objectHT' ref matchedKey'                                      true' null' null' ControlType.ListItem);                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  // For Linux compatibility                                  Hashtable propertyHT;                                  foreach (String key in objectHT.Keys)                                  {                                      propertyHT = (Hashtable)objectHT[key];                                      string className = (string)propertyHT["class"];                                      if (className != null &&                                          className.Contains("list_item"))                                          // Add only list items                                          childList.Add(propertyHT["label"]);                                  }                                  w = null;                                  tmpChildList = null;                                  propertyHT = objectHT = null;                                  if (childList.Count > 0)                                  {                                      // Don't process the last item                                      return 1;                                  }                                  else                                  {                                      LogMessage("childList.Count <= 0: " + childList.Count);                                  }                                  return 0;                          }                      }                  }                  // Handle selectitem and verifyselect on list.                  // Get ExpandCollapsePattern fails on list'                  // VM Library items are selected and                  // verified correctly on Player with this fix                  else                  {                      LogMessage("SelectListItem");                      childHandle.SetFocus();                      return SelectListItem(childHandle' item' verify) ? 1 : 0;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  comboTtype = type = null;                  pattern = invokePattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following statement contains a magic number: try              {                  LogMessage("Handle name: " + childHandle.Current.Name +                      " - " + childHandle.Current.ControlType.ProgrammaticName);                  if (!utils.IsEnabled(childHandle' !verify))                  {                      throw new XmlRpcFaultException(123' "Object state is disabled");                  }                  elementItem = utils.GetObjectHandle(childHandle' "Open"' type' true);                  LogMessage("elementItem: " + elementItem.Current.Name +                                      " - " + elementItem.Current.ControlType.ProgrammaticName);                  if (childHandle.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                      out pattern) || childHandle.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern) ||                      (elementItem != null && elementItem.TryGetCurrentPattern(                      InvokePattern.Pattern' out invokePattern)))                  {                      LogMessage("ExpandCollapsePattern");                      // Retry max 5 times                      for (int i = 0; i < 5; i++)                      {                          switch (actionType)                          {                              case "Hide":                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                      return 1;                                  }                                  else if (pattern != null)                                  {                                      ((ExpandCollapsePattern)pattern).Collapse();                                      // Required to wait 1 second'                                      // before checking the state and retry collapsing                                      utils.InternalWait(1);                                      if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                          ExpandCollapseState.Collapsed)                                      {                                          // Hiding same combobox multiple time consecutively                                          // fails. Check for the state and retry to collapse                                          LogMessage("Collapsed");                                          return 1;                                      }                                  }                                  break;                              case "Show":                              case "Select":                              case "Verify":                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' !verify);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  if (invokePattern != null || (pattern != null &&                                      ((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                      ExpandCollapseState.Expanded))                                  {                                      // Selecting same combobox multiple time consecutively                                      // fails. Check for the state and retry to expand                                      LogMessage("Expaneded");                                      if (actionType == "Show")                                          return 1;                                      else                                      {                                          return SelectListItem(childHandle' item' verify) ? 1 : 0;                                      }                                  }                                  break;                              case "GetComboValue":                                  Object selectionPattern = null;                                  LogMessage("GetComboValue");                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      LogMessage("InvokePattern");                                      childHandle.SetFocus();                                      utils.InternalClick(elementItem);                                      // InvokePattern doesn't work with Virtual Network                                      // Editor of VMware Workstation' so used the above InternalClick                                      //((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                  {                                      LogMessage("ExpandCollapsePattern");                                      ((ExpandCollapsePattern)pattern).Expand();                                  }                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  LogMessage("Handle name: " + childHandle.Current.Name +                                      " - " + childHandle.Current.ControlType.ProgrammaticName);                                  bool typeExist = utils.InternalWaitTillChildControlTypeExist(childHandle' type);                                  LogMessage("Control type exist: " + typeExist);                                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Subtree'                                      Condition.TrueCondition);                                  LogMessage("AutomationElementCollection " + c.Count);                                  foreach (AutomationElement e in c)                                  {                                      LogMessage(e.Current.Name + " : " + e.Current.ControlType.ProgrammaticName);                                      bool status = false;                                      if (e.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                          out selectionPattern))                                      {                                          status = ((SelectionItemPattern)selectionPattern).Current.IsSelected;                                          if (status)                                          {                                              LogMessage("Selected: " + e.Current.Name);                                              selectedItem = e.Current.Name;                                              ((ExpandCollapsePattern)pattern).Collapse();                                              return 1;                                          }                                      }                                  }                                  LogMessage("Unable to find selected combo box value");                                  c = null;                                  selectionPattern = null;                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  return 0;                              case "GetAllItem":                                  string matchedKey = null;                                  Hashtable objectHT = new Hashtable();                                  ArrayList tmpChildList = new ArrayList();                                  InternalTreeWalker w = new InternalTreeWalker();                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  // Changes based on QT 5.0.2                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  utils.InternalGetObjectList(                                      w.walker.GetFirstChild(childHandle)'                                      ref tmpChildList' ref objectHT' ref matchedKey'                                      true' null' null' ControlType.ListItem);                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  // For Linux compatibility                                  Hashtable propertyHT;                                  foreach (String key in objectHT.Keys)                                  {                                      propertyHT = (Hashtable)objectHT[key];                                      string className = (string)propertyHT["class"];                                      if (className != null &&                                          className.Contains("list_item"))                                          // Add only list items                                          childList.Add(propertyHT["label"]);                                  }                                  w = null;                                  tmpChildList = null;                                  propertyHT = objectHT = null;                                  if (childList.Count > 0)                                  {                                      // Don't process the last item                                      return 1;                                  }                                  else                                  {                                      LogMessage("childList.Count <= 0: " + childList.Count);                                  }                                  return 0;                          }                      }                  }                  // Handle selectitem and verifyselect on list.                  // Get ExpandCollapsePattern fails on list'                  // VM Library items are selected and                  // verified correctly on Player with this fix                  else                  {                      LogMessage("SelectListItem");                      childHandle.SetFocus();                      return SelectListItem(childHandle' item' verify) ? 1 : 0;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  comboTtype = type = null;                  pattern = invokePattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: if (index == 0)                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: if (element != null)              {                  try                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          element.SetFocus();                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(element);                          return 1;                      }                      else if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return 1;                      }                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      if (ex is XmlRpcFaultException)                          throw;                      else                          throw new XmlRpcFaultException(123'                              "Unhandled exception: " + ex.Message);                  }                  finally                  {                      element = null;                  }              }
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,SelectIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to select item.");
Magic Number,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,GetComboValue,The following statement contains a magic number: if (InternalComboHandler(windowName' objName' null'                  ref selectedItem' "GetComboValue") == 1)              {                  LogMessage("Item selected: " + selectedItem);                  return selectedItem;              }              else                  throw new XmlRpcFaultException(123' "Unable to get combobox value");
Magic Number,Ldtpd,Common,C:\repos\ldtp_cobra\Ldtpd\Common.cs,Wait,The following statement contains a magic number: Thread.Sleep((int)(waitTime * 1000));
Magic Number,Ldtpd,Common,C:\repos\ldtp_cobra\Ldtpd\Common.cs,LogMessage,The following statement contains a magic number: if (debug)              {                  string callerName = stackTrace == null ? "" : stackTrace.ToString();                  Console.WriteLine("{0}:{1}"' callerName' o);                  try                  {                      if (logStack.Count == 1000)                      {                          // Removes 1 log' if it has 1000 instances                          logStack.Pop();                      }                      // Add new log to the stack                      logStack.Push("INFO-" + o);                  }                  catch (Exception ex)                  {                      if (debug)                          Console.WriteLine(ex);                  }              }
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,Wait,The following statement contains a magic number: try              {                  time = Convert.ToInt32(waitTime' CultureInfo.CurrentCulture);              }              catch (Exception ex)              {                  time = 5;                  LogMessage(ex);              }
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,ObjectTimeOut,The following statement contains a magic number: if (objectTimeOut <= 0)                  this.objectTimeOut = 5;              else                  this.objectTimeOut = objectTimeOut;
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,GuiTimeOut,The following statement contains a magic number: if (guiTimeOut <= 0)                  this.windowRetry = 3;              else                  this.windowRetry = guiTimeOut;
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,Remap,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,ActivateText,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName) ||                  String.IsNullOrEmpty(objName))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,GetCursorPosition,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,CompareTextProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Not implemented.");
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,ContainsTextProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Not implemented.");
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,GetTextProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Not implemented.");
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,SetCursorPosition,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,SelectTextByName,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,SelectTextByIndexAndRegion,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported on Windows' as unable to get info from underlying accessibility library.");
Magic Number,Ldtpd,Core,C:\repos\ldtp_cobra\Ldtpd\Core.cs,LaunchApp,The following statement contains a magic number: try              {                  ProcessStartInfo psi = new ProcessStartInfo();                    psi.FileName = cmd;                    if (args != null)                  {                      // Space separated arguments                      psi.Arguments = string.Join(" "' args);                  }                    psi.UseShellExecute = true;                  ps.StartInfo = psi;                  ps.Start();                  Thread thread = new Thread(new ParameterizedThreadStart(                      InternalLaunchApp));                  // Clean up in different thread                  thread.Start(ps);                  Wait(delay);                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Unhandled exception: " + ex.Message);              }              finally              {                  ps = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectList,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectList,The following statement contains a magic number: if (windowHandle == null)              {                  throw new XmlRpcFaultException(123' "Unable to find window: " +                      windowName);              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAllStates,The following statement contains a magic number: try              {                  childHandle = GetObjectHandle(windowName' objName' null);                  c = childHandle.FindAll(TreeScope.Children'                      Condition.TrueCondition);                  if (c == null)                      throw new XmlRpcFaultException(123'                          "Unable to get row count.");                  if (childHandle.Current.IsOffscreen == false)                  {                      stateList.Add("visible");                      stateList.Add("showing");                  }                  if (utils.IsEnabled(childHandle))                      stateList.Add("enabled");                  if (childHandle.Current.HasKeyboardFocus)                      stateList.Add("focused");                  if (childHandle.TryGetCurrentPattern(TogglePattern.Pattern'                      out pattern))                  {                      if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                      {                          stateList.Add("checked");                      }                  }                  if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                              out pattern))                  {                      if (((SelectionItemPattern)pattern).Current.IsSelected)                      {                          stateList.Add("selected");                          // FIXME:                          //stateList.Add("checked");                      }                  }                  if (utils.IsEnabled(childHandle) &&                      childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                              out pattern))                  {                      stateList.Add("selectable");                  }                  return stateList.ToArray(typeof(string)) as string[];              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  pattern = null;                  stateList = null;                  childHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAllStates,The following statement contains a magic number: try              {                  childHandle = GetObjectHandle(windowName' objName' null);                  c = childHandle.FindAll(TreeScope.Children'                      Condition.TrueCondition);                  if (c == null)                      throw new XmlRpcFaultException(123'                          "Unable to get row count.");                  if (childHandle.Current.IsOffscreen == false)                  {                      stateList.Add("visible");                      stateList.Add("showing");                  }                  if (utils.IsEnabled(childHandle))                      stateList.Add("enabled");                  if (childHandle.Current.HasKeyboardFocus)                      stateList.Add("focused");                  if (childHandle.TryGetCurrentPattern(TogglePattern.Pattern'                      out pattern))                  {                      if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                      {                          stateList.Add("checked");                      }                  }                  if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                              out pattern))                  {                      if (((SelectionItemPattern)pattern).Current.IsSelected)                      {                          stateList.Add("selected");                          // FIXME:                          //stateList.Add("checked");                      }                  }                  if (utils.IsEnabled(childHandle) &&                      childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                              out pattern))                  {                      stateList.Add("selectable");                  }                  return stateList.ToArray(typeof(string)) as string[];              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  pattern = null;                  stateList = null;                  childHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The following statement contains a magic number: ControlType[] type = new ControlType[11] { ControlType.Button'                  ControlType.CheckBox' ControlType.RadioButton'                  ControlType.SplitButton' ControlType.Menu' ControlType.ListItem'                  ControlType.MenuItem' ControlType.MenuBar' ControlType.Pane'                  ControlType.Hyperlink' ControlType.ToolBar };
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The following statement contains a magic number: try              {                  childHandle = GetObjectHandle(windowName' objName' type);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  if (childHandle.Current.ControlType == ControlType.Pane)                  {                      // NOTE: Work around' as the pane doesn't seem to work                      // with any actions. Noticed this window' when Windows                      // Security Warning dialog pop's up                      utils.InternalClick(childHandle);                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      out pattern))                  {                      if (childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem)                      {                          //((InvokePattern)invokePattern).Invoke();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(childHandle);                      }                      else                      {                          try                          {                              ((InvokePattern)pattern).Invoke();                          }                          catch (Exception ex)                          {                              LogMessage(ex);                              // Have noticed exception with                              // maximize / minimize button                              utils.InternalClick(childHandle);                          }                      }                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                      out pattern))                  {                      ((SelectionItemPattern)pattern).Select();                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(ValuePattern.Pattern'                      out pattern) && childHandle.Current.ControlType == ControlType.ListItem)                  {                      // Fixed based on "Windows Security" dialog                      // On clicking "Use another account"                      // Its ListItem and has only ValuePattern                      utils.InternalClick(childHandle);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The following statement contains a magic number: try              {                  childHandle = GetObjectHandle(windowName' objName' type);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  if (childHandle.Current.ControlType == ControlType.Pane)                  {                      // NOTE: Work around' as the pane doesn't seem to work                      // with any actions. Noticed this window' when Windows                      // Security Warning dialog pop's up                      utils.InternalClick(childHandle);                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      out pattern))                  {                      if (childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem)                      {                          //((InvokePattern)invokePattern).Invoke();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(childHandle);                      }                      else                      {                          try                          {                              ((InvokePattern)pattern).Invoke();                          }                          catch (Exception ex)                          {                              LogMessage(ex);                              // Have noticed exception with                              // maximize / minimize button                              utils.InternalClick(childHandle);                          }                      }                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                      out pattern))                  {                      ((SelectionItemPattern)pattern).Select();                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(ValuePattern.Pattern'                      out pattern) && childHandle.Current.ControlType == ControlType.ListItem)                  {                      // Fixed based on "Windows Security" dialog                      // On clicking "Use another account"                      // Its ListItem and has only ValuePattern                      utils.InternalClick(childHandle);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,Click,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectSize,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  Rect rect = childHandle.Current.BoundingRectangle;                  return new int[] { (int)rect.X' (int)rect.Y'                  (int)rect.Width' (int)rect.Height };              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAccessKey,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (String.IsNullOrEmpty(childHandle.Current.AccessKey))                      throw new XmlRpcFaultException(123' "No access key associated");                  return childHandle.Current.AccessKey;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetAccessKey,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (String.IsNullOrEmpty(childHandle.Current.AccessKey))                      throw new XmlRpcFaultException(123' "No access key associated");                  return childHandle.Current.AccessKey;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetWindowSize,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  Rect rect = windowHandle.Current.BoundingRectangle;                  return new int[] { (int)rect.X' (int)rect.Y'                      (int)rect.Width' (int)rect.Height };              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  windowHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetWindowSize,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  Rect rect = windowHandle.Current.BoundingRectangle;                  return new int[] { (int)rect.X' (int)rect.Y'                      (int)rect.Width' (int)rect.Height };              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  windowHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectInfo,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName) ||                  String.IsNullOrEmpty(objName))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectInfo,The following statement contains a magic number: if (windowHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectInfo,The following statement contains a magic number: try              {                  if (utils.InternalGetObjectList(w.walker.GetFirstChild(windowHandle)'                      ref objectList' ref objectHT' ref matchedKey'                      false' objName' windowHandle.Current.Name))                  {                      LogMessage(objectHT.Count + " : " + objectList.Count);                      LogMessage(objectList[objectList.Count - 1]);                      ht = (Hashtable)objectHT[matchedKey];                      if (ht != null)                      {                          foreach (string key in ht.Keys)                          {                              LogMessage(key);                              keyList.Add(key);                          }                          return keyList.ToArray(typeof(string)) as string[];                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  w = null;                  ht = null;                  keyList = null;                  windowHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectInfo,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find Object info: " + objName);
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName) ||                  String.IsNullOrEmpty(objName) ||                  String.IsNullOrEmpty(property))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,The following statement contains a magic number: if (windowHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,The following statement contains a magic number: try              {                  if (property == "children")                      flag = true;                  else                      flag = false;                  if (utils.InternalGetObjectList(w.walker.GetFirstChild(windowHandle)'                      ref objectList' ref objectHT' ref matchedKey'                      flag' objName' windowHandle.Current.Name) || flag)                  {                      if (utils.debug || utils.writeToFile != null)                      {                          LogMessage(objectList.Count);                          foreach (string key in objectHT.Keys)                          {                              LogMessage("Key: " +                                  ((Hashtable)objectHT[key])["key"]);                              LogMessage("Parent: " +                                  ((Hashtable)objectHT[key])["parent"]);                              LogMessage("Obj index: " +                                  ((Hashtable)objectHT[key])["obj_index"]);                              LogMessage("Class: " +                                  ((Hashtable)objectHT[key])["class"]);                              foreach (string child in                                  (ArrayList)((Hashtable)objectHT[key])["children"])                                  LogMessage("Children: " + child);                          }                      }                      LogMessage(objectHT.Count + " : " + objectList.Count);                      LogMessage(objectList[objectList.Count - 1]);                      LogMessage("matchedKey: " + matchedKey + " : " + flag);                      ht = (Hashtable)objectHT[matchedKey];                      if (ht != null)                      {                          foreach (string key in ht.Keys)                          {                              LogMessage(key);                              if (key == property)                              {                                  if (property == "children")                                  {                                      childrenList = (ArrayList)ht[key];                                      LogMessage("Count: " + childrenList.Count);                                      string value = "";                                      foreach (string child in childrenList)                                      {                                          if (value == "")                                              value = child;                                          else                                              value += "' " + child;                                      }                                      return value;                                  }                                  else                                      return (string)ht[key];                              }                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  w = null;                  ht = null;                  windowHandle = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectProperty,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to find Object property: " +                  property + " of object: " + objName);
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetObjectNameAtCoords,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get object name");
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName) ||                  (String.IsNullOrEmpty(parentName) &&                  String.IsNullOrEmpty(childName) &&                  String.IsNullOrEmpty(role)))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: if (windowHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: if (!String.IsNullOrEmpty(childName))              {                  childHandle = utils.GetObjectHandle(windowHandle' childName);                  if (childHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find child object: " + childName);                  }              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: try              {                  if (!String.IsNullOrEmpty(childName) ||                      !String.IsNullOrEmpty(role))                  {                      utils.InternalGetObjectList(w.walker.GetFirstChild(windowHandle)'                          ref objectList' ref objectHT' ref matchedKey'                          true' childName' windowHandle.Current.Name);                      Regex rx;                      foreach (string key in objectHT.Keys)                      {                          try                          {                              if (utils.debug || utils.writeToFile != null)                                  LogMessage("Key: " + key);                              ht = (Hashtable)objectHT[key];                              String tmp = Regex.Replace(childName' @"\*"' @".*");                              tmp = Regex.Replace(tmp' " "' "");                              tmp = Regex.Replace(tmp' @"\("' @"\(");                              tmp = Regex.Replace(tmp' @"\)"' @"\)");                              rx = new Regex(tmp' RegexOptions.Compiled |                                  RegexOptions.IgnorePatternWhitespace |                                  RegexOptions.Multiline |                                  RegexOptions.CultureInvariant);                              if (utils.debug || utils.writeToFile != null)                              {                                  LogMessage("Role matched: " +                                      (string)ht["class"] == role);                                  if (ht.ContainsKey("label") &&                                      (string)ht["label"] != null)                                      LogMessage("Label matched: " +                                          rx.Match((string)ht["label"]).Success);                              }                              if ((String.IsNullOrEmpty(role) ||                                  (!String.IsNullOrEmpty(role) &&                                  (string)ht["class"] == role)) &&                                  ((ht.ContainsKey("label") &&                                  (string)ht["label"] != null &&                                  rx.Match((string)ht["label"]).Success) ||                                  (ht.ContainsKey("key") &&                                  (string)ht["key"] != null &&                                  rx.Match((string)ht["key"]).Success)))                              {                                  childList.Add(ht["key"]);                              }                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          finally                          {                              rx = null;                          }                      }                      return childList.ToArray(typeof(string)) as string[];                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  w = null;                  ht = objectHT = null;                  childHandle = windowHandle = null;                  childList = objectList = null;              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GetChild,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported parameter type passed");
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GrabFocus,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName))              {                  throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GrabFocus,The following statement contains a magic number: if (windowHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GrabFocus,The following statement contains a magic number: if (childHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find Object: " + objName);              }
Magic Number,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,GrabFocus,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Image,C:\repos\ldtp_cobra\Ldtpd\Image.cs,Capture,The following statement contains a magic number: try              {                  ss = new ScreenShot();                  // capture entire screen' and save it to a file                  string path = Path.GetTempPath() +                      Path.GetRandomFileName() + ".png";                  if (windowName.Length > 0)                  {                      windowHandle = utils.GetWindowHandle(windowName);                      if (windowHandle == null)                      {                          throw new XmlRpcFaultException(123'                              "Unable to find window: " + windowName);                      }                      windowHandle.SetFocus();                      Rect rect = windowHandle.Current.BoundingRectangle;                      x = (x != 0) ? x : (int)rect.X;                      y = (y != 0) ? y : (int)rect.Y;                      width = (width != -1) ? width : (int)rect.Width;                      height = (height != -1) ? height : (int)rect.Height;                      System.Drawing.Rectangle rectangle = new                          System.Drawing.Rectangle(x' y' width' height);                      b = ss.CaptureSize(path' rectangle);                  }                  else if (width != -1 && height != -1)                  {                      System.Drawing.Rectangle rectangle = new System.Drawing.Rectangle(                          x' y' width' height);                      b = ss.CaptureSize(path' rectangle);                  }                  else                  {                      b = ss.Capture(path);                  }                  string encodedText = "";                  using (FileStream fs = File.Open(path' FileMode.Open'                      FileAccess.Read))                  {                      Byte[] bytesToEncode = new byte[fs.Length];                      fs.Read(bytesToEncode' 0' (int)fs.Length);                      encodedText = Convert.ToBase64String(bytesToEncode);                      fs.Close();                  }                  LogMessage(path);                  File.Delete(path);                  return encodedText;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  throw new XmlRpcFaultException(123'                      "Unhandled exception: " + ex.Message);              }              finally              {                  if (b != null) // To avoid compilation warning                      b = null;                  ss = null;                  windowHandle = null;              }
Magic Number,Ldtpd,Image,C:\repos\ldtp_cobra\Ldtpd\Image.cs,Capture,The following statement contains a magic number: try              {                  ss = new ScreenShot();                  // capture entire screen' and save it to a file                  string path = Path.GetTempPath() +                      Path.GetRandomFileName() + ".png";                  if (windowName.Length > 0)                  {                      windowHandle = utils.GetWindowHandle(windowName);                      if (windowHandle == null)                      {                          throw new XmlRpcFaultException(123'                              "Unable to find window: " + windowName);                      }                      windowHandle.SetFocus();                      Rect rect = windowHandle.Current.BoundingRectangle;                      x = (x != 0) ? x : (int)rect.X;                      y = (y != 0) ? y : (int)rect.Y;                      width = (width != -1) ? width : (int)rect.Width;                      height = (height != -1) ? height : (int)rect.Height;                      System.Drawing.Rectangle rectangle = new                          System.Drawing.Rectangle(x' y' width' height);                      b = ss.CaptureSize(path' rectangle);                  }                  else if (width != -1 && height != -1)                  {                      System.Drawing.Rectangle rectangle = new System.Drawing.Rectangle(                          x' y' width' height);                      b = ss.CaptureSize(path' rectangle);                  }                  else                  {                      b = ss.Capture(path);                  }                  string encodedText = "";                  using (FileStream fs = File.Open(path' FileMode.Open'                      FileAccess.Read))                  {                      Byte[] bytesToEncode = new byte[fs.Length];                      fs.Read(bytesToEncode' 0' (int)fs.Length);                      encodedText = Convert.ToBase64String(bytesToEncode);                      fs.Close();                  }                  LogMessage(path);                  File.Delete(path);                  return encodedText;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  throw new XmlRpcFaultException(123'                      "Unhandled exception: " + ex.Message);              }              finally              {                  if (b != null) // To avoid compilation warning                      b = null;                  ss = null;                  windowHandle = null;              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKey,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unsupported key type: " + key);
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKeyVal,The following statement contains a magic number: int maxTokenSize = 15;
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GetKeyVal,The following statement contains a magic number: while (index < data.Length)              {                  token = "";                  if (data[index].ToString().Equals("<"))                  {                      index++;                      int i = 0;                      while (!data[index].ToString().Equals(">") && i < maxTokenSize)                      {                          token += data[index++];                          i++;                      }                      if (!data[index].ToString().Equals(">"))                          // Premature end of string without an opening '<'                          throw new XmlRpcFaultException(123'                              "Premature end of string without an opening '<'.");                      index++;                  }                  else                  {                      token = data[index++].ToString();                  }                  LogMessage(token);                  keyList.Add(GetKey(token));              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,EnterString,The following statement contains a magic number: if (!String.IsNullOrEmpty(objName))              {                  AutomationElement windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle != null)                  {                      AutomationElement childHandle = utils.GetObjectHandle(                          windowHandle' objName);                      windowHandle = null;                      try                      {                          if (childHandle != null)                          {                              childHandle.SetFocus();                          }                      }                      catch (Exception ex)                      {                          LogMessage(ex);                          if (ex is XmlRpcFaultException)                              throw;                          else                              throw new XmlRpcFaultException(123'                                  "Unhandled exception: " + ex.Message);                      }                      finally                      {                          childHandle = null;                      }                  }              }              else              {                  // Hack as Linux LDTPv1/v2                  data = windowName;              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,EnterString,The following statement contains a magic number: if (data == null || data.Length == 0)              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,The following statement contains a magic number: if (String.IsNullOrEmpty(data))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,The following statement contains a magic number: foreach (KeyInfo key in keys)              {                  try                  {                      if (!capsLock &&                          key.key == System.Windows.Input.Key.CapsLock)                      {                          // For the first time                          // Set Caps Lock ON                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.CapsLock'                              true);                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.CapsLock'                              false);                          capsLock = true;                          continue;                      }                      if (key.key == System.Windows.Input.Key.LeftShift ||                          key.key == System.Windows.Input.Key.RightShift)                      {                          shiftKeyPressed = true;                      }                      if (capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              true);                      }                      else if (!capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              !shiftKeyPressed);                      }                      else if (shiftKeyPressed)                      {                          // Workaround: Release existing shift key                          // As the default behavior fails when it finds capital letter                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              false);                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              true);                      }                      // Key press                      ATGTestInput.Input.SendKeyboardInput(key.key' true);                      if (!key.nonPrintKey)                      {                          // Key release                          // Don't release nonPrintKey' it will be released later                          ATGTestInput.Input.SendKeyboardInput(key.key' false);                          for (int i = lastIndex; i < index; i++)                          {                              KeyInfo tmpKey = keys[i];                              if (tmpKey.key == System.Windows.Input.Key.CapsLock)                              {                                  // Release only nonPrintKey                                  // Caps lock will be released later                                  break;                              }                              if (tmpKey.key == System.Windows.Input.Key.LeftShift ||                                  tmpKey.key == System.Windows.Input.Key.RightShift)                              {                                  shiftKeyPressed = false;                              }                              // Key release                              ATGTestInput.Input.SendKeyboardInput(tmpKey.key' false);                          }                          // Update lastIndex with index                          // the non_print_key that has been processed                          lastIndex = index;                      }                      if (capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              false);                      }                      else if (!capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              shiftKeyPressed);                      }                      else if (shiftKeyPressed)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              false);                      }                  }                  catch (Exception ex)                  {                      LogMessage(ex.StackTrace);                      throw new XmlRpcFaultException(123' ex.Message);                  }                  Thread.Sleep(200);                  index++;              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,GenerateKeyEvent,The following statement contains a magic number: foreach (KeyInfo key in keys)              {                  try                  {                      if (!capsLock &&                          key.key == System.Windows.Input.Key.CapsLock)                      {                          // For the first time                          // Set Caps Lock ON                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.CapsLock'                              true);                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.CapsLock'                              false);                          capsLock = true;                          continue;                      }                      if (key.key == System.Windows.Input.Key.LeftShift ||                          key.key == System.Windows.Input.Key.RightShift)                      {                          shiftKeyPressed = true;                      }                      if (capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              true);                      }                      else if (!capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              !shiftKeyPressed);                      }                      else if (shiftKeyPressed)                      {                          // Workaround: Release existing shift key                          // As the default behavior fails when it finds capital letter                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              false);                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              true);                      }                      // Key press                      ATGTestInput.Input.SendKeyboardInput(key.key' true);                      if (!key.nonPrintKey)                      {                          // Key release                          // Don't release nonPrintKey' it will be released later                          ATGTestInput.Input.SendKeyboardInput(key.key' false);                          for (int i = lastIndex; i < index; i++)                          {                              KeyInfo tmpKey = keys[i];                              if (tmpKey.key == System.Windows.Input.Key.CapsLock)                              {                                  // Release only nonPrintKey                                  // Caps lock will be released later                                  break;                              }                              if (tmpKey.key == System.Windows.Input.Key.LeftShift ||                                  tmpKey.key == System.Windows.Input.Key.RightShift)                              {                                  shiftKeyPressed = false;                              }                              // Key release                              ATGTestInput.Input.SendKeyboardInput(tmpKey.key' false);                          }                          // Update lastIndex with index                          // the non_print_key that has been processed                          lastIndex = index;                      }                      if (capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              false);                      }                      else if (!capsLock && key.shift)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              shiftKeyPressed);                      }                      else if (shiftKeyPressed)                      {                          ATGTestInput.Input.SendKeyboardInput(System.Windows.Input.Key.LeftShift'                              false);                      }                  }                  catch (Exception ex)                  {                      LogMessage(ex.StackTrace);                      throw new XmlRpcFaultException(123' ex.Message);                  }                  Thread.Sleep(200);                  index++;              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyPress,The following statement contains a magic number: if (String.IsNullOrEmpty(data))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyPress,The following statement contains a magic number: foreach (KeyInfo key in keys)              {                  if (key.key == System.Windows.Input.Key.LeftShift ||                      key.key == System.Windows.Input.Key.RightShift)                  {                      shiftKeyPressed = true;                  }                  try                  {                      ATGTestInput.Input.SendKeyboardInput(key.key' true);                  }                  catch (Exception ex)                  {                      LogMessage(ex.StackTrace);                      throw new XmlRpcFaultException(123' ex.Message);                  }                  Thread.Sleep(200);              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyPress,The following statement contains a magic number: foreach (KeyInfo key in keys)              {                  if (key.key == System.Windows.Input.Key.LeftShift ||                      key.key == System.Windows.Input.Key.RightShift)                  {                      shiftKeyPressed = true;                  }                  try                  {                      ATGTestInput.Input.SendKeyboardInput(key.key' true);                  }                  catch (Exception ex)                  {                      LogMessage(ex.StackTrace);                      throw new XmlRpcFaultException(123' ex.Message);                  }                  Thread.Sleep(200);              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyRelease,The following statement contains a magic number: if (String.IsNullOrEmpty(data))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyRelease,The following statement contains a magic number: foreach (KeyInfo key in keys)              {                  if (key.key == System.Windows.Input.Key.LeftShift ||                      key.key == System.Windows.Input.Key.RightShift)                  {                      shiftKeyPressed = false;                  }                  try                  {                      ATGTestInput.Input.SendKeyboardInput(key.key' false);                  }                  catch (Exception ex)                  {                      LogMessage(ex.StackTrace);                      throw new XmlRpcFaultException(123' ex.Message);                  }                  Thread.Sleep(200);              }
Magic Number,Ldtpd,Keyboard,C:\repos\ldtp_cobra\Ldtpd\Keyboard.cs,KeyRelease,The following statement contains a magic number: foreach (KeyInfo key in keys)              {                  if (key.key == System.Windows.Input.Key.LeftShift ||                      key.key == System.Windows.Input.Key.RightShift)                  {                      shiftKeyPressed = false;                  }                  try                  {                      ATGTestInput.Input.SendKeyboardInput(key.key' false);                  }                  catch (Exception ex)                  {                      LogMessage(ex.StackTrace);                      throw new XmlRpcFaultException(123' ex.Message);                  }                  Thread.Sleep(200);              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,IsMenuChecked,The following statement contains a magic number: if (menuHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                                          out pattern))              {                  int isChecked;                  uint state = ((LegacyIAccessiblePattern)pattern).Current.State;                  // Use fifth bit of current state to determine menu item is checked or not checked                  isChecked = (state & 16) == 16 ? 1 : 0;                  LogMessage("IsMenuChecked: " + menuHandle.Current.Name + " : " + "Checked: " +                      isChecked + " : " + "Current State: " + state);                  pattern = null;                  return isChecked;              }              else                  LogMessage("Unable to get LegacyIAccessiblePattern");
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,IsMenuChecked,The following statement contains a magic number: if (menuHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                                          out pattern))              {                  int isChecked;                  uint state = ((LegacyIAccessiblePattern)pattern).Current.State;                  // Use fifth bit of current state to determine menu item is checked or not checked                  isChecked = (state & 16) == 16 ? 1 : 0;                  LogMessage("IsMenuChecked: " + menuHandle.Current.Name + " : " + "Checked: " +                      isChecked + " : " + "Current State: " + state);                  pattern = null;                  return isChecked;              }              else                  LogMessage("Unable to get LegacyIAccessiblePattern");
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,HandleSubMenu,The following statement contains a magic number: if (childHandle == null || firstObjHandle == null)              {                  throw new XmlRpcFaultException(123' "Argument cannot be null.");              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName) ||                  String.IsNullOrEmpty(objName))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: ControlType[] type = new ControlType[3] { ControlType.Menu'                  ControlType.MenuBar' ControlType.MenuItem };
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: ControlType[] controlType = new ControlType[3] { ControlType.Menu'                  ControlType.MenuItem' ControlType.MenuBar };
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  processId = windowHandle.Current.ProcessId;                  windowHandle.SetFocus();                  LogMessage("Window name: " + windowHandle + " : " +                      windowHandle.Current.Name +                      " : " + windowHandle.Current.ControlType.ProgrammaticName);                  childHandle = windowHandle;                  /*                  // element is an AutomationElement.                  AutomationPattern[] patterns = childHandle.GetSupportedPatterns();                  foreach (AutomationPattern pattern1 in patterns)                  {                      Console.WriteLine("ProgrammaticName: " + pattern1.ProgrammaticName);                      Console.WriteLine("PatternName: " + Automation.PatternName(pattern1));                  }                  /**/                  while (true)                  {                      if (objName.Contains(";"))                      {                          int index = objName.IndexOf(";"'                              StringComparison.CurrentCulture);                          currObjName = objName.Substring(0' index);                          objName = objName.Substring(index + 1);                      }                      else                      {                          currObjName = objName;                      }                      LogMessage("childHandle: " + childHandle.Current.Name +                          " : " + currObjName + " : " +                          childHandle.Current.ControlType.ProgrammaticName);                      childHandle = utils.GetObjectHandle(childHandle'                          currObjName' type' false);                      if (childHandle == null)                      {                          if (currObjName == objName)                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + objName);                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + currObjName);                          }                      }                      // Store previous handle for later use                      prevObjHandle = childHandle;                      if (firstObjHandle == null)                      {                          // Save it for later use                          firstObjHandle = childHandle;                      }                      if ((actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false))                      {                          throw new XmlRpcFaultException(123'                              "Object state is disabled");                      }                      try                      {                          if (actionType == "Window")                          {                              utils.InternalXYClick(childHandle);                          }                          else                          {                              // SetFocus() fails on Windows Explorer                              childHandle.SetFocus();                          }                      }                      catch (Exception ex)                      {                          LogMessage(ex);                      }                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                          out pattern) || childHandle.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          if (actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window")                          {                              try                              {                                  LogMessage("Invoking menu item: " + currObjName +                                      " : " + objName + " : " +                                      childHandle.Current.ControlType.ProgrammaticName +                                      " : " + childHandle.Current.Name);                              }                              catch (Exception ex)                              {                                  // Noticed with closewindow() to close Notepad                                  //    System.UnauthorizedAccessException: Access is denied                                  //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED)                                  LogMessage(ex);                              }                              if (actionType != "Window")                              {                                  try                                  {                                      // SetFocus() fails on Windows Explorer                                      childHandle.SetFocus();                                  }                                  catch (Exception ex)                                  {                                      LogMessage(ex);                                  }                              }                              if (!(actionType == "VerifyCheck" && currObjName == objName) &&                                  (actionType != "Window"))                              {                                  utils.InternalClick(childHandle);                              }                              try                              {                                  // Invoke doesn't work for VMware Workstation                                  // But they work for Notepad                                  // MoveToAndClick works for VMware Workstation                                  // But not for Notepad (on first time)                                  // Requires 2 clicks !                                  //((InvokePattern)pattern).Invoke();                                  utils.InternalWait(1);                                  c = childHandle.FindAll(TreeScope.Children'                                      Condition.TrueCondition);                              }                              catch (System.NotImplementedException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("NotImplementedException");                                  LogMessage(ex);                              }                              catch (System.Windows.Automation.ElementNotEnabledException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("Element not enabled");                                  LogMessage(ex);                              }                              catch (Exception ex)                              {                                  LogMessage(ex);                              }                          }                      }                      if (currObjName == objName && actionType != "SubMenu")                      {                          int state;                          switch (actionType)                          {                              case "Select":                              case "Window":                                  // No child menu item to be processed                                  return 1;                              case "Check":                              case "UnCheck":                                  state = IsMenuChecked(childHandle);                                  LogMessage("IsMenuChecked(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  LogMessage("actionType: " + actionType);                                  // Don't process the last item                                  if (actionType == "Check")                                  {                                      if (state == 1)                                          // Already checked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Check menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  else if (actionType == "UnCheck")                                  {                                      if (state == 0)                                          // Already unchecked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Uncheck menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  break;                              case "Exist":                              case "Enabled":                                  state = utils.IsEnabled(childHandle) == true ? 1 : 0;                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.Name + " : " + state);                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  // Set it back to old state' else the menu selection left there                                  utils.InternalClick(firstObjHandle);                                  // Don't process the last item                                  if (actionType == "Enabled")                                      return state;                                  else if (actionType == "Exist")                                      return 1;                                  break;                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                              case "VerifyCheck":                                  state = IsMenuChecked(childHandle);                                  utils.InternalClick(firstObjHandle);                                  return state;                              default:                                  break;                          }                      }                      else if ((tmpContextHandle = utils.InternalWaitTillControlTypeExist(                          ControlType.Menu' processId' 3)) != null)                      {                          LogMessage("InternalWaitTillControlTypeExist");                          // Find object from current handle' rather than navigating                          // the complete window                          childHandle = tmpContextHandle;                          if (actionType != "SubMenu")                              continue;                          else if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                      }                      else if (c != null && c.Count > 0)                      {                          if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                          LogMessage("c != null && c.Count > 0");                          childHandle = windowHandle;                          continue;                      }                      // Required for Notepad like app                      if ((c == null || c.Count == 0))                      {                          LogMessage("Work around for Windows application");                          LogMessage(windowHandle.Current.Name + " : " + objName);                          AutomationElement tmpChildHandle = utils.GetObjectHandle(                              windowHandle' objName'                              type' false);                          // Work around for Notepad' as it doesn't find the menuitem                          // on clicking any menu                          if (tmpChildHandle != null)                          {                              LogMessage("Work around: tmpChildHandle != null");                              if (actionType == "SubMenu" && currObjName == objName)                                  // Work around for Notepad like app                                  childHandle = tmpChildHandle;                              else                                  // Work around for Notepad like app'                                  // but for actionType other than SubMenu                                  childHandle = windowHandle;                          }                      }                      if (currObjName == objName)                      {                          switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (firstObjHandle != null && actionType != "Window")                  {                      // Set it back to old state' else the menu selection left there                      utils.InternalXYClick(firstObjHandle);                  }                  if (((ex is ElementNotAvailableException) ||                      (ex is UnauthorizedAccessException)) &&                      actionType == "Window")                  {                      // API closewindow() can close Windows Explorer on XP' but:                      // -----------------------------------------------------------                      // if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      //     out pattern) || childHandle.TryGetCurrentPattern(                      //     ExpandCollapsePattern.Pattern' out pattern))                      // -----------------------------------------------------------                      // Sometimes above code will throw exception' sometimes not:                      //    System.Runtime.InteropServices.COMException (0x80040201):                      //       Exception from HRESULT: 0x80040201                      //    System.UnauthorizedAccessException' Access is denied:                      //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))                      // So use this if block as workaround                      return 1;                  }                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  w = null;                  pattern = null;                  windowHandle = childHandle = null;                  prevObjHandle = firstObjHandle = null;              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  processId = windowHandle.Current.ProcessId;                  windowHandle.SetFocus();                  LogMessage("Window name: " + windowHandle + " : " +                      windowHandle.Current.Name +                      " : " + windowHandle.Current.ControlType.ProgrammaticName);                  childHandle = windowHandle;                  /*                  // element is an AutomationElement.                  AutomationPattern[] patterns = childHandle.GetSupportedPatterns();                  foreach (AutomationPattern pattern1 in patterns)                  {                      Console.WriteLine("ProgrammaticName: " + pattern1.ProgrammaticName);                      Console.WriteLine("PatternName: " + Automation.PatternName(pattern1));                  }                  /**/                  while (true)                  {                      if (objName.Contains(";"))                      {                          int index = objName.IndexOf(";"'                              StringComparison.CurrentCulture);                          currObjName = objName.Substring(0' index);                          objName = objName.Substring(index + 1);                      }                      else                      {                          currObjName = objName;                      }                      LogMessage("childHandle: " + childHandle.Current.Name +                          " : " + currObjName + " : " +                          childHandle.Current.ControlType.ProgrammaticName);                      childHandle = utils.GetObjectHandle(childHandle'                          currObjName' type' false);                      if (childHandle == null)                      {                          if (currObjName == objName)                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + objName);                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + currObjName);                          }                      }                      // Store previous handle for later use                      prevObjHandle = childHandle;                      if (firstObjHandle == null)                      {                          // Save it for later use                          firstObjHandle = childHandle;                      }                      if ((actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false))                      {                          throw new XmlRpcFaultException(123'                              "Object state is disabled");                      }                      try                      {                          if (actionType == "Window")                          {                              utils.InternalXYClick(childHandle);                          }                          else                          {                              // SetFocus() fails on Windows Explorer                              childHandle.SetFocus();                          }                      }                      catch (Exception ex)                      {                          LogMessage(ex);                      }                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                          out pattern) || childHandle.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          if (actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window")                          {                              try                              {                                  LogMessage("Invoking menu item: " + currObjName +                                      " : " + objName + " : " +                                      childHandle.Current.ControlType.ProgrammaticName +                                      " : " + childHandle.Current.Name);                              }                              catch (Exception ex)                              {                                  // Noticed with closewindow() to close Notepad                                  //    System.UnauthorizedAccessException: Access is denied                                  //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED)                                  LogMessage(ex);                              }                              if (actionType != "Window")                              {                                  try                                  {                                      // SetFocus() fails on Windows Explorer                                      childHandle.SetFocus();                                  }                                  catch (Exception ex)                                  {                                      LogMessage(ex);                                  }                              }                              if (!(actionType == "VerifyCheck" && currObjName == objName) &&                                  (actionType != "Window"))                              {                                  utils.InternalClick(childHandle);                              }                              try                              {                                  // Invoke doesn't work for VMware Workstation                                  // But they work for Notepad                                  // MoveToAndClick works for VMware Workstation                                  // But not for Notepad (on first time)                                  // Requires 2 clicks !                                  //((InvokePattern)pattern).Invoke();                                  utils.InternalWait(1);                                  c = childHandle.FindAll(TreeScope.Children'                                      Condition.TrueCondition);                              }                              catch (System.NotImplementedException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("NotImplementedException");                                  LogMessage(ex);                              }                              catch (System.Windows.Automation.ElementNotEnabledException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("Element not enabled");                                  LogMessage(ex);                              }                              catch (Exception ex)                              {                                  LogMessage(ex);                              }                          }                      }                      if (currObjName == objName && actionType != "SubMenu")                      {                          int state;                          switch (actionType)                          {                              case "Select":                              case "Window":                                  // No child menu item to be processed                                  return 1;                              case "Check":                              case "UnCheck":                                  state = IsMenuChecked(childHandle);                                  LogMessage("IsMenuChecked(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  LogMessage("actionType: " + actionType);                                  // Don't process the last item                                  if (actionType == "Check")                                  {                                      if (state == 1)                                          // Already checked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Check menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  else if (actionType == "UnCheck")                                  {                                      if (state == 0)                                          // Already unchecked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Uncheck menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  break;                              case "Exist":                              case "Enabled":                                  state = utils.IsEnabled(childHandle) == true ? 1 : 0;                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.Name + " : " + state);                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  // Set it back to old state' else the menu selection left there                                  utils.InternalClick(firstObjHandle);                                  // Don't process the last item                                  if (actionType == "Enabled")                                      return state;                                  else if (actionType == "Exist")                                      return 1;                                  break;                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                              case "VerifyCheck":                                  state = IsMenuChecked(childHandle);                                  utils.InternalClick(firstObjHandle);                                  return state;                              default:                                  break;                          }                      }                      else if ((tmpContextHandle = utils.InternalWaitTillControlTypeExist(                          ControlType.Menu' processId' 3)) != null)                      {                          LogMessage("InternalWaitTillControlTypeExist");                          // Find object from current handle' rather than navigating                          // the complete window                          childHandle = tmpContextHandle;                          if (actionType != "SubMenu")                              continue;                          else if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                      }                      else if (c != null && c.Count > 0)                      {                          if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                          LogMessage("c != null && c.Count > 0");                          childHandle = windowHandle;                          continue;                      }                      // Required for Notepad like app                      if ((c == null || c.Count == 0))                      {                          LogMessage("Work around for Windows application");                          LogMessage(windowHandle.Current.Name + " : " + objName);                          AutomationElement tmpChildHandle = utils.GetObjectHandle(                              windowHandle' objName'                              type' false);                          // Work around for Notepad' as it doesn't find the menuitem                          // on clicking any menu                          if (tmpChildHandle != null)                          {                              LogMessage("Work around: tmpChildHandle != null");                              if (actionType == "SubMenu" && currObjName == objName)                                  // Work around for Notepad like app                                  childHandle = tmpChildHandle;                              else                                  // Work around for Notepad like app'                                  // but for actionType other than SubMenu                                  childHandle = windowHandle;                          }                      }                      if (currObjName == objName)                      {                          switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (firstObjHandle != null && actionType != "Window")                  {                      // Set it back to old state' else the menu selection left there                      utils.InternalXYClick(firstObjHandle);                  }                  if (((ex is ElementNotAvailableException) ||                      (ex is UnauthorizedAccessException)) &&                      actionType == "Window")                  {                      // API closewindow() can close Windows Explorer on XP' but:                      // -----------------------------------------------------------                      // if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      //     out pattern) || childHandle.TryGetCurrentPattern(                      //     ExpandCollapsePattern.Pattern' out pattern))                      // -----------------------------------------------------------                      // Sometimes above code will throw exception' sometimes not:                      //    System.Runtime.InteropServices.COMException (0x80040201):                      //       Exception from HRESULT: 0x80040201                      //    System.UnauthorizedAccessException' Access is denied:                      //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))                      // So use this if block as workaround                      return 1;                  }                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  w = null;                  pattern = null;                  windowHandle = childHandle = null;                  prevObjHandle = firstObjHandle = null;              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  processId = windowHandle.Current.ProcessId;                  windowHandle.SetFocus();                  LogMessage("Window name: " + windowHandle + " : " +                      windowHandle.Current.Name +                      " : " + windowHandle.Current.ControlType.ProgrammaticName);                  childHandle = windowHandle;                  /*                  // element is an AutomationElement.                  AutomationPattern[] patterns = childHandle.GetSupportedPatterns();                  foreach (AutomationPattern pattern1 in patterns)                  {                      Console.WriteLine("ProgrammaticName: " + pattern1.ProgrammaticName);                      Console.WriteLine("PatternName: " + Automation.PatternName(pattern1));                  }                  /**/                  while (true)                  {                      if (objName.Contains(";"))                      {                          int index = objName.IndexOf(";"'                              StringComparison.CurrentCulture);                          currObjName = objName.Substring(0' index);                          objName = objName.Substring(index + 1);                      }                      else                      {                          currObjName = objName;                      }                      LogMessage("childHandle: " + childHandle.Current.Name +                          " : " + currObjName + " : " +                          childHandle.Current.ControlType.ProgrammaticName);                      childHandle = utils.GetObjectHandle(childHandle'                          currObjName' type' false);                      if (childHandle == null)                      {                          if (currObjName == objName)                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + objName);                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + currObjName);                          }                      }                      // Store previous handle for later use                      prevObjHandle = childHandle;                      if (firstObjHandle == null)                      {                          // Save it for later use                          firstObjHandle = childHandle;                      }                      if ((actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false))                      {                          throw new XmlRpcFaultException(123'                              "Object state is disabled");                      }                      try                      {                          if (actionType == "Window")                          {                              utils.InternalXYClick(childHandle);                          }                          else                          {                              // SetFocus() fails on Windows Explorer                              childHandle.SetFocus();                          }                      }                      catch (Exception ex)                      {                          LogMessage(ex);                      }                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                          out pattern) || childHandle.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          if (actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window")                          {                              try                              {                                  LogMessage("Invoking menu item: " + currObjName +                                      " : " + objName + " : " +                                      childHandle.Current.ControlType.ProgrammaticName +                                      " : " + childHandle.Current.Name);                              }                              catch (Exception ex)                              {                                  // Noticed with closewindow() to close Notepad                                  //    System.UnauthorizedAccessException: Access is denied                                  //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED)                                  LogMessage(ex);                              }                              if (actionType != "Window")                              {                                  try                                  {                                      // SetFocus() fails on Windows Explorer                                      childHandle.SetFocus();                                  }                                  catch (Exception ex)                                  {                                      LogMessage(ex);                                  }                              }                              if (!(actionType == "VerifyCheck" && currObjName == objName) &&                                  (actionType != "Window"))                              {                                  utils.InternalClick(childHandle);                              }                              try                              {                                  // Invoke doesn't work for VMware Workstation                                  // But they work for Notepad                                  // MoveToAndClick works for VMware Workstation                                  // But not for Notepad (on first time)                                  // Requires 2 clicks !                                  //((InvokePattern)pattern).Invoke();                                  utils.InternalWait(1);                                  c = childHandle.FindAll(TreeScope.Children'                                      Condition.TrueCondition);                              }                              catch (System.NotImplementedException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("NotImplementedException");                                  LogMessage(ex);                              }                              catch (System.Windows.Automation.ElementNotEnabledException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("Element not enabled");                                  LogMessage(ex);                              }                              catch (Exception ex)                              {                                  LogMessage(ex);                              }                          }                      }                      if (currObjName == objName && actionType != "SubMenu")                      {                          int state;                          switch (actionType)                          {                              case "Select":                              case "Window":                                  // No child menu item to be processed                                  return 1;                              case "Check":                              case "UnCheck":                                  state = IsMenuChecked(childHandle);                                  LogMessage("IsMenuChecked(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  LogMessage("actionType: " + actionType);                                  // Don't process the last item                                  if (actionType == "Check")                                  {                                      if (state == 1)                                          // Already checked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Check menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  else if (actionType == "UnCheck")                                  {                                      if (state == 0)                                          // Already unchecked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Uncheck menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  break;                              case "Exist":                              case "Enabled":                                  state = utils.IsEnabled(childHandle) == true ? 1 : 0;                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.Name + " : " + state);                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  // Set it back to old state' else the menu selection left there                                  utils.InternalClick(firstObjHandle);                                  // Don't process the last item                                  if (actionType == "Enabled")                                      return state;                                  else if (actionType == "Exist")                                      return 1;                                  break;                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                              case "VerifyCheck":                                  state = IsMenuChecked(childHandle);                                  utils.InternalClick(firstObjHandle);                                  return state;                              default:                                  break;                          }                      }                      else if ((tmpContextHandle = utils.InternalWaitTillControlTypeExist(                          ControlType.Menu' processId' 3)) != null)                      {                          LogMessage("InternalWaitTillControlTypeExist");                          // Find object from current handle' rather than navigating                          // the complete window                          childHandle = tmpContextHandle;                          if (actionType != "SubMenu")                              continue;                          else if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                      }                      else if (c != null && c.Count > 0)                      {                          if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                          LogMessage("c != null && c.Count > 0");                          childHandle = windowHandle;                          continue;                      }                      // Required for Notepad like app                      if ((c == null || c.Count == 0))                      {                          LogMessage("Work around for Windows application");                          LogMessage(windowHandle.Current.Name + " : " + objName);                          AutomationElement tmpChildHandle = utils.GetObjectHandle(                              windowHandle' objName'                              type' false);                          // Work around for Notepad' as it doesn't find the menuitem                          // on clicking any menu                          if (tmpChildHandle != null)                          {                              LogMessage("Work around: tmpChildHandle != null");                              if (actionType == "SubMenu" && currObjName == objName)                                  // Work around for Notepad like app                                  childHandle = tmpChildHandle;                              else                                  // Work around for Notepad like app'                                  // but for actionType other than SubMenu                                  childHandle = windowHandle;                          }                      }                      if (currObjName == objName)                      {                          switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (firstObjHandle != null && actionType != "Window")                  {                      // Set it back to old state' else the menu selection left there                      utils.InternalXYClick(firstObjHandle);                  }                  if (((ex is ElementNotAvailableException) ||                      (ex is UnauthorizedAccessException)) &&                      actionType == "Window")                  {                      // API closewindow() can close Windows Explorer on XP' but:                      // -----------------------------------------------------------                      // if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      //     out pattern) || childHandle.TryGetCurrentPattern(                      //     ExpandCollapsePattern.Pattern' out pattern))                      // -----------------------------------------------------------                      // Sometimes above code will throw exception' sometimes not:                      //    System.Runtime.InteropServices.COMException (0x80040201):                      //       Exception from HRESULT: 0x80040201                      //    System.UnauthorizedAccessException' Access is denied:                      //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))                      // So use this if block as workaround                      return 1;                  }                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  w = null;                  pattern = null;                  windowHandle = childHandle = null;                  prevObjHandle = firstObjHandle = null;              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  processId = windowHandle.Current.ProcessId;                  windowHandle.SetFocus();                  LogMessage("Window name: " + windowHandle + " : " +                      windowHandle.Current.Name +                      " : " + windowHandle.Current.ControlType.ProgrammaticName);                  childHandle = windowHandle;                  /*                  // element is an AutomationElement.                  AutomationPattern[] patterns = childHandle.GetSupportedPatterns();                  foreach (AutomationPattern pattern1 in patterns)                  {                      Console.WriteLine("ProgrammaticName: " + pattern1.ProgrammaticName);                      Console.WriteLine("PatternName: " + Automation.PatternName(pattern1));                  }                  /**/                  while (true)                  {                      if (objName.Contains(";"))                      {                          int index = objName.IndexOf(";"'                              StringComparison.CurrentCulture);                          currObjName = objName.Substring(0' index);                          objName = objName.Substring(index + 1);                      }                      else                      {                          currObjName = objName;                      }                      LogMessage("childHandle: " + childHandle.Current.Name +                          " : " + currObjName + " : " +                          childHandle.Current.ControlType.ProgrammaticName);                      childHandle = utils.GetObjectHandle(childHandle'                          currObjName' type' false);                      if (childHandle == null)                      {                          if (currObjName == objName)                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + objName);                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + currObjName);                          }                      }                      // Store previous handle for later use                      prevObjHandle = childHandle;                      if (firstObjHandle == null)                      {                          // Save it for later use                          firstObjHandle = childHandle;                      }                      if ((actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false))                      {                          throw new XmlRpcFaultException(123'                              "Object state is disabled");                      }                      try                      {                          if (actionType == "Window")                          {                              utils.InternalXYClick(childHandle);                          }                          else                          {                              // SetFocus() fails on Windows Explorer                              childHandle.SetFocus();                          }                      }                      catch (Exception ex)                      {                          LogMessage(ex);                      }                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                          out pattern) || childHandle.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          if (actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window")                          {                              try                              {                                  LogMessage("Invoking menu item: " + currObjName +                                      " : " + objName + " : " +                                      childHandle.Current.ControlType.ProgrammaticName +                                      " : " + childHandle.Current.Name);                              }                              catch (Exception ex)                              {                                  // Noticed with closewindow() to close Notepad                                  //    System.UnauthorizedAccessException: Access is denied                                  //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED)                                  LogMessage(ex);                              }                              if (actionType != "Window")                              {                                  try                                  {                                      // SetFocus() fails on Windows Explorer                                      childHandle.SetFocus();                                  }                                  catch (Exception ex)                                  {                                      LogMessage(ex);                                  }                              }                              if (!(actionType == "VerifyCheck" && currObjName == objName) &&                                  (actionType != "Window"))                              {                                  utils.InternalClick(childHandle);                              }                              try                              {                                  // Invoke doesn't work for VMware Workstation                                  // But they work for Notepad                                  // MoveToAndClick works for VMware Workstation                                  // But not for Notepad (on first time)                                  // Requires 2 clicks !                                  //((InvokePattern)pattern).Invoke();                                  utils.InternalWait(1);                                  c = childHandle.FindAll(TreeScope.Children'                                      Condition.TrueCondition);                              }                              catch (System.NotImplementedException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("NotImplementedException");                                  LogMessage(ex);                              }                              catch (System.Windows.Automation.ElementNotEnabledException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("Element not enabled");                                  LogMessage(ex);                              }                              catch (Exception ex)                              {                                  LogMessage(ex);                              }                          }                      }                      if (currObjName == objName && actionType != "SubMenu")                      {                          int state;                          switch (actionType)                          {                              case "Select":                              case "Window":                                  // No child menu item to be processed                                  return 1;                              case "Check":                              case "UnCheck":                                  state = IsMenuChecked(childHandle);                                  LogMessage("IsMenuChecked(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  LogMessage("actionType: " + actionType);                                  // Don't process the last item                                  if (actionType == "Check")                                  {                                      if (state == 1)                                          // Already checked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Check menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  else if (actionType == "UnCheck")                                  {                                      if (state == 0)                                          // Already unchecked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Uncheck menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  break;                              case "Exist":                              case "Enabled":                                  state = utils.IsEnabled(childHandle) == true ? 1 : 0;                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.Name + " : " + state);                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  // Set it back to old state' else the menu selection left there                                  utils.InternalClick(firstObjHandle);                                  // Don't process the last item                                  if (actionType == "Enabled")                                      return state;                                  else if (actionType == "Exist")                                      return 1;                                  break;                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                              case "VerifyCheck":                                  state = IsMenuChecked(childHandle);                                  utils.InternalClick(firstObjHandle);                                  return state;                              default:                                  break;                          }                      }                      else if ((tmpContextHandle = utils.InternalWaitTillControlTypeExist(                          ControlType.Menu' processId' 3)) != null)                      {                          LogMessage("InternalWaitTillControlTypeExist");                          // Find object from current handle' rather than navigating                          // the complete window                          childHandle = tmpContextHandle;                          if (actionType != "SubMenu")                              continue;                          else if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                      }                      else if (c != null && c.Count > 0)                      {                          if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                          LogMessage("c != null && c.Count > 0");                          childHandle = windowHandle;                          continue;                      }                      // Required for Notepad like app                      if ((c == null || c.Count == 0))                      {                          LogMessage("Work around for Windows application");                          LogMessage(windowHandle.Current.Name + " : " + objName);                          AutomationElement tmpChildHandle = utils.GetObjectHandle(                              windowHandle' objName'                              type' false);                          // Work around for Notepad' as it doesn't find the menuitem                          // on clicking any menu                          if (tmpChildHandle != null)                          {                              LogMessage("Work around: tmpChildHandle != null");                              if (actionType == "SubMenu" && currObjName == objName)                                  // Work around for Notepad like app                                  childHandle = tmpChildHandle;                              else                                  // Work around for Notepad like app'                                  // but for actionType other than SubMenu                                  childHandle = windowHandle;                          }                      }                      if (currObjName == objName)                      {                          switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (firstObjHandle != null && actionType != "Window")                  {                      // Set it back to old state' else the menu selection left there                      utils.InternalXYClick(firstObjHandle);                  }                  if (((ex is ElementNotAvailableException) ||                      (ex is UnauthorizedAccessException)) &&                      actionType == "Window")                  {                      // API closewindow() can close Windows Explorer on XP' but:                      // -----------------------------------------------------------                      // if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      //     out pattern) || childHandle.TryGetCurrentPattern(                      //     ExpandCollapsePattern.Pattern' out pattern))                      // -----------------------------------------------------------                      // Sometimes above code will throw exception' sometimes not:                      //    System.Runtime.InteropServices.COMException (0x80040201):                      //       Exception from HRESULT: 0x80040201                      //    System.UnauthorizedAccessException' Access is denied:                      //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))                      // So use this if block as workaround                      return 1;                  }                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  w = null;                  pattern = null;                  windowHandle = childHandle = null;                  prevObjHandle = firstObjHandle = null;              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  processId = windowHandle.Current.ProcessId;                  windowHandle.SetFocus();                  LogMessage("Window name: " + windowHandle + " : " +                      windowHandle.Current.Name +                      " : " + windowHandle.Current.ControlType.ProgrammaticName);                  childHandle = windowHandle;                  /*                  // element is an AutomationElement.                  AutomationPattern[] patterns = childHandle.GetSupportedPatterns();                  foreach (AutomationPattern pattern1 in patterns)                  {                      Console.WriteLine("ProgrammaticName: " + pattern1.ProgrammaticName);                      Console.WriteLine("PatternName: " + Automation.PatternName(pattern1));                  }                  /**/                  while (true)                  {                      if (objName.Contains(";"))                      {                          int index = objName.IndexOf(";"'                              StringComparison.CurrentCulture);                          currObjName = objName.Substring(0' index);                          objName = objName.Substring(index + 1);                      }                      else                      {                          currObjName = objName;                      }                      LogMessage("childHandle: " + childHandle.Current.Name +                          " : " + currObjName + " : " +                          childHandle.Current.ControlType.ProgrammaticName);                      childHandle = utils.GetObjectHandle(childHandle'                          currObjName' type' false);                      if (childHandle == null)                      {                          if (currObjName == objName)                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + objName);                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + currObjName);                          }                      }                      // Store previous handle for later use                      prevObjHandle = childHandle;                      if (firstObjHandle == null)                      {                          // Save it for later use                          firstObjHandle = childHandle;                      }                      if ((actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false))                      {                          throw new XmlRpcFaultException(123'                              "Object state is disabled");                      }                      try                      {                          if (actionType == "Window")                          {                              utils.InternalXYClick(childHandle);                          }                          else                          {                              // SetFocus() fails on Windows Explorer                              childHandle.SetFocus();                          }                      }                      catch (Exception ex)                      {                          LogMessage(ex);                      }                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                          out pattern) || childHandle.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          if (actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window")                          {                              try                              {                                  LogMessage("Invoking menu item: " + currObjName +                                      " : " + objName + " : " +                                      childHandle.Current.ControlType.ProgrammaticName +                                      " : " + childHandle.Current.Name);                              }                              catch (Exception ex)                              {                                  // Noticed with closewindow() to close Notepad                                  //    System.UnauthorizedAccessException: Access is denied                                  //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED)                                  LogMessage(ex);                              }                              if (actionType != "Window")                              {                                  try                                  {                                      // SetFocus() fails on Windows Explorer                                      childHandle.SetFocus();                                  }                                  catch (Exception ex)                                  {                                      LogMessage(ex);                                  }                              }                              if (!(actionType == "VerifyCheck" && currObjName == objName) &&                                  (actionType != "Window"))                              {                                  utils.InternalClick(childHandle);                              }                              try                              {                                  // Invoke doesn't work for VMware Workstation                                  // But they work for Notepad                                  // MoveToAndClick works for VMware Workstation                                  // But not for Notepad (on first time)                                  // Requires 2 clicks !                                  //((InvokePattern)pattern).Invoke();                                  utils.InternalWait(1);                                  c = childHandle.FindAll(TreeScope.Children'                                      Condition.TrueCondition);                              }                              catch (System.NotImplementedException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("NotImplementedException");                                  LogMessage(ex);                              }                              catch (System.Windows.Automation.ElementNotEnabledException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("Element not enabled");                                  LogMessage(ex);                              }                              catch (Exception ex)                              {                                  LogMessage(ex);                              }                          }                      }                      if (currObjName == objName && actionType != "SubMenu")                      {                          int state;                          switch (actionType)                          {                              case "Select":                              case "Window":                                  // No child menu item to be processed                                  return 1;                              case "Check":                              case "UnCheck":                                  state = IsMenuChecked(childHandle);                                  LogMessage("IsMenuChecked(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  LogMessage("actionType: " + actionType);                                  // Don't process the last item                                  if (actionType == "Check")                                  {                                      if (state == 1)                                          // Already checked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Check menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  else if (actionType == "UnCheck")                                  {                                      if (state == 0)                                          // Already unchecked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Uncheck menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  break;                              case "Exist":                              case "Enabled":                                  state = utils.IsEnabled(childHandle) == true ? 1 : 0;                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.Name + " : " + state);                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  // Set it back to old state' else the menu selection left there                                  utils.InternalClick(firstObjHandle);                                  // Don't process the last item                                  if (actionType == "Enabled")                                      return state;                                  else if (actionType == "Exist")                                      return 1;                                  break;                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                              case "VerifyCheck":                                  state = IsMenuChecked(childHandle);                                  utils.InternalClick(firstObjHandle);                                  return state;                              default:                                  break;                          }                      }                      else if ((tmpContextHandle = utils.InternalWaitTillControlTypeExist(                          ControlType.Menu' processId' 3)) != null)                      {                          LogMessage("InternalWaitTillControlTypeExist");                          // Find object from current handle' rather than navigating                          // the complete window                          childHandle = tmpContextHandle;                          if (actionType != "SubMenu")                              continue;                          else if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                      }                      else if (c != null && c.Count > 0)                      {                          if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                          LogMessage("c != null && c.Count > 0");                          childHandle = windowHandle;                          continue;                      }                      // Required for Notepad like app                      if ((c == null || c.Count == 0))                      {                          LogMessage("Work around for Windows application");                          LogMessage(windowHandle.Current.Name + " : " + objName);                          AutomationElement tmpChildHandle = utils.GetObjectHandle(                              windowHandle' objName'                              type' false);                          // Work around for Notepad' as it doesn't find the menuitem                          // on clicking any menu                          if (tmpChildHandle != null)                          {                              LogMessage("Work around: tmpChildHandle != null");                              if (actionType == "SubMenu" && currObjName == objName)                                  // Work around for Notepad like app                                  childHandle = tmpChildHandle;                              else                                  // Work around for Notepad like app'                                  // but for actionType other than SubMenu                                  childHandle = windowHandle;                          }                      }                      if (currObjName == objName)                      {                          switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (firstObjHandle != null && actionType != "Window")                  {                      // Set it back to old state' else the menu selection left there                      utils.InternalXYClick(firstObjHandle);                  }                  if (((ex is ElementNotAvailableException) ||                      (ex is UnauthorizedAccessException)) &&                      actionType == "Window")                  {                      // API closewindow() can close Windows Explorer on XP' but:                      // -----------------------------------------------------------                      // if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      //     out pattern) || childHandle.TryGetCurrentPattern(                      //     ExpandCollapsePattern.Pattern' out pattern))                      // -----------------------------------------------------------                      // Sometimes above code will throw exception' sometimes not:                      //    System.Runtime.InteropServices.COMException (0x80040201):                      //       Exception from HRESULT: 0x80040201                      //    System.UnauthorizedAccessException' Access is denied:                      //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))                      // So use this if block as workaround                      return 1;                  }                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  w = null;                  pattern = null;                  windowHandle = childHandle = null;                  prevObjHandle = firstObjHandle = null;              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following statement contains a magic number: try              {                  windowHandle = utils.GetWindowHandle(windowName);                  if (windowHandle == null)                  {                      throw new XmlRpcFaultException(123'                          "Unable to find window: " + windowName);                  }                  processId = windowHandle.Current.ProcessId;                  windowHandle.SetFocus();                  LogMessage("Window name: " + windowHandle + " : " +                      windowHandle.Current.Name +                      " : " + windowHandle.Current.ControlType.ProgrammaticName);                  childHandle = windowHandle;                  /*                  // element is an AutomationElement.                  AutomationPattern[] patterns = childHandle.GetSupportedPatterns();                  foreach (AutomationPattern pattern1 in patterns)                  {                      Console.WriteLine("ProgrammaticName: " + pattern1.ProgrammaticName);                      Console.WriteLine("PatternName: " + Automation.PatternName(pattern1));                  }                  /**/                  while (true)                  {                      if (objName.Contains(";"))                      {                          int index = objName.IndexOf(";"'                              StringComparison.CurrentCulture);                          currObjName = objName.Substring(0' index);                          objName = objName.Substring(index + 1);                      }                      else                      {                          currObjName = objName;                      }                      LogMessage("childHandle: " + childHandle.Current.Name +                          " : " + currObjName + " : " +                          childHandle.Current.ControlType.ProgrammaticName);                      childHandle = utils.GetObjectHandle(childHandle'                          currObjName' type' false);                      if (childHandle == null)                      {                          if (currObjName == objName)                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + objName);                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unable to find Object: " + currObjName);                          }                      }                      // Store previous handle for later use                      prevObjHandle = childHandle;                      if (firstObjHandle == null)                      {                          // Save it for later use                          firstObjHandle = childHandle;                      }                      if ((actionType == "Select" || actionType == "SubMenu" ||                          actionType == "Check" || actionType == "UnCheck" ||                          actionType == "VerifyCheck" || actionType == "Window") &&                          !utils.IsEnabled(childHandle' false))                      {                          throw new XmlRpcFaultException(123'                              "Object state is disabled");                      }                      try                      {                          if (actionType == "Window")                          {                              utils.InternalXYClick(childHandle);                          }                          else                          {                              // SetFocus() fails on Windows Explorer                              childHandle.SetFocus();                          }                      }                      catch (Exception ex)                      {                          LogMessage(ex);                      }                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                          out pattern) || childHandle.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          if (actionType == "Select" || currObjName != objName ||                               actionType == "SubMenu" || actionType == "VerifyCheck" ||                               actionType == "Window")                          {                              try                              {                                  LogMessage("Invoking menu item: " + currObjName +                                      " : " + objName + " : " +                                      childHandle.Current.ControlType.ProgrammaticName +                                      " : " + childHandle.Current.Name);                              }                              catch (Exception ex)                              {                                  // Noticed with closewindow() to close Notepad                                  //    System.UnauthorizedAccessException: Access is denied                                  //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED)                                  LogMessage(ex);                              }                              if (actionType != "Window")                              {                                  try                                  {                                      // SetFocus() fails on Windows Explorer                                      childHandle.SetFocus();                                  }                                  catch (Exception ex)                                  {                                      LogMessage(ex);                                  }                              }                              if (!(actionType == "VerifyCheck" && currObjName == objName) &&                                  (actionType != "Window"))                              {                                  utils.InternalClick(childHandle);                              }                              try                              {                                  // Invoke doesn't work for VMware Workstation                                  // But they work for Notepad                                  // MoveToAndClick works for VMware Workstation                                  // But not for Notepad (on first time)                                  // Requires 2 clicks !                                  //((InvokePattern)pattern).Invoke();                                  utils.InternalWait(1);                                  c = childHandle.FindAll(TreeScope.Children'                                      Condition.TrueCondition);                              }                              catch (System.NotImplementedException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("NotImplementedException");                                  LogMessage(ex);                              }                              catch (System.Windows.Automation.ElementNotEnabledException ex)                              {                                  // Noticed with VMware Workstation                                  //    System.Runtime.InteropServices.COMException (0x80040200):                                  //       Exception from HRESULT: 0x80040200                                  LogMessage("Element not enabled");                                  LogMessage(ex);                              }                              catch (Exception ex)                              {                                  LogMessage(ex);                              }                          }                      }                      if (currObjName == objName && actionType != "SubMenu")                      {                          int state;                          switch (actionType)                          {                              case "Select":                              case "Window":                                  // No child menu item to be processed                                  return 1;                              case "Check":                              case "UnCheck":                                  state = IsMenuChecked(childHandle);                                  LogMessage("IsMenuChecked(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  LogMessage("actionType: " + actionType);                                  // Don't process the last item                                  if (actionType == "Check")                                  {                                      if (state == 1)                                          // Already checked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Check menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  else if (actionType == "UnCheck")                                  {                                      if (state == 0)                                          // Already unchecked' just click back the main menu                                          utils.InternalClick(firstObjHandle);                                      else                                          // Uncheck menu                                          utils.InternalClick(childHandle);                                      return 1;                                  }                                  break;                              case "Exist":                              case "Enabled":                                  state = utils.IsEnabled(childHandle) == true ? 1 : 0;                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.Name + " : " + state);                                  LogMessage("IsEnabled(childHandle): " +                                      childHandle.Current.ControlType.ProgrammaticName);                                  // Set it back to old state' else the menu selection left there                                  utils.InternalClick(firstObjHandle);                                  // Don't process the last item                                  if (actionType == "Enabled")                                      return state;                                  else if (actionType == "Exist")                                      return 1;                                  break;                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                              case "VerifyCheck":                                  state = IsMenuChecked(childHandle);                                  utils.InternalClick(firstObjHandle);                                  return state;                              default:                                  break;                          }                      }                      else if ((tmpContextHandle = utils.InternalWaitTillControlTypeExist(                          ControlType.Menu' processId' 3)) != null)                      {                          LogMessage("InternalWaitTillControlTypeExist");                          // Find object from current handle' rather than navigating                          // the complete window                          childHandle = tmpContextHandle;                          if (actionType != "SubMenu")                              continue;                          else if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                      }                      else if (c != null && c.Count > 0)                      {                          if (currObjName == objName)                          {                              switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }                          }                          LogMessage("c != null && c.Count > 0");                          childHandle = windowHandle;                          continue;                      }                      // Required for Notepad like app                      if ((c == null || c.Count == 0))                      {                          LogMessage("Work around for Windows application");                          LogMessage(windowHandle.Current.Name + " : " + objName);                          AutomationElement tmpChildHandle = utils.GetObjectHandle(                              windowHandle' objName'                              type' false);                          // Work around for Notepad' as it doesn't find the menuitem                          // on clicking any menu                          if (tmpChildHandle != null)                          {                              LogMessage("Work around: tmpChildHandle != null");                              if (actionType == "SubMenu" && currObjName == objName)                                  // Work around for Notepad like app                                  childHandle = tmpChildHandle;                              else                                  // Work around for Notepad like app'                                  // but for actionType other than SubMenu                                  childHandle = windowHandle;                          }                      }                      if (currObjName == objName)                      {                          switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (firstObjHandle != null && actionType != "Window")                  {                      // Set it back to old state' else the menu selection left there                      utils.InternalXYClick(firstObjHandle);                  }                  if (((ex is ElementNotAvailableException) ||                      (ex is UnauthorizedAccessException)) &&                      actionType == "Window")                  {                      // API closewindow() can close Windows Explorer on XP' but:                      // -----------------------------------------------------------                      // if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      //     out pattern) || childHandle.TryGetCurrentPattern(                      //     ExpandCollapsePattern.Pattern' out pattern))                      // -----------------------------------------------------------                      // Sometimes above code will throw exception' sometimes not:                      //    System.Runtime.InteropServices.COMException (0x80040201):                      //       Exception from HRESULT: 0x80040201                      //    System.UnauthorizedAccessException' Access is denied:                      //       Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))                      // So use this if block as workaround                      return 1;                  }                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  w = null;                  pattern = null;                  windowHandle = childHandle = null;                  prevObjHandle = firstObjHandle = null;              }
Magic Number,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,ListSubMenus,The following statement contains a magic number: try              {                  if (InternalMenuHandler(windowName' objName'                      ref menuList' "SubMenu") == 1)                  {                      return menuList.ToArray(typeof(string)) as string[];                  }                  else                  {                      throw new XmlRpcFaultException(123' "Unable to get sub menuitem.");                  }              }              finally              {                  menuList = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseLeftClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  if (childHandle.Current.ControlType == ControlType.Pane)                  {                      // NOTE: Work around' as the pane doesn't seem to work                      // with any actions. Noticed this window' when Windows                      // Security Warning dialog pop's up                      utils.InternalClick(childHandle);                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      out pattern))                  {                      if (childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem)                      {                          //((InvokePattern)invokePattern).Invoke();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(childHandle);                      }                      else                      {                          try                          {                              ((InvokePattern)pattern).Invoke();                          }                          catch (Exception ex)                          {                              LogMessage(ex);                              // Have noticed exception with                              // maximize / minimize button                              utils.InternalClick(childHandle);                          }                      }                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                      out pattern))                  {                      ((SelectionItemPattern)pattern).Select();                      return 1;                  }                  else                  {                      utils.InternalClick(childHandle);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseLeftClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  if (childHandle.Current.ControlType == ControlType.Pane)                  {                      // NOTE: Work around' as the pane doesn't seem to work                      // with any actions. Noticed this window' when Windows                      // Security Warning dialog pop's up                      utils.InternalClick(childHandle);                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                      out pattern))                  {                      if (childHandle.Current.ControlType == ControlType.Menu ||                          childHandle.Current.ControlType == ControlType.MenuBar ||                          childHandle.Current.ControlType == ControlType.MenuItem ||                          childHandle.Current.ControlType == ControlType.ListItem)                      {                          //((InvokePattern)invokePattern).Invoke();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(childHandle);                      }                      else                      {                          try                          {                              ((InvokePattern)pattern).Invoke();                          }                          catch (Exception ex)                          {                              LogMessage(ex);                              // Have noticed exception with                              // maximize / minimize button                              utils.InternalClick(childHandle);                          }                      }                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                      out pattern))                  {                      ((SelectionItemPattern)pattern).Select();                      return 1;                  }                  else                  {                      utils.InternalClick(childHandle);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseLeftClick,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b3c");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b3c");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b3c");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b3c");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseRightClick,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b1d");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b1d");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b1d");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "b1d");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,DoubleClick,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "abs");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "abs");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "abs");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: try              {                  childHandle = utils.GetObjectHandle(windowName' objName);                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  try                  {                      childHandle.SetFocus();                  }                  catch (Exception ex)                  {                      // Have noticed exception with                      // maximize / minimize button                      LogMessage(ex);                  }                  Rect rect = childHandle.Current.BoundingRectangle;                  GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                      (int)(rect.Y + rect.Height / 2)' "abs");                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,MouseMove,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to perform action");
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,GenerateMouseEvent,The following statement contains a magic number: switch (type)              {                  case "b1p":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.LeftDown);                      break;                  case "b1r":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.LeftUp);                      break;                  case "b1c":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftUp);                      break;                  case "b1d":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftUp);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.LeftUp);                      break;                  case "b2p":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.MiddleDown);                      break;                  case "b2r":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.MiddleUp);                      break;                  case "b2c":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.MiddleDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.MiddleUp);                      break;                  case "b3p":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.RightDown);                      break;                  case "b3r":                      Input.SendMouseInput(x' y' 0' SendMouseInputFlags.RightUp);                      break;                  case "b3c":                      Input.MoveTo(pt);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.RightDown);                      Input.SendMouseInput(0' 0' 0' SendMouseInputFlags.RightUp);                      break;                  case "abs":                      Input.SendMouseInput(pt.X' pt.Y' 0'                          SendMouseInputFlags.Move | SendMouseInputFlags.Absolute);                      break;                  case "rel":                      Input.SendMouseInput(pt.X' pt.Y' 0' SendMouseInputFlags.Move);                      break;                  default:                      throw new XmlRpcFaultException(123'                          "Unsupported mouse type: " + type);              }
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: if (source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1])                  return 0;
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: if (source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1])                  return 0;
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: if (source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1])                  return 0;
Magic Number,Ldtpd,Mouse,C:\repos\ldtp_cobra\Ldtpd\Mouse.cs,SimulateMouseMove,The following statement contains a magic number: if (source_x < size[0] || source_y < size[1] ||                  dest_x > size[2] || dest_y > size[3] ||                  source_x > size[2] || source_y > size[3] ||                  dest_x < size[0] || dest_y < size[1])                  return 0;
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: try              {                  processName = GetProcessName(processName);                  common.LogMessage(processName);                  Process[] ps = Process.GetProcessesByName(processName);                  foreach (Process p in ps)                  {                      // Unable to get PrivateWorkingSet64 as displayed in                      // Task Manager' so getting the closest one WorkingSet64                      common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));                      if (monitor)                          common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));                      // Output in MB (Linux compatible output)                      // Working memory will be in bytes' to convert it to MB                      // divide it by 1024*1024                      memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));                  }                  if (common.Debug)                  {                      foreach (long value in memoryUsage)                          common.LogMessage(value);                  }                  return memoryUsage.ToArray(typeof(long)) as long[];              }              catch (Exception ex)              {                  common.LogMessage(ex);                  return memoryUsage.ToArray(typeof(long)) as long[];              }              finally              {                  memoryUsage = null;              }
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: try              {                  processName = GetProcessName(processName);                  common.LogMessage(processName);                  Process[] ps = Process.GetProcessesByName(processName);                  foreach (Process p in ps)                  {                      // Unable to get PrivateWorkingSet64 as displayed in                      // Task Manager' so getting the closest one WorkingSet64                      common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));                      if (monitor)                          common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));                      // Output in MB (Linux compatible output)                      // Working memory will be in bytes' to convert it to MB                      // divide it by 1024*1024                      memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));                  }                  if (common.Debug)                  {                      foreach (long value in memoryUsage)                          common.LogMessage(value);                  }                  return memoryUsage.ToArray(typeof(long)) as long[];              }              catch (Exception ex)              {                  common.LogMessage(ex);                  return memoryUsage.ToArray(typeof(long)) as long[];              }              finally              {                  memoryUsage = null;              }
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: try              {                  processName = GetProcessName(processName);                  common.LogMessage(processName);                  Process[] ps = Process.GetProcessesByName(processName);                  foreach (Process p in ps)                  {                      // Unable to get PrivateWorkingSet64 as displayed in                      // Task Manager' so getting the closest one WorkingSet64                      common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));                      if (monitor)                          common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));                      // Output in MB (Linux compatible output)                      // Working memory will be in bytes' to convert it to MB                      // divide it by 1024*1024                      memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));                  }                  if (common.Debug)                  {                      foreach (long value in memoryUsage)                          common.LogMessage(value);                  }                  return memoryUsage.ToArray(typeof(long)) as long[];              }              catch (Exception ex)              {                  common.LogMessage(ex);                  return memoryUsage.ToArray(typeof(long)) as long[];              }              finally              {                  memoryUsage = null;              }
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: try              {                  processName = GetProcessName(processName);                  common.LogMessage(processName);                  Process[] ps = Process.GetProcessesByName(processName);                  foreach (Process p in ps)                  {                      // Unable to get PrivateWorkingSet64 as displayed in                      // Task Manager' so getting the closest one WorkingSet64                      common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));                      if (monitor)                          common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));                      // Output in MB (Linux compatible output)                      // Working memory will be in bytes' to convert it to MB                      // divide it by 1024*1024                      memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));                  }                  if (common.Debug)                  {                      foreach (long value in memoryUsage)                          common.LogMessage(value);                  }                  return memoryUsage.ToArray(typeof(long)) as long[];              }              catch (Exception ex)              {                  common.LogMessage(ex);                  return memoryUsage.ToArray(typeof(long)) as long[];              }              finally              {                  memoryUsage = null;              }
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: try              {                  processName = GetProcessName(processName);                  common.LogMessage(processName);                  Process[] ps = Process.GetProcessesByName(processName);                  foreach (Process p in ps)                  {                      // Unable to get PrivateWorkingSet64 as displayed in                      // Task Manager' so getting the closest one WorkingSet64                      common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));                      if (monitor)                          common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));                      // Output in MB (Linux compatible output)                      // Working memory will be in bytes' to convert it to MB                      // divide it by 1024*1024                      memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));                  }                  if (common.Debug)                  {                      foreach (long value in memoryUsage)                          common.LogMessage(value);                  }                  return memoryUsage.ToArray(typeof(long)) as long[];              }              catch (Exception ex)              {                  common.LogMessage(ex);                  return memoryUsage.ToArray(typeof(long)) as long[];              }              finally              {                  memoryUsage = null;              }
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetPhysicalMemoryUsage,The following statement contains a magic number: try              {                  processName = GetProcessName(processName);                  common.LogMessage(processName);                  Process[] ps = Process.GetProcessesByName(processName);                  foreach (Process p in ps)                  {                      // Unable to get PrivateWorkingSet64 as displayed in                      // Task Manager' so getting the closest one WorkingSet64                      common.LogMessage("Memory used: {0}." +                          p.WorkingSet64 / (1024 * 1024));                      if (monitor)                          common.LogProcessStat(string.Format("MEMINFO-{0}({1}) - {2}"'                              p.ProcessName' p.Id' p.WorkingSet64 / (1024 * 1024)));                      // Output in MB (Linux compatible output)                      // Working memory will be in bytes' to convert it to MB                      // divide it by 1024*1024                      memoryUsage.Add((long)(p.WorkingSet64 / (1024 * 1024)));                  }                  if (common.Debug)                  {                      foreach (long value in memoryUsage)                          common.LogMessage(value);                  }                  return memoryUsage.ToArray(typeof(long)) as long[];              }              catch (Exception ex)              {                  common.LogMessage(ex);                  return memoryUsage.ToArray(typeof(long)) as long[];              }              finally              {                  memoryUsage = null;              }
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,GetCurrentCpuUsage,The following statement contains a magic number: try              {                  ProcessPerformanceCounter perf = new ProcessPerformanceCounter(                              common' process.ProcessName' process.Id);                  double value = perf.NextValue();                  value = Math.Round(value' 2' MidpointRounding.AwayFromZero);                  common.LogMessage("value: " + value + " : " + process.Id);                  if (monitor)                      common.LogProcessStat(string.Format("CPUINFO-{0}({1}) - {2}"'                          process.ProcessName' process.Id' value));                  cpuUsage.Add(value);              }              catch (Exception ex)              {                  common.LogMessage(ex);              }
Magic Number,Ldtpd,ProcessStats,C:\repos\ldtp_cobra\Ldtpd\ProcessStats.cs,StartProcessMonitor,The following statement contains a magic number: try              {                  processName = GetProcessName(processName);                  common.LogMessage(processName);                  if (processList.IndexOf(processName) == -1)                      processList.Add(processName);                  if (!monitorProcess)                  {                      // Start monitoring                      monitorProcess = true;                      processMonitorThread = new Thread(new ParameterizedThreadStart(                                      MonitorProcess));                      if (interval <= 0)                          // Watch every 2 seconds if invalid argument were present                          interval = 2;                      processMonitorThread.Start(interval);                  }              }              catch (Exception ex)              {                  common.LogMessage(ex);              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value + 3) < ((RangeValuePattern)pattern).Current.Maximum)                              ((RangeValuePattern)pattern).SetValue(value + 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value + 3) < ((RangeValuePattern)pattern).Current.Maximum)                              ((RangeValuePattern)pattern).SetValue(value + 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value + 3) < ((RangeValuePattern)pattern).Current.Maximum)                              ((RangeValuePattern)pattern).SetValue(value + 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneDown,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one down");
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value - 3) > ((RangeValuePattern)pattern).Current.Minimum)                              ((RangeValuePattern)pattern).SetValue(value - 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value - 3) > ((RangeValuePattern)pattern).Current.Minimum)                              ((RangeValuePattern)pattern).SetValue(value - 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value - 3) > ((RangeValuePattern)pattern).Current.Minimum)                              ((RangeValuePattern)pattern).SetValue(value - 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneUp,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one up");
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value - 3) > ((RangeValuePattern)pattern).Current.Minimum)                              ((RangeValuePattern)pattern).SetValue(value - 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value - 3) > ((RangeValuePattern)pattern).Current.Minimum)                              ((RangeValuePattern)pattern).SetValue(value - 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          // Value < 3 doesn't work' tried 1' 2                          if ((value - 3) > ((RangeValuePattern)pattern).Current.Minimum)                              ((RangeValuePattern)pattern).SetValue(value - 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneLeft,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one left");
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          if ((value + 3) < ((RangeValuePattern)pattern).Current.Maximum)                              // Value < 3 doesn't work' tried 1' 2                              ((RangeValuePattern)pattern).SetValue(value + 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          if ((value + 3) < ((RangeValuePattern)pattern).Current.Maximum)                              // Value < 3 doesn't work' tried 1' 2                              ((RangeValuePattern)pattern).SetValue(value + 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      for (int i = 0; i < iterations; i++)                      {                          double value = ((RangeValuePattern)pattern).Current.Value;                          if ((value + 3) < ((RangeValuePattern)pattern).Current.Maximum)                              // Value < 3 doesn't work' tried 1' 2                              ((RangeValuePattern)pattern).SetValue(value + 3);                      }                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,OneRight,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to one right");
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollDown,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollDown,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      double value = ((RangeValuePattern)pattern).Current.Maximum;                      ((RangeValuePattern)pattern).SetValue(value);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollDown,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll down");
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollUp,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollUp,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      double value = ((RangeValuePattern)pattern).Current.Minimum;                      ((RangeValuePattern)pattern).SetValue(value);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollUp,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll up");
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollLeft,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollLeft,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      double value = ((RangeValuePattern)pattern).Current.Minimum;                      ((RangeValuePattern)pattern).SetValue(value);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollLeft,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll left");
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollRight,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollRight,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      // Since we could not identify whether the object is vertical                      // or horizontal' let us do the same for down and right                      double value = ((RangeValuePattern)pattern).Current.Maximum;                      ((RangeValuePattern)pattern).SetValue(value);                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;              }
Magic Number,Ldtpd,Scrollbar,C:\repos\ldtp_cobra\Ldtpd\Scrollbar.cs,ScrollRight,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to scroll right");
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[2] { ControlType.Tab'                  ControlType.TabItem };
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: if (String.IsNullOrEmpty(tabName))              {                  throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (System.Runtime.InteropServices.COMException ex)                  {                      // Noticed this with Notepad                      LogMessage("Error HRESULT E_FAIL has been" +                          " returned from a call to a COM component.");                      LogMessage(ex.StackTrace);                  }                  elementItem = utils.GetObjectHandle(childHandle'                      tabName);                  if (elementItem != null)                  {                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(elementItem);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (System.Runtime.InteropServices.COMException ex)                  {                      // Noticed this with Notepad                      LogMessage("Error HRESULT E_FAIL has been" +                          " returned from a call to a COM component.");                      LogMessage(ex.StackTrace);                  }                  elementItem = utils.GetObjectHandle(childHandle'                      tabName);                  if (elementItem != null)                  {                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(elementItem);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTab,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in tab list: " + tabName);
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123' "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: try              {                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          if (element.Current.ControlType != ControlType.TabItem)                              // Don't grab focus if type is tab item                              // as the following InternalClick API fails                              // on getting the object size with COM exception                              element.SetFocus();                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(element);                          return 1;                      }                      else if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  element = null;                  pattern = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,SelectTabIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to select item.");
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabName,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabName,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabName,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabName,The following statement contains a magic number: try              {                  element = c[index];              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + index);              }              finally              {                  c = null;              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabName,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find item.");
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabCount,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tab,C:\repos\ldtp_cobra\Ldtpd\Tab.cs,GetTabCount,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      Condition.TrueCondition);                  return c.Count;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetObjectHandle,The following statement contains a magic number: if (type == null)                  type = new ControlType[6] { ControlType.Tree'                      ControlType.List' ControlType.Table'                      ControlType.DataItem' ControlType.ListItem'                      ControlType.TreeItem };
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoesRowExist,The following statement contains a magic number: try              {                  childHandle = GetObjectHandle(windowName'                      objName' null' false);                  if (!utils.IsEnabled(childHandle))                  {                      childHandle = null;                      LogMessage("Object state is disabled");                      return 0;                  }                  childHandle.SetFocus();                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  if (partialMatch)                      text += "*";                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' false);                  if (elementItem != null)                  {                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);              }              finally              {                  type = null;                  childHandle = elementItem = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: if (String.IsNullOrEmpty(text))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                      text = "*" + text + "*";                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(elementItem);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                      text = "*" + text + "*";                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(elementItem);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                      text = "*" + text + "*";                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(elementItem);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRow,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + text);
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: if (texts == null)              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach(string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).AddToSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach(string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).AddToSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach(string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).AddToSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiSelect,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach(string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).AddToSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: if (texts == null)              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach (string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).RemoveFromSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach (string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).RemoveFromSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach (string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).RemoveFromSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,MultiRemove,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  if (partialMatch)                  {                      foreach (string text in texts)                          myCollection.Add("*" + text + "*");                      // Search for the partial text' rather than the given text                      searchTexts = myCollection.ToArray();                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  foreach (string text in searchTexts)                  {                      elementItem = utils.GetObjectHandle(childHandle'                          text' type' true);                      if (elementItem != null)                      {                          elementItem.SetFocus();                          LogMessage(elementItem.Current.Name + " : " +                              elementItem.Current.ControlType.ProgrammaticName);                          if (elementItem.TryGetCurrentPattern(                              SelectionItemPattern.Pattern' out pattern))                          {                              LogMessage("SelectionItemPattern");                              ((SelectionItemPattern)pattern).RemoveFromSelection();                          }                          else                          {                              throw new XmlRpcFaultException(123'                                  "Unsupported pattern.");                          }                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unable to find the item in list: " + text);                      }                  }                  return 1;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  searchTexts = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: if (String.IsNullOrEmpty(text))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      Rect rect = elementItem.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b3c");                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  mouse = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      Rect rect = elementItem.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b3c");                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  mouse = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      Rect rect = elementItem.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b3c");                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  mouse = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      Rect rect = elementItem.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b3c");                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  mouse = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,RightClick,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + text);
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,VerifySelectRow,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  if (partialMatch)                      text += "*";                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          if (((SelectionItemPattern)pattern).Current.IsSelected ==                                  true)                          {                              LogMessage("Selected");                              return 1;                          }                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                      element.SetFocus();                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          element.SetFocus();                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(element);                          return 1;                      }                      else if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = condition = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                      element.SetFocus();                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          element.SetFocus();                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(element);                          return 1;                      }                      else if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = condition = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                      element.SetFocus();                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          element.SetFocus();                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(element);                          return 1;                      }                      else if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = condition = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                      element.SetFocus();                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123'                          "Index out of range: " + index);                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(SelectionItemPattern.Pattern'                          out pattern))                      {                          LogMessage("SelectionItemPattern");                          element.SetFocus();                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          utils.InternalClick(element);                          return 1;                      }                      else if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          element.SetFocus();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = condition = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SelectRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to select item.");
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  finally                  {                      c = null;                      childHandle = null;                      prop1 = prop2 = prop3 = prop4 = null;                      condition = null;                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Expanded)                              ((ExpandCollapsePattern)pattern).Collapse();                          else if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Collapsed)                              ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  element = null;                  pattern = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  finally                  {                      c = null;                      childHandle = null;                      prop1 = prop2 = prop3 = prop4 = null;                      condition = null;                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Expanded)                              ((ExpandCollapsePattern)pattern).Collapse();                          else if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Collapsed)                              ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  element = null;                  pattern = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  finally                  {                      c = null;                      childHandle = null;                      prop1 = prop2 = prop3 = prop4 = null;                      condition = null;                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Expanded)                              ((ExpandCollapsePattern)pattern).Collapse();                          else if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Collapsed)                              ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  element = null;                  pattern = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Children'                      condition);                  try                  {                      element = c[index];                  }                  catch (IndexOutOfRangeException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (ArgumentException)                  {                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      throw new XmlRpcFaultException(123' "Index out of range: " + index);                  }                  finally                  {                      c = null;                      childHandle = null;                      prop1 = prop2 = prop3 = prop4 = null;                      condition = null;                  }                  if (element != null)                  {                      LogMessage(element.Current.Name + " : " +                          element.Current.ControlType.ProgrammaticName);                      if (element.TryGetCurrentPattern(ExpandCollapsePattern.Pattern'                          out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Expanded)                              ((ExpandCollapsePattern)pattern).Collapse();                          else if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                              ExpandCollapseState.Collapsed)                              ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  element = null;                  pattern = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ExpandTableCell,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to expand item.");
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                      {                          throw new XmlRpcFaultException(123'                              "Not implemented");                      }                      else                      {                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // settextvalue("Window Name"' "txtEditingControl"' "Some text")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return 1;                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,SetCellValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to set item value.");
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                          return element.Current.Name;                      else                      {                          //try use msaa to access value                          try                          {                              var editorValuePattern = element.GetCurrentPattern(LegacyIAccessiblePattern.Pattern) as LegacyIAccessiblePattern;                              return editorValuePattern.Current.Value;                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // gettextvalue("Window Name"' "txtEditingControl")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return "";                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                          return element.Current.Name;                      else                      {                          //try use msaa to access value                          try                          {                              var editorValuePattern = element.GetCurrentPattern(LegacyIAccessiblePattern.Pattern) as LegacyIAccessiblePattern;                              return editorValuePattern.Current.Value;                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // gettextvalue("Window Name"' "txtEditingControl")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return "";                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                          return element.Current.Name;                      else                      {                          //try use msaa to access value                          try                          {                              var editorValuePattern = element.GetCurrentPattern(LegacyIAccessiblePattern.Pattern) as LegacyIAccessiblePattern;                              return editorValuePattern.Current.Value;                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // gettextvalue("Window Name"' "txtEditingControl")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return "";                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                          return element.Current.Name;                      else                      {                          //try use msaa to access value                          try                          {                              var editorValuePattern = element.GetCurrentPattern(LegacyIAccessiblePattern.Pattern) as LegacyIAccessiblePattern;                              return editorValuePattern.Current.Value;                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // gettextvalue("Window Name"' "txtEditingControl")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return "";                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                          return element.Current.Name;                      else                      {                          //try use msaa to access value                          try                          {                              var editorValuePattern = element.GetCurrentPattern(LegacyIAccessiblePattern.Pattern) as LegacyIAccessiblePattern;                              return editorValuePattern.Current.Value;                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // gettextvalue("Window Name"' "txtEditingControl")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return "";                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                          return element.Current.Name;                      else                      {                          //try use msaa to access value                          try                          {                              var editorValuePattern = element.GetCurrentPattern(LegacyIAccessiblePattern.Pattern) as LegacyIAccessiblePattern;                              return editorValuePattern.Current.Value;                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // gettextvalue("Window Name"' "txtEditingControl")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return "";                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      if (element.Current.ControlType == ControlType.Text)                          return element.Current.Name;                      else                      {                          //try use msaa to access value                          try                          {                              var editorValuePattern = element.GetCurrentPattern(LegacyIAccessiblePattern.Pattern) as LegacyIAccessiblePattern;                              return editorValuePattern.Current.Value;                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                          // Specific to DataGrid of Windows Forms                          element.SetFocus();                          Mouse mouse = new Mouse(utils);                          Rect rect = element.Current.BoundingRectangle;                          utils.InternalWait(1);                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                          utils.InternalWait(1);                          // Only on second b1c' it becomes edit control                          // though the edit control is not under current widget                          // its created in different hierarchy altogether                          // So' its required to do (from python)                          // gettextvalue("Window Name"' "txtEditingControl")                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' "b1c");                            return "";                      }                  }              }              catch (IndexOutOfRangeException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellValue,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to get item value.");
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellSize,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellSize,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Rect rect = childHandle.Current.BoundingRectangle;                      return new int[] { (int)rect.X' (int)rect.Y'                          (int)rect.Width' (int)rect.Height };                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellSize,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Rect rect = childHandle.Current.BoundingRectangle;                      return new int[] { (int)rect.X' (int)rect.Y'                          (int)rect.Width' (int)rect.Height };                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellSize,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Rect rect = childHandle.Current.BoundingRectangle;                      return new int[] { (int)rect.X' (int)rect.Y'                          (int)rect.Width' (int)rect.Height };                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetCellSize,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to get item size.");
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetTableRowIndex,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetTableRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                      "Unable to get row index: " + cellValue);
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetRowCount,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetRowCount,The following statement contains a magic number: try              {                  c = childHandle.FindAll(TreeScope.Children' condition);                  if (c == null)                      throw new XmlRpcFaultException(123'                          "Unable to get row count.");                  return c.Count;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  childHandle = null;                  prop1 = prop2 = prop3 = prop4 = condition = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,GetRowCount,The following statement contains a magic number: try              {                  c = childHandle.FindAll(TreeScope.Children' condition);                  if (c == null)                      throw new XmlRpcFaultException(123'                          "Unable to get row count.");                  return c.Count;              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  c = null;                  childHandle = null;                  prop1 = prop2 = prop3 = prop4 = condition = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: if (String.IsNullOrEmpty(text))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          Mouse mouse = new Mouse(utils);                          Rect rect = elementItem.Current.BoundingRectangle;                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' clickType);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          Mouse mouse = new Mouse(utils);                          Rect rect = elementItem.Current.BoundingRectangle;                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' clickType);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          Mouse mouse = new Mouse(utils);                          Rect rect = elementItem.Current.BoundingRectangle;                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' clickType);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          Mouse mouse = new Mouse(utils);                          Rect rect = elementItem.Current.BoundingRectangle;                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' clickType);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: try              {                  try                  {                      childHandle.SetFocus();                  }                  catch (InvalidOperationException ex)                  {                      LogMessage(ex);                  }                  type = new ControlType[4] { ControlType.TreeItem'                      ControlType.ListItem' ControlType.DataItem'                      ControlType.Custom };                  elementItem = utils.GetObjectHandle(childHandle'                      text' type' true);                  if (elementItem != null)                  {                      elementItem.SetFocus();                      LogMessage(elementItem.Current.Name + " : " +                          elementItem.Current.ControlType.ProgrammaticName);                      if (elementItem.TryGetCurrentPattern(                          SelectionItemPattern.Pattern' out pattern))                      {                          LogMessage("SelectionItemPattern");                          //((SelectionItemPattern)pattern).Select();                          // NOTE: Work around' as the above doesn't seem to work                          // with UIAComWrapper and UIAComWrapper is required                          // to Edit value in Spin control                          Mouse mouse = new Mouse(utils);                          Rect rect = elementItem.Current.BoundingRectangle;                          mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                              (int)(rect.Y + rect.Height / 2)' clickType);                          return 1;                      }                      else if (elementItem.TryGetCurrentPattern(                          ExpandCollapsePattern.Pattern' out pattern))                      {                          LogMessage("ExpandCollapsePattern");                          ((ExpandCollapsePattern)pattern).Expand();                          return 1;                      }                      else                      {                          throw new XmlRpcFaultException(123'                              "Unsupported pattern.");                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  type = null;                  pattern = null;                  elementItem = childHandle = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,ClickRow,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + text);
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Mouse mouse = new Mouse(utils);                      Rect rect = element.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b1d");                      return 1;                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Mouse mouse = new Mouse(utils);                      Rect rect = element.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b1d");                      return 1;                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Mouse mouse = new Mouse(utils);                      Rect rect = element.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b1d");                      return 1;                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Mouse mouse = new Mouse(utils);                      Rect rect = element.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b1d");                      return 1;                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  AutomationElementCollection c = childHandle.FindAll(                      TreeScope.Children' condition1);                  element = c[row];                  c = element.FindAll(TreeScope.Children' condition2);                  element = c[column];                  c = null;                  if (element != null)                  {                      Mouse mouse = new Mouse(utils);                      Rect rect = element.Current.BoundingRectangle;                      mouse.GenerateMouseEvent((int)(rect.X + rect.Width / 2)'                          (int)(rect.Y + rect.Height / 2)' "b1d");                      return 1;                  }              }              catch (IndexOutOfRangeException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (ArgumentException)              {                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              catch (Exception ex)              {                  LogMessage(ex);                  throw new XmlRpcFaultException(123'                      "Index out of range: " + "(" + row + "' " + column + ")");              }              finally              {                  element = childHandle = null;                  prop1 = prop2 = prop3 = prop4 = prop5 = null;                  condition1 = condition2 = null;              }
Magic Number,Ldtpd,Tree,C:\repos\ldtp_cobra\Ldtpd\Tree.cs,DoubleClickRowIndex,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unable to find the item in list: " + row);
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[5] { ControlType.Edit'                  ControlType.Document' ControlType.ComboBox' ControlType.Pane'                  ControlType.Text };
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,SetTextValue,The following statement contains a magic number: if (!utils.IsEnabled(childHandle))              {                  childHandle = null;                  throw new XmlRpcFaultException(123'                      "Object state is disabled");              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,SetTextValue,The following statement contains a magic number: try              {                  if (childHandle.Current.ControlType == ControlType.ComboBox)                  {                      AutomationElement o = null;                      ArrayList objectList = new ArrayList();                      ControlType[] type = new ControlType[1] { ControlType.Edit };                      // NOTE: Using "*" for object name' which returns the first                      // matching Edit control type                      o = utils.InternalGetObjectHandle(childHandle'                          "*"' type' ref objectList);                      if (o != null)                          childHandle = o;                      objectList = null;                  }                  // Reference: http://msdn.microsoft.com/en-us/library/ms750582.aspx                  if (!childHandle.TryGetCurrentPattern(ValuePattern.Pattern'                      out valuePattern))                  {                      childHandle.SetFocus();                      SendKeys.SendWait(value);                  }                  else                      ((ValuePattern)valuePattern).SetValue(value);              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  childHandle = null;                  valuePattern = null;              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,GetTextValue,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(ValuePattern.Pattern'                      out pattern))                  {                      data = ((ValuePattern)pattern).Current.Value;                  }                  else if (childHandle.TryGetCurrentPattern(TextPattern.Pattern'                      out pattern))                  {                      data = ((TextPattern)pattern).DocumentRange.GetText(-1);                  }                  else if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      return ((RangeValuePattern)pattern).Current.Value.ToString(                          CultureInfo.CurrentCulture);                  }                  else if (childHandle.TryGetCurrentPattern(                      LegacyIAccessiblePattern.Pattern' out pattern))                  {                      data = ((LegacyIAccessiblePattern)pattern).Current.Value;                  }                  else                  {                      throw new XmlRpcFaultException(123' "Unable to get text");                  }                  if (startPos < 0)                      startPos = 0;                  if (startPos > data.Length)                      startPos = data.Length;                  if (endPos == 0 || endPos < startPos || endPos > data.Length)                      endPos = data.Length;                  return data.Substring(startPos' endPos - startPos);              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  data = null;                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,GetTextValue,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(ValuePattern.Pattern'                      out pattern))                  {                      data = ((ValuePattern)pattern).Current.Value;                  }                  else if (childHandle.TryGetCurrentPattern(TextPattern.Pattern'                      out pattern))                  {                      data = ((TextPattern)pattern).DocumentRange.GetText(-1);                  }                  else if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      return ((RangeValuePattern)pattern).Current.Value.ToString(                          CultureInfo.CurrentCulture);                  }                  else if (childHandle.TryGetCurrentPattern(                      LegacyIAccessiblePattern.Pattern' out pattern))                  {                      data = ((LegacyIAccessiblePattern)pattern).Current.Value;                  }                  else                  {                      throw new XmlRpcFaultException(123' "Unable to get text");                  }                  if (startPos < 0)                      startPos = 0;                  if (startPos > data.Length)                      startPos = data.Length;                  if (endPos == 0 || endPos < startPos || endPos > data.Length)                      endPos = data.Length;                  return data.Substring(startPos' endPos - startPos);              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  data = null;                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,AppendText,The following statement contains a magic number: if (String.IsNullOrEmpty(value))              {                  throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,CopyText,The following statement contains a magic number: if (start < 0 || end != -1 && (start > end || end < start))              {                  throw new XmlRpcFaultException(123'                      "Invalid argument.");              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,CutText,The following statement contains a magic number: if (start < 0 || end != -1 && (start > end || end < start))              {                  throw new XmlRpcFaultException(123'                      "Invalid argument.");              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,DeleteText,The following statement contains a magic number: if (start < 0 || end != -1 && (start > end || end < start))              {                  throw new XmlRpcFaultException(123'                      "Invalid argument.");              }
Magic Number,Ldtpd,Text,C:\repos\ldtp_cobra\Ldtpd\Text.cs,InsertText,The following statement contains a magic number: if (String.IsNullOrEmpty(value))              {                  throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,BackgroundThread,The following statement contains a magic number: while (true)              {                  try                  {                      // Wait 10 second before starting the next                      // cleanup cycle                      InternalWait(10);                      // With GC collect'                      // noticed very less memory being used all the time                      GC.Collect();                  }                  catch (Exception ex)                  {                      LogMessage(ex);                  }              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetWindowHandle,The following statement contains a magic number: try              {                  while (null != element)                  {                      try                      {                          index = -1;                            // In case of an exception' the program adds the element as                          // new element to the windowList. Now I see my missing Qt window.                          try                          {                              index = windowList.IndexOf(element);                          }                          catch (Exception ex)                          {                              LogMessage(ex);                          }                            if (index == -1)                              windowList.Add(element);                        }                      catch (System.UnauthorizedAccessException ex)                      {                          // https://bugzilla.gnome.org/show_bug.cgi?id=706992                          // Cobra looses all objects after steps specified inside                          LogMessage(ex);                          InternalWait(2);                          element = w.walker.GetFirstChild(AutomationElement.RootElement);                          windowList.Clear();                          continue;                      }                      if (!String.IsNullOrEmpty(appUnderTest))                      {                          // If app under test doesn't match                          // continue searching next app                          Process process;                          // Get a process using the process id.                          try                          {                              process = Process.GetProcessById(element.Current.ProcessId);                              if (process.ProcessName != appUnderTest)                              {                                  // app name doesn't match                                  element = w.walker.GetNextSibling(element);                                  continue;                              }                          }                          catch                          {                              // Something went wrong' since app name                              // is provided' search for next app                              element = w.walker.GetNextSibling(element);                              continue;                          }                      }                      c = element.FindAll(TreeScope.Subtree' condition);                      foreach (AutomationElement e in c)                      {                          try                          {                              index = -1;                                // In case of an exception' the program adds the element as                              // new element to the windowList. Now I see my missing Qt window.                              try                              {                                  index = windowList.IndexOf(element);                              }                              catch (Exception ex)                              {                                  LogMessage(ex);                              }                                if (index == -1)                                  windowList.Add(element);                          }                          catch (Exception ex)                          {                              LogMessage(ex); // only a try' perhaps the try around IndexOf is enough                          }                            currObjInfo = objInfo.GetObjectType(e);                          s = e.Current.Name;                          if (s != null)                              s = Regex.Replace(s' "( |\r|\n)"' "");                          if (s == null || s == "")                          {                              // txt0' txt1                              actualString = currObjInfo.objType +                                  currObjInfo.objCount;                          }                          else                          {                              // txtName' txtPassword                              actualString = currObjInfo.objType + s;                              index = 1;                              while (true)                              {                                  if (objectList.IndexOf(actualString) < 0)                                  {                                      // Object doesn't exist' assume this is the first                                      // element with the name and type                                      break;                                  }                                  actualString = currObjInfo.objType + s + index;                                  index++;                              }                          }                          LogMessage("Window dynamic: " + actualString + " : " + tmp);                          objectList.Add(actualString);                          // FIXME: Handle dlg0 as in Linux                          if ((s != null && rx.Match(s).Success) ||                              rx.Match(actualString).Success)                          {                              if (type == null)                              {                                  LogMessage(windowName + " - Window found");                                  return e;                              }                              else                              {                                  foreach (ControlType t in type)                                  {                                      if (debug || writeToFile != null)                                          LogMessage((t == e.Current.ControlType) +                                              " : " + e.Current.ControlType.ProgrammaticName);                                      if (t == e.Current.ControlType)                                      {                                          return e;                                      }                                  }                                  LogMessage("type doesn't match !!!!!!!!!!!!!!");                              }                          }                      }                      // Get next parent window handle in the list                      element = w.walker.GetNextSibling(element);                  }              }              catch (Exception ex)              {                  LogMessage(ex);              }              finally              {                  c = null;                  w = null;                  rx = null;                  condition = null;                  objectList = null;              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,GetWindowHandle,The following statement contains a magic number: for (int i = 0; i < retry; i++)              {                  Thread thread = new Thread(delegate()                  {                      o = InternalGetWindowHandle(windowName' type);                      if (!String.IsNullOrEmpty(tmpAppUnderTest))                      {                          // For alternate lookup' change                          // appUnderTest' so all the apps are looked                          appUnderTest = tmpAppUnderTest;                          tmpAppUnderTest = null;                      }                      else if (String.IsNullOrEmpty(tmpAppUnderTest) &&                        !String.IsNullOrEmpty(appUnderTest))                      {                          // For alternate lookup' change                          // appUnderTest' so all the apps are looked                          tmpAppUnderTest = appUnderTest;                          appUnderTest = null;                      }                  });                  thread.Start();                  // Wait 30 seconds (30 seconds * 1000 milli seconds)                  if (!thread.Join(30000))                  {                      // Windows automation library hanged                      LogMessage("WARNING: Thread aborting' as the program" +                      " unable to find window within 30 seconds");                      // This is an unsafe operation so use as a last resort.                      // Aborting only the current thread                      thread.Abort();                  }                  else                  {                      // Collect all generations of memory.                      GC.Collect();                      if (o != null)                      {                          try                          {                              LogMessage("object is non null: " + o.Current.Name);                          }                          catch (System.Runtime.InteropServices.COMException ex)                          {                              // Noticed this with Notepad                              LogMessage("Error HRESULT E_FAIL has been" +                                  " returned from a call to a COM component.");                              LogMessage(ex.StackTrace);                              continue;                          }                          finally                          {                              if (!String.IsNullOrEmpty(tmpAppUnderTest))                                  // Reset appUnderTest with the value back                                  appUnderTest = tmpAppUnderTest;                          }                          return o;                      }                  }              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: for (int i = 0; i < retry; i++)              {                  try                  {                      o = InternalGetObjectHandle(w.walker.GetFirstChild(e)'                          objName' type' ref objectList);                  }                  catch (Exception ex)                  {                      LogMessage(ex);                      o = null;                  }                  finally                  {                      objectList.Clear();                      // Collect all generations of memory.                      GC.Collect();                  }                  if (o != null)                  {                      w = null;                      objectList = null;                      return o;                  }                  // Wait 1 second' rescan for object                  Thread.Sleep(1000);              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName) ||                  String.IsNullOrEmpty(objName))              {                  throw new XmlRpcFaultException(123'                      "Argument cannot be empty.");              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: if (windowHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,GetObjectHandle,The following statement contains a magic number: if (childHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find Object: " + objName);              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,IsEnabled,The following statement contains a magic number: for (int i = 0; i < waitTimeOut; i++)              {                  if (e.Current.IsEnabled)                      return true;                  // Wait 1 second before retrying when wait is true                  if (wait)                      Thread.Sleep(1000);              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalClick,The following statement contains a magic number: Point pt = new Point(rect.X + rect.Width / 2'                  rect.Y + rect.Height / 2);
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalClick,The following statement contains a magic number: Point pt = new Point(rect.X + rect.Width / 2'                  rect.Y + rect.Height / 2);
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: if (String.IsNullOrEmpty(windowName) ||                  String.IsNullOrEmpty(objName) ||                  String.IsNullOrEmpty(actionType))              {                  throw new XmlRpcFaultException(123' "Argument cannot be empty.");              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: if (windowHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find window: " + windowName);              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: ControlType[] type = new ControlType[2] { ControlType.CheckBox'                  ControlType.RadioButton };
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: if (childHandle == null)              {                  throw new XmlRpcFaultException(123'                      "Unable to find Object: " + objName);              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(TogglePattern.Pattern'                      out pattern))                  {                      switch (actionType)                      {                          case "VerifyCheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                                  return 1;                              return 0;                          case "VerifyUncheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.Off)                                  return 1;                              return 0;                          case "Check":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                              {                                  LogMessage("Checkbox / Radio button already checked");                                  return 1;                              }                              break;                          case "UnCheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.Off)                              {                                  LogMessage("Checkbox / Radio button already unchecked");                                  return 1;                              }                              break;                          default:                              throw new XmlRpcFaultException(123' "Unsupported actionType");                      }                      Object invoke = null;                      childHandle.SetFocus();                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                                       out invoke))                          ((InvokePattern)invoke).Invoke();                      else                          ((TogglePattern)pattern).Toggle();                      invoke = null;                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                      out pattern))                  {                      switch (actionType)                      {                          case "VerifyCheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected)                                  return 1;                              return 0;                          case "VerifyUncheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected == false)                                  return 1;                              return 0;                          case "Check":                              childHandle.SetFocus();                              ((SelectionItemPattern)pattern).Select();                              return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(TogglePattern.Pattern'                      out pattern))                  {                      switch (actionType)                      {                          case "VerifyCheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                                  return 1;                              return 0;                          case "VerifyUncheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.Off)                                  return 1;                              return 0;                          case "Check":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.On)                              {                                  LogMessage("Checkbox / Radio button already checked");                                  return 1;                              }                              break;                          case "UnCheck":                              if (((TogglePattern)pattern).Current.ToggleState == ToggleState.Off)                              {                                  LogMessage("Checkbox / Radio button already unchecked");                                  return 1;                              }                              break;                          default:                              throw new XmlRpcFaultException(123' "Unsupported actionType");                      }                      Object invoke = null;                      childHandle.SetFocus();                      if (childHandle.TryGetCurrentPattern(InvokePattern.Pattern'                                       out invoke))                          ((InvokePattern)invoke).Invoke();                      else                          ((TogglePattern)pattern).Toggle();                      invoke = null;                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                      out pattern))                  {                      switch (actionType)                      {                          case "VerifyCheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected)                                  return 1;                              return 0;                          case "VerifyUncheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected == false)                                  return 1;                              return 0;                          case "Check":                              childHandle.SetFocus();                              ((SelectionItemPattern)pattern).Select();                              return 1;                      }                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following statement contains a magic number: throw new XmlRpcFaultException(123'                  "Unsupported pattern to perform action");
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetObjectHandle,The following statement contains a magic number: ControlType[] type = new ControlType[2] { ControlType.Slider'                  ControlType.Spinner };
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,SetValue,The following statement contains a magic number: try              {                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                        ((RangeValuePattern)pattern).SetValue(value);                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      ((LegacyIAccessiblePattern)pattern).SetValue(Convert.ToString(value' CultureInfo.InvariantCulture));                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,SetValue,The following statement contains a magic number: try              {                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                        ((RangeValuePattern)pattern).SetValue(value);                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      ((LegacyIAccessiblePattern)pattern).SetValue(Convert.ToString(value' CultureInfo.InvariantCulture));                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,SetValue,The following statement contains a magic number: try              {                  if (!utils.IsEnabled(childHandle))                  {                      throw new XmlRpcFaultException(123'                          "Object state is disabled");                  }                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                        ((RangeValuePattern)pattern).SetValue(value);                      return 1;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      ((LegacyIAccessiblePattern)pattern).SetValue(Convert.ToString(value' CultureInfo.InvariantCulture));                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,SetValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to set value");
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                        return ((RangeValuePattern)pattern).Current.Value;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return Convert.ToDouble(((LegacyIAccessiblePattern)pattern).Current.Value' CultureInfo.InvariantCulture);                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                        return ((RangeValuePattern)pattern).Current.Value;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return Convert.ToDouble(((LegacyIAccessiblePattern)pattern).Current.Value' CultureInfo.InvariantCulture);                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                      return ((RangeValuePattern)pattern).Current.Minimum;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return Double.MinValue;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                      return ((RangeValuePattern)pattern).Current.Minimum;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return Double.MinValue;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMaxValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                      return ((RangeValuePattern)pattern).Current.Maximum;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return Double.MaxValue;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMaxValue,The following statement contains a magic number: try              {                  childHandle.SetFocus();                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                      return ((RangeValuePattern)pattern).Current.Maximum;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return Double.MaxValue;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMaxValue,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinIncrement,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                      return ((RangeValuePattern)pattern).Current.SmallChange;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinIncrement,The following statement contains a magic number: try              {                  if (childHandle.TryGetCurrentPattern(RangeValuePattern.Pattern'                      out pattern))                  {                      if (((RangeValuePattern)pattern).Current.IsReadOnly)                      {                          throw new XmlRpcFaultException(123'                              "Control is read-only.");                      }                      return ((RangeValuePattern)pattern).Current.SmallChange;                  }                  else if (childHandle.TryGetCurrentPattern(LegacyIAccessiblePattern.Pattern'                      out pattern))                  {                      return 1;                  }              }              catch (Exception ex)              {                  LogMessage(ex);                  if (ex is XmlRpcFaultException)                      throw;                  else                      throw new XmlRpcFaultException(123'                          "Unhandled exception: " + ex.Message);              }              finally              {                  pattern = null;                  childHandle = null;              }
Magic Number,Ldtpd,Value,C:\repos\ldtp_cobra\Ldtpd\Value.cs,GetMinIncrement,The following statement contains a magic number: throw new XmlRpcFaultException(123' "Unable to get value");
Magic Number,Ldtpd,WindowList,C:\repos\ldtp_cobra\Ldtpd\WindowList.cs,BackgroundThread,The following statement contains a magic number: while (true)              {                  try                  {                      // At start' get all the running app and its window                      // name and also subwindow names                      CheckNewWindows();                      // Wait 10 second before starting the next                      // cleanup cycle                      common.Wait(10);                      CleanUpWindowElements();                      // With GC collect'                      // noticed very less memory being used all the time                      GC.Collect();                  }                  catch (Exception ex)                  {                      common.LogMessage(ex);                  }              }
Duplicate Code,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalGetWindowHandle,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 62)' (233' 254))
Missing Default,Ldtpd,Combobox,C:\repos\ldtp_cobra\Ldtpd\Combobox.cs,InternalComboHandler,The following switch statement is missing a default case: switch (actionType)                          {                              case "Hide":                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                      return 1;                                  }                                  else if (pattern != null)                                  {                                      ((ExpandCollapsePattern)pattern).Collapse();                                      // Required to wait 1 second'                                      // before checking the state and retry collapsing                                      utils.InternalWait(1);                                      if (((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                          ExpandCollapseState.Collapsed)                                      {                                          // Hiding same combobox multiple time consecutively                                          // fails. Check for the state and retry to collapse                                          LogMessage("Collapsed");                                          return 1;                                      }                                  }                                  break;                              case "Show":                              case "Select":                              case "Verify":                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' !verify);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  if (invokePattern != null || (pattern != null &&                                      ((ExpandCollapsePattern)pattern).Current.ExpandCollapseState ==                                      ExpandCollapseState.Expanded))                                  {                                      // Selecting same combobox multiple time consecutively                                      // fails. Check for the state and retry to expand                                      LogMessage("Expaneded");                                      if (actionType == "Show")                                          return 1;                                      else                                      {                                          return SelectListItem(childHandle' item' verify) ? 1 : 0;                                      }                                  }                                  break;                              case "GetComboValue":                                  Object selectionPattern = null;                                  LogMessage("GetComboValue");                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      LogMessage("InvokePattern");                                      childHandle.SetFocus();                                      utils.InternalClick(elementItem);                                      // InvokePattern doesn't work with Virtual Network                                      // Editor of VMware Workstation' so used the above InternalClick                                      //((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                  {                                      LogMessage("ExpandCollapsePattern");                                      ((ExpandCollapsePattern)pattern).Expand();                                  }                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  LogMessage("Handle name: " + childHandle.Current.Name +                                      " - " + childHandle.Current.ControlType.ProgrammaticName);                                  bool typeExist = utils.InternalWaitTillChildControlTypeExist(childHandle' type);                                  LogMessage("Control type exist: " + typeExist);                                  AutomationElementCollection c = childHandle.FindAll(TreeScope.Subtree'                                      Condition.TrueCondition);                                  LogMessage("AutomationElementCollection " + c.Count);                                  foreach (AutomationElement e in c)                                  {                                      LogMessage(e.Current.Name + " : " + e.Current.ControlType.ProgrammaticName);                                      bool status = false;                                      if (e.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                          out selectionPattern))                                      {                                          status = ((SelectionItemPattern)selectionPattern).Current.IsSelected;                                          if (status)                                          {                                              LogMessage("Selected: " + e.Current.Name);                                              selectedItem = e.Current.Name;                                              ((ExpandCollapsePattern)pattern).Collapse();                                              return 1;                                          }                                      }                                  }                                  LogMessage("Unable to find selected combo box value");                                  c = null;                                  selectionPattern = null;                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  return 0;                              case "GetAllItem":                                  string matchedKey = null;                                  Hashtable objectHT = new Hashtable();                                  ArrayList tmpChildList = new ArrayList();                                  InternalTreeWalker w = new InternalTreeWalker();                                  elementItem = utils.GetObjectHandle(childHandle' "Open"'                                      type' true);                                  // Changes based on QT 5.0.2                                  if (invokePattern != null || (elementItem != null &&                                      elementItem.TryGetCurrentPattern(InvokePattern.Pattern'                                      out invokePattern)))                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Expand();                                  // Required to wait 1 second'                                  // before checking the state and retry expanding                                  utils.InternalWait(1);                                  utils.InternalGetObjectList(                                      w.walker.GetFirstChild(childHandle)'                                      ref tmpChildList' ref objectHT' ref matchedKey'                                      true' null' null' ControlType.ListItem);                                  if (invokePattern != null)                                  {                                      ((InvokePattern)invokePattern).Invoke();                                  }                                  else if (pattern != null)                                      ((ExpandCollapsePattern)pattern).Collapse();                                  // For Linux compatibility                                  Hashtable propertyHT;                                  foreach (String key in objectHT.Keys)                                  {                                      propertyHT = (Hashtable)objectHT[key];                                      string className = (string)propertyHT["class"];                                      if (className != null &&                                          className.Contains("list_item"))                                          // Add only list items                                          childList.Add(propertyHT["label"]);                                  }                                  w = null;                                  tmpChildList = null;                                  propertyHT = objectHT = null;                                  if (childList.Count > 0)                                  {                                      // Don't process the last item                                      return 1;                                  }                                  else                                  {                                      LogMessage("childList.Count <= 0: " + childList.Count);                                  }                                  return 0;                          }
Missing Default,Ldtpd,Generic,C:\repos\ldtp_cobra\Ldtpd\Generic.cs,HasState,The following switch statement is missing a default case: switch (state.ToLower(CultureInfo.CurrentCulture))                      {                          case "visible":                          case "showing":                              if (childHandle.Current.IsOffscreen == false)                                  return 1;                              break;                          case "enabled":                              if (utils.IsEnabled(childHandle' false))                                  return 1;                              break;                          case "focused":                              LogMessage("childHandle.Current.HasKeyboardFocus: " +                                  childHandle.Current.HasKeyboardFocus);                              if (childHandle.Current.HasKeyboardFocus)                                  return 1;                              break;                          case "checked":                              if (childHandle.TryGetCurrentPattern(TogglePattern.Pattern'                                  out pattern))                              {                                  if (((TogglePattern)pattern).Current.ToggleState ==                                      ToggleState.On)                                  {                                      return 1;                                  }                              }                              break;                          case "selected":                              if (childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                  out pattern))                              {                                  if (((SelectionItemPattern)pattern).Current.IsSelected)                                      return 1;                              }                              break;                          case "selectable":                              if (utils.IsEnabled(childHandle) &&                                  childHandle.TryGetCurrentPattern(SelectionItemPattern.Pattern'                                  out pattern))                              {                                  // Assuming' if its enabled and has selection item pattern                                  // then its selectable                                  return 1;                              }                              break;                          case "editable":                              if (childHandle.TryGetCurrentPattern(ValuePattern.Pattern'                                  out pattern))                              {                                  if (((ValuePattern)pattern).Current.IsReadOnly)                                      return 0;                                  else                                      return 1;                              }                              break;                      }
Missing Default,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following switch statement is missing a default case: switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }
Missing Default,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following switch statement is missing a default case: switch (actionType)                              {                                  case "SubMenu":                                      int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                          firstObjHandle' ref menuList);                                      if (status == 1)                                          return 1;                                      break;                              }
Missing Default,Ldtpd,Menu,C:\repos\ldtp_cobra\Ldtpd\Menu.cs,InternalMenuHandler,The following switch statement is missing a default case: switch (actionType)                          {                              case "SubMenu":                                  int status = HandleSubMenu(w.walker.GetFirstChild(childHandle)'                                      firstObjHandle' ref menuList);                                  if (status == 1)                                      return 1;                                  break;                          }
Missing Default,Ldtpd,ScreenShot,C:\repos\ldtp_cobra\Ldtpd\Screenshot.cs,saveImage2File,The following switch statement is missing a default case: switch (ext.ToLower())              {                  case ".png":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".jpg":                  case ".jpeg":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".tiff":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".bmp":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;                  case ".gif":                      screenshot.Save(fileName' System.Drawing.Imaging.ImageFormat.Jpeg);                      break;              }
Missing Default,Ldtpd,Utils,C:\repos\ldtp_cobra\Ldtpd\Utils.cs,InternalCheckObject,The following switch statement is missing a default case: switch (actionType)                      {                          case "VerifyCheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected)                                  return 1;                              return 0;                          case "VerifyUncheck":                              if (((SelectionItemPattern)pattern).Current.IsSelected == false)                                  return 1;                              return 0;                          case "Check":                              childHandle.SetFocus();                              ((SelectionItemPattern)pattern).Select();                              return 1;                      }
