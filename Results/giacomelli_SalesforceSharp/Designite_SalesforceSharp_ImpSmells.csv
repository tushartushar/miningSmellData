Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SalesforceSharp.Security,UsernamePasswordAuthenticationFlow,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\Security\UsernamePasswordAuthenticationFlow.cs,UsernamePasswordAuthenticationFlow,The method has 5 parameters. Parameters: clientId' clientSecret' username' password' tokenRequestEndpointUrl
Long Parameter List,SalesforceSharp.Security,UsernamePasswordAuthenticationFlow,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\Security\UsernamePasswordAuthenticationFlow.cs,UsernamePasswordAuthenticationFlow,The method has 6 parameters. Parameters: restClient' clientId' clientSecret' username' password' tokenRequestEndpointUrl
Long Statement,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,QueryActionBatch,The length of the statement  "            } while (response != null && response.Data != null && !response.Data.Done && !string.IsNullOrEmpty(response.Data.NextRecordsUrl)); " is 130.
Long Statement,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,FindById,The length of the statement  "            var result = Query<T>("SELECT {0} FROM {1} WHERE Id = '{2}'".With(GetRecordProjection(typeof(T))' objectName' recordId)' altUrl); " is 129.
Long Statement,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,FindById,The length of the statement  "            var result = Query<T>("SELECT {0} FROM {1} WHERE Id = '{2}'".With(GetRecordProjection(typeof(T))' objectName' recordId)); " is 121.
Long Statement,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,GetSObjectDetail,The length of the statement  "            var url = "{0}/{1}/describe".With(string.IsNullOrEmpty(altUrl) ? GetUrl("sobjects") : GetAltUrl(altUrl)' sobjectApiName); " is 121.
Long Statement,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,BuildRequest,The length of the statement  "                request.AddParameter("application/json; charset=utf-8"' updateJsonSerializer.Serialize(record)' ParameterType.RequestBody); " is 123.
Long Statement,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,CheckApiException,The length of the statement  "                    throw new SalesforceException(error.errorCode.Value' error.message.Value' fieldsArray.Select(v => (string)v).ToArray()); " is 120.
Long Statement,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,CheckApiException,The length of the statement  "                var ex = new FormatException(string.Format("{0}{1}{2}"' response.ErrorException.Message' Environment.NewLine' response.Content)); " is 129.
Long Statement,SalesforceSharp.Serialization,GenericJsonDeserializer,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\Serialization\GenericJsonDeserializer.cs,Deserialize,The length of the statement  "            return JsonConvert.DeserializeObject<T>(response.Content' new JsonSerializerSettings(){ContractResolver = salesForceContractResolver}); " is 135.
Long Statement,SalesforceSharp.Serialization,GenericJsonSerializer,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\Serialization\GenericJsonSerializer.cs,Serialize,The length of the statement  "            return JsonConvert.SerializeObject(obj' Formatting.Indented' new JsonSerializerSettings(){ContractResolver = salesForceContractResolver}); " is 138.
Magic Number,SalesforceSharp,SalesforceClient,C:\repos\giacomelli_SalesforceSharp\src\SalesforceSharp\SalesforceClient.cs,CheckApiException,The following statement contains a magic number: if ((int)response.StatusCode > 299)              {                  var responseData = m_deserializer.Deserialize<dynamic>(response);                    var error = responseData[0];                  var fieldsArray = error.fields as JArray;                    if (fieldsArray == null)                  {                      throw new SalesforceException(error.errorCode.Value' error.message.Value);                  }                  else                  {                      throw new SalesforceException(error.errorCode.Value' error.message.Value' fieldsArray.Select(v => (string)v).ToArray());                  }              }
