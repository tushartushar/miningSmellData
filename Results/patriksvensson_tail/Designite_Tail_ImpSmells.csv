Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tail,TailBootstrapper,C:\repos\patriksvensson_tail\src\Tail\TailBootstrapper.cs,RegisterProviders,Cyclomatic complexity of the method is 8
Complex Method,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,Cyclomatic complexity of the method is 8
Complex Method,Tail.Services,TailProviderScannerService,C:\repos\patriksvensson_tail\src\Tail\Services\TailProviderScannerService.cs,Scan,Cyclomatic complexity of the method is 8
Long Parameter List,Tail.Providers.Utilities,Win32Native,C:\repos\patriksvensson_tail\src\Tail\Utilities\Win32Native.cs,MapViewOfFile,The method has 5 parameters.
Long Parameter List,Tail.Providers.Utilities,Win32Native,C:\repos\patriksvensson_tail\src\Tail\Utilities\Win32Native.cs,CreateFileMapping,The method has 6 parameters.
Long Parameter List,Tail.Providers.Utilities,Win32Native,C:\repos\patriksvensson_tail\src\Tail\Utilities\Win32Native.cs,GetTokenInformation,The method has 5 parameters.
Long Parameter List,Tail.ViewModels,ShellViewModel,C:\repos\patriksvensson_tail\src\Tail\ViewModels\ShellViewModel.cs,ShellViewModel,The method has 8 parameters.
Long Statement,Tail.Providers,DebugStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\DebugStreamListener.cs,Initialize,The length of the statement  "	_sharedFile = Win32Native.CreateFileMapping (new IntPtr (-1)' ref sa' PageProtection.ReadWrite' 0' 4096' _scope + "DBWIN_BUFFER"); " is 130.
Long Statement,Tail.Providers,DebugStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\DebugStreamListener.cs,Listen,The length of the statement  "	IntPtr pString = isWow64 ? new IntPtr (_sharedMemory.ToInt32 () + Marshal.SizeOf (typeof(int))) : new IntPtr (_sharedMemory.ToInt64 () + Marshal.SizeOf (typeof(int))); " is 167.
Long Statement,Tail.Providers.Utilities,Win32Native,C:\repos\patriksvensson_tail\src\Tail\Utilities\Win32Native.cs,IsProcessElevated,The length of the statement  "	var success = GetTokenInformation (tokenHandle' TokenInformationClass.TokenElevationType' elevationTypePtr' (uint)elevationResultSize' out returnedSize); " is 153.
Magic Number,Tail.Providers,DebugStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\DebugStreamListener.cs,Initialize,The following statement contains a magic number: _sharedFile = Win32Native.CreateFileMapping (new IntPtr (-1)' ref sa' PageProtection.ReadWrite' 0' 4096' _scope + "DBWIN_BUFFER");  
Magic Number,Tail.Providers,DebugStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\DebugStreamListener.cs,Initialize,The following statement contains a magic number: _sharedMemory = Win32Native.MapViewOfFile (_sharedFile' Win32Native.SECTION_MAP_READ' 0' 0' 512);  
Magic Number,Tail.Providers,DebugStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\DebugStreamListener.cs,Listen,The following statement contains a magic number: while (!abortSignal.WaitOne (0)) {  	// We're ready to receive new buffer data.  	Win32Native.SetEvent (_bufferReadyEvent);  	int ret = Win32Native.WaitForSingleObject (_readyEvent' 500);  	if (ret == Win32Native.WAIT_OBJECT_0) {  		// Get the process ID and the message.  		Marshal.ReadInt32 (_sharedMemory);  		var message = Marshal.PtrToStringAnsi (pString);  		// Publish the message.  		callback.Publish (message);  	}  }  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: using (var reader = new StreamReader (file.Open (FileMode.Open' FileAccess.Read' FileShare.ReadWrite))) {  	long lastOffset = reader.BaseStream.Length;  	if (reader.BaseStream.Length > 0) {  		// Send the last 10 kb of text to the reader.  		lastOffset = Math.Max (0' reader.BaseStream.Length - (1024 * 10));  	}  	while (!abortSignal.WaitOne (100)) {  		// Idle if file hasn't changed.  		if (reader.BaseStream.Length <= lastOffset) {  			if (reader.BaseStream.Length < lastOffset) {  				lastOffset = reader.BaseStream.Length;  			}  			continue;  		}  		// Read the data.  		reader.BaseStream.Seek (lastOffset' SeekOrigin.Begin);  		var delta = reader.BaseStream.Length - lastOffset;  		var buffer = new char[delta];  		reader.ReadBlock (buffer' 0' buffer.Length);  		// Publish the data.  		callback.Publish (new string (buffer));  		// Update the offset.  		lastOffset = reader.BaseStream.Position;  	}  }  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: using (var reader = new StreamReader (file.Open (FileMode.Open' FileAccess.Read' FileShare.ReadWrite))) {  	long lastOffset = reader.BaseStream.Length;  	if (reader.BaseStream.Length > 0) {  		// Send the last 10 kb of text to the reader.  		lastOffset = Math.Max (0' reader.BaseStream.Length - (1024 * 10));  	}  	while (!abortSignal.WaitOne (100)) {  		// Idle if file hasn't changed.  		if (reader.BaseStream.Length <= lastOffset) {  			if (reader.BaseStream.Length < lastOffset) {  				lastOffset = reader.BaseStream.Length;  			}  			continue;  		}  		// Read the data.  		reader.BaseStream.Seek (lastOffset' SeekOrigin.Begin);  		var delta = reader.BaseStream.Length - lastOffset;  		var buffer = new char[delta];  		reader.ReadBlock (buffer' 0' buffer.Length);  		// Publish the data.  		callback.Publish (new string (buffer));  		// Update the offset.  		lastOffset = reader.BaseStream.Position;  	}  }  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: using (var reader = new StreamReader (file.Open (FileMode.Open' FileAccess.Read' FileShare.ReadWrite))) {  	long lastOffset = reader.BaseStream.Length;  	if (reader.BaseStream.Length > 0) {  		// Send the last 10 kb of text to the reader.  		lastOffset = Math.Max (0' reader.BaseStream.Length - (1024 * 10));  	}  	while (!abortSignal.WaitOne (100)) {  		// Idle if file hasn't changed.  		if (reader.BaseStream.Length <= lastOffset) {  			if (reader.BaseStream.Length < lastOffset) {  				lastOffset = reader.BaseStream.Length;  			}  			continue;  		}  		// Read the data.  		reader.BaseStream.Seek (lastOffset' SeekOrigin.Begin);  		var delta = reader.BaseStream.Length - lastOffset;  		var buffer = new char[delta];  		reader.ReadBlock (buffer' 0' buffer.Length);  		// Publish the data.  		callback.Publish (new string (buffer));  		// Update the offset.  		lastOffset = reader.BaseStream.Position;  	}  }  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: if (reader.BaseStream.Length > 0) {  	// Send the last 10 kb of text to the reader.  	lastOffset = Math.Max (0' reader.BaseStream.Length - (1024 * 10));  }  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: if (reader.BaseStream.Length > 0) {  	// Send the last 10 kb of text to the reader.  	lastOffset = Math.Max (0' reader.BaseStream.Length - (1024 * 10));  }  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: lastOffset = Math.Max (0' reader.BaseStream.Length - (1024 * 10));  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: lastOffset = Math.Max (0' reader.BaseStream.Length - (1024 * 10));  
Magic Number,Tail.Providers,FileStreamListener,C:\repos\patriksvensson_tail\src\Tail\Providers\FileStreamListener.cs,Listen,The following statement contains a magic number: while (!abortSignal.WaitOne (100)) {  	// Idle if file hasn't changed.  	if (reader.BaseStream.Length <= lastOffset) {  		if (reader.BaseStream.Length < lastOffset) {  			lastOffset = reader.BaseStream.Length;  		}  		continue;  	}  	// Read the data.  	reader.BaseStream.Seek (lastOffset' SeekOrigin.Begin);  	var delta = reader.BaseStream.Length - lastOffset;  	var buffer = new char[delta];  	reader.ReadBlock (buffer' 0' buffer.Length);  	// Publish the data.  	callback.Publish (new string (buffer));  	// Update the offset.  	lastOffset = reader.BaseStream.Position;  }  
