Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,SetArgs,The method has 262 lines of code.
Complex Method,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,InterpretExternalAttributes,Cyclomatic complexity of the method is 17
Complex Method,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,SetArgs,Cyclomatic complexity of the method is 8
Long Statement,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,SetArgs,The length of the statement  "                                    overwriteFiles = (optionIndex < option.Length) ? (option[optionIndex] == '+') ? Overwrite.Always : Overwrite.Never : Overwrite.Never; " is 133.
Long Statement,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ShowEnvironment,The length of the statement  "            Console.WriteLine( "Current culture LCID 0x{0:X}' {1}"' CultureInfo.CurrentCulture.LCID' CultureInfo.CurrentCulture.EnglishName); " is 129.
Long Statement,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ShowEnvironment,The length of the statement  "            Console.WriteLine( "Current thread OEM codepage {0}"' System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.OEMCodePage); " is 129.
Long Statement,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ShowEnvironment,The length of the statement  "            Console.WriteLine( "Current thread Mac codepage {0}"' System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.MacCodePage); " is 129.
Long Statement,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ShowEnvironment,The length of the statement  "            Console.WriteLine( "Current thread Ansi codepage {0}"' System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ANSICodePage); " is 131.
Long Statement,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ListZip,The length of the statement  "                                entryCount + " entries"' totalSize' GetCompressionRatio(fileInfo.Length' totalSize)' fileInfo.Length' fileInfo.LastWriteTime); " is 126.
Long Statement,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ListZipViaZipFile,The length of the statement  "                        entryCount + " entries"' totalSize' GetCompressionRatio(fileInfo.Length' totalSize)' fileInfo.Length' fileInfo.LastWriteTime); " is 126.
Complex Conditional,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,SetArgs,The conditional expression  "checkPath.IndexOfAny(Path.GetInvalidPathChars()) >= 0  #endif                      || checkPath.IndexOf('*') >= 0 || checkPath.IndexOf('?') >= 0                      || (deviceCheck >= 0 && deviceCheck != 1)"  is complex.
Magic Number,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,InterpretExternalAttributes,The following statement contains a magic number: if ((operatingSystem == 0) || (operatingSystem == 10)) {                  // Directory                  if ((attributes & 0x10) != 0)                      result = result + "D";                  else                      result = result + "-";                    // Volume                  if ((attributes & 0x08) != 0)                      result = result + "V";                  else                      result = result + "-";                    // Read-only                  if ((attributes & 0x01) != 0)                      result = result + "r";                  else                      result = result + "-";                    // Archive                  if ((attributes & 0x20) != 0)                      result = result + "a";                  else                      result = result + "-";                    // System                  if ((attributes & 0x04) != 0)                      result = result + "s";                  else                      result = result + "-";                    // Hidden                  if ((attributes & 0x02) != 0)                      result = result + "h";                  else                      result = result + "-";                    // Device                  if ((attributes & 0x4) != 0)                      result = result + "d";                  else                      result = result + "-";  				                  // OS is NTFS                  if ( operatingSystem == 10 )                  {                      // Encrypted                      if ( (attributes & 0x4000) != 0 ) {                          result += "E";                      }                      else {                          result += "-";                      }                        // Not content indexed                      if ( (attributes & 0x2000) != 0 ) {                          result += "n";                      }                      else {                          result += "-";                      }                        // Offline                      if ( (attributes & 0x1000) != 0 ) {                          result += "O";                      }                      else {                          result += "-";                      }                        // Compressed                      if ( (attributes & 0x0800) != 0 ) {                          result += "C";                      }                      else {                          result += "-";                      }                        // Reparse point                      if ( (attributes & 0x0400) != 0 ) {                          result += "R";                      }                      else {                          result += "-";                      }                        // Sparse                      if ( (attributes & 0x0200) != 0 ) {                          result += "S";                      }                      else {                          result += "-";                      }                        // Temporary                      if ( (attributes & 0x0100) != 0 ) {                          result += "T";                      }                      else {                          result += "-";                      }                  }              }
Magic Number,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,InterpretExternalAttributes,The following statement contains a magic number: if ((operatingSystem == 0) || (operatingSystem == 10)) {                  // Directory                  if ((attributes & 0x10) != 0)                      result = result + "D";                  else                      result = result + "-";                    // Volume                  if ((attributes & 0x08) != 0)                      result = result + "V";                  else                      result = result + "-";                    // Read-only                  if ((attributes & 0x01) != 0)                      result = result + "r";                  else                      result = result + "-";                    // Archive                  if ((attributes & 0x20) != 0)                      result = result + "a";                  else                      result = result + "-";                    // System                  if ((attributes & 0x04) != 0)                      result = result + "s";                  else                      result = result + "-";                    // Hidden                  if ((attributes & 0x02) != 0)                      result = result + "h";                  else                      result = result + "-";                    // Device                  if ((attributes & 0x4) != 0)                      result = result + "d";                  else                      result = result + "-";  				                  // OS is NTFS                  if ( operatingSystem == 10 )                  {                      // Encrypted                      if ( (attributes & 0x4000) != 0 ) {                          result += "E";                      }                      else {                          result += "-";                      }                        // Not content indexed                      if ( (attributes & 0x2000) != 0 ) {                          result += "n";                      }                      else {                          result += "-";                      }                        // Offline                      if ( (attributes & 0x1000) != 0 ) {                          result += "O";                      }                      else {                          result += "-";                      }                        // Compressed                      if ( (attributes & 0x0800) != 0 ) {                          result += "C";                      }                      else {                          result += "-";                      }                        // Reparse point                      if ( (attributes & 0x0400) != 0 ) {                          result += "R";                      }                      else {                          result += "-";                      }                        // Sparse                      if ( (attributes & 0x0200) != 0 ) {                          result += "S";                      }                      else {                          result += "-";                      }                        // Temporary                      if ( (attributes & 0x0100) != 0 ) {                          result += "T";                      }                      else {                          result += "-";                      }                  }              }
Magic Number,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,GetCompressionRatio,The following statement contains a magic number: if (unpackedSize > 0 && unpackedSize >= packedSize) {                  result = (int) Math.Round((1.0 - ((double)packedSize / (double)unpackedSize)) * 100.0);              }
Magic Number,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ListZip,The following statement contains a magic number: try {                  // TODO for asian/non-latin/non-proportional fonts string lengths dont work so output may not line up                  const string headerTitles    = "Name                 Length Ratio Size         Date & time       CRC-32";                  const string headerUnderline = "---------------  ---------- ----- ---------- ------------------- --------";  				                  var fileInfo = new FileInfo(fileName);  				                  if (fileInfo.Exists == false) {                      Console.WriteLine("No such file exists {0}"' fileName);                      return;                  }                    Console.WriteLine(fileName);                    using (FileStream fileStream = File.OpenRead(fileName)) {                      using (ZipInputStream stream = new ZipInputStream(fileStream)) {                          if (!string.IsNullOrEmpty(password)) {                              stream.Password = password;                          }                            int entryCount = 0;                          long totalSize  = 0;  						                          ZipEntry theEntry;  						                          while ((theEntry = stream.GetNextEntry()) != null) {                                if ( theEntry.IsDirectory ) {                                  Console.WriteLine("Directory {0}"' theEntry.Name);                                  continue;                              }  							                              if ( !theEntry.IsFile ) {                                  Console.WriteLine("Non file entry {0}"' theEntry.Name);                                  continue;                              }  							                              if (entryCount == 0) {                                  Console.WriteLine(headerTitles);                                  Console.WriteLine(headerUnderline);                              }  						                              ++entryCount;                              int ratio = GetCompressionRatio(theEntry.CompressedSize' theEntry.Size);                              totalSize += theEntry.Size;  							                              if (theEntry.Name.Length > 15) {                                  Console.WriteLine(theEntry.Name);                                  Console.WriteLine(                                      "{0'-15}  {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss} {5'8:x}"'                                      ""' theEntry.Size' ratio' theEntry.CompressedSize' theEntry.DateTime' theEntry.Crc);                              } else {                                  Console.WriteLine(                                      "{0'-15}  {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss} {5'8:x}"'                                      theEntry.Name' theEntry.Size' ratio' theEntry.CompressedSize' theEntry.DateTime' theEntry.Crc);                              }                          }  			                          if (entryCount == 0) {                              Console.WriteLine("Archive is empty!");                          } else {                              Console.WriteLine(headerUnderline);                              Console.WriteLine(                                  "{0'-15}  {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss}"'                                  entryCount + " entries"' totalSize' GetCompressionRatio(fileInfo.Length' totalSize)' fileInfo.Length' fileInfo.LastWriteTime);                          }                      }                  }              }              catch(Exception exception)              {                  Console.WriteLine("Exception during list operation: {0}"' exception.Message);              }
Magic Number,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ListZipViaZipFile,The following statement contains a magic number: try {                  const string headerTitles    = "Name              Length Ratio Size         Date & time       CRC-32     Attr";                  const string headerUnderline = "------------  ---------- ----- ---------- ------------------- --------   ------";  				                  var fileInfo = new FileInfo(fileName);  				                  if (fileInfo.Exists == false) {                      Console.WriteLine("No such file exists {0}"' fileName);                      return;                  }                    Console.WriteLine(fileName);                    int entryCount = 0;                  long totalSize  = 0;  				                  using (ZipFile zipFile = new ZipFile(fileName)) {                      foreach (ZipEntry theEntry in zipFile) {  						                          if ( theEntry.IsDirectory ) {                              Console.WriteLine("Directory {0}"' theEntry.Name);                          }                          else if ( !theEntry.IsFile ) {                              Console.WriteLine("Non file entry {0}"' theEntry.Name);                              continue;                          }                          else {                              if (entryCount == 0) {                                  Console.WriteLine(headerTitles);                                  Console.WriteLine(headerUnderline);                              }  						                              ++entryCount;                              int ratio = GetCompressionRatio(theEntry.CompressedSize' theEntry.Size);                              totalSize += theEntry.Size;  							                              if (theEntry.Name.Length > 12) {                                  Console.WriteLine(theEntry.Name);                                  Console.WriteLine(                                      "{0'-12}  {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss} {5'8:x}   {6'4}"'                                      ""' theEntry.Size' ratio' theEntry.CompressedSize' theEntry.DateTime' theEntry.Crc'                                      InterpretExternalAttributes(theEntry.HostSystem' theEntry.ExternalFileAttributes));                              }                               else {                                  Console.WriteLine(                                      "{0'-12}  {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss} {5'8:x}   {6'4}"'                                      theEntry.Name' theEntry.Size' ratio' theEntry.CompressedSize' theEntry.DateTime' theEntry.Crc'                                       InterpretExternalAttributes(theEntry.HostSystem' theEntry.ExternalFileAttributes));                              }                          }                      }                  }                    if (entryCount == 0) {                      Console.WriteLine("Archive is empty!");                  } else {                      Console.WriteLine(headerUnderline);                      Console.WriteLine(                          "{0'-12}  {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss}"'                          entryCount + " entries"' totalSize' GetCompressionRatio(fileInfo.Length' totalSize)' fileInfo.Length' fileInfo.LastWriteTime);                  }              }              catch(Exception exception) {                  Console.WriteLine("Exception during list operation: {0}"' exception.Message);              }
Magic Number,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,ExtractFile,The following statement contains a magic number: if (entryFileName.Length > 0) {  #if TEST  				Console.WriteLine("Extracting...");  #endif						                  using (FileStream streamWriter = File.Create(targetName)) {                      byte[] data = new byte[4096];                      int size;  					                      do {                          size = inputStream.Read(data' 0' data.Length);                          streamWriter.Write(data' 0' size);                      } while (size > 0);                  }  #if !NETCF                  if (restoreDateTime) {                      File.SetLastWriteTime(targetName' theEntry.DateTime);                  }  #endif              }
Missing Default,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,SetArgs,The following switch statement is missing a default case: switch ( optArg ) {                                                      case "on":                                                          useZip64_ = UseZip64.On;                                                          break;  														                                                      case "off":                                                          useZip64_ = UseZip64.Off;                                                          break;  														                                                      case "auto":                                                          useZip64_ = UseZip64.Dynamic;                                                          break;                                                  }
Missing Default,ICSharpCode.SharpZipLib.Samples.SZ,SharpZipArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\sz\sz.cs,Execute,The following switch statement is missing a default case: switch (operation) {                          case Operation.List:                              List(fileSpecs);                              break;  						                          case Operation.Create:                              Create(fileSpecs);                              break;  						                          case Operation.Extract:                              Extract(fileSpecs);                              break;                            case Operation.Delete:                              Delete(fileSpecs);                              break;                            case Operation.Add:                              Add(fileSpecs);                              break;                            case Operation.Test:                              Test(fileSpecs);                              break;                      }
