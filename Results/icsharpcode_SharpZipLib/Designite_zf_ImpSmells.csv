Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,SetArgs,The method has 283 lines of code.
Long Method,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ExtractFile,The method has 110 lines of code.
Long Method,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,InterpretExternalAttributes,The method has 103 lines of code.
Complex Method,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,SetArgs,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ExtractFile,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,InterpretExternalAttributes,Cyclomatic complexity of the method is 17
Long Statement,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,SetArgs,The length of the statement  "									overwriteFiles = optionIndex < option.Length ? (option[optionIndex] == '+') ? Overwrite.Always : Overwrite.Never : Overwrite.Never; " is 131.
Long Statement,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ShowEnvironment,The length of the statement  "			Console.WriteLine( "Current culture LCID 0x{0:X}' {1}"' CultureInfo.CurrentCulture.LCID' CultureInfo.CurrentCulture.EnglishName); " is 129.
Long Statement,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ShowEnvironment,The length of the statement  "			Console.WriteLine( "Current thread OEM codepage {0}"' System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.OEMCodePage); " is 129.
Long Statement,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ShowEnvironment,The length of the statement  "			Console.WriteLine( "Current thread Mac codepage {0}"' System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.MacCodePage); " is 129.
Long Statement,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ShowEnvironment,The length of the statement  "			Console.WriteLine( "Current thread Ansi codepage {0}"' System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ANSICodePage); " is 131.
Long Statement,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ListArchiveContents,The length of the statement  "					entryCount + " entries"' totalSize' GetCompressionRatio(totalCompressedSize' totalSize)' fileInfo.Length' fileInfo.LastWriteTime); " is 130.
Complex Conditional,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,SetArgs,The conditional expression  "checkPath.IndexOfAny(Path.GetInvalidPathChars()) >= 0  #endif  					|| checkPath.IndexOf('*') >= 0 || checkPath.IndexOf('?') >= 0  					|| ((deviceCheck >= 0) && (deviceCheck != 1))"  is complex.
Magic Number,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,ListArchiveContents,The following statement contains a magic number: foreach (ZipEntry theEntry in zipFile)   			{  						  				if ( theEntry.IsDirectory )   				{  					Console.Out.WriteLine("Directory {0}"' theEntry.Name);  				}  				else if ( !theEntry.IsFile )   				{  					Console.Out.WriteLine("Non file entry {0}"' theEntry.Name);  					continue;  				}  				else  				{  					if (entryCount == 0)   					{  						Console.Out.WriteLine(headerTitles);  						Console.Out.WriteLine(headerUnderline);  					}  						  					++entryCount;  					int ratio = GetCompressionRatio(theEntry.CompressedSize' theEntry.Size);  					totalSize += theEntry.Size;  					totalCompressedSize += theEntry.CompressedSize;  					  					char cryptoDisplay = ( theEntry.IsCrypted ) ? '*' : ' ';    					if (theEntry.Name.Length > 12)   					{  						Console.Out.WriteLine(theEntry.Name);  						Console.Out.WriteLine(  							"{0'-12}{7} {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss} {5'8:x}   {6'4}"'  							""' theEntry.Size' ratio' theEntry.CompressedSize' theEntry.DateTime' theEntry.Crc'  							InterpretExternalAttributes(theEntry.HostSystem' theEntry.ExternalFileAttributes)'  							cryptoDisplay);  					}   					else   					{  						Console.Out.WriteLine(  							"{0'-12}{7} {1'10:0}  {2'3}% {3'10:0} {4'10:d} {4:hh:mm:ss} {5'8:x}   {6'4}"'  							theEntry.Name' theEntry.Size' ratio' theEntry.CompressedSize' theEntry.DateTime' theEntry.Crc'   							InterpretExternalAttributes(theEntry.HostSystem' theEntry.ExternalFileAttributes)'  							cryptoDisplay);  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,GetCompressionRatio,The following statement contains a magic number: if ( (unpackedSize > 0) && (unpackedSize >= packedSize) )  			{  				result = (int) Math.Round((1.0 - ((double)packedSize / (double)unpackedSize)) * 100.0);  			}
Magic Number,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,InterpretExternalAttributes,The following statement contains a magic number: if ((operatingSystem == 0) || (operatingSystem == 10))  			{  				if ((attributes & 0x10) != 0)  					result = result + "D";  				else  					result = result + "-";    				if ((attributes & 0x08) != 0)  					result = result + "V";  				else  					result = result + "-";    				if ((attributes & 0x01) != 0)  					result = result + "r";  				else  					result = result + "-";    				if ((attributes & 0x20) != 0)  					result = result + "a";  				else  					result = result + "-";    				if ((attributes & 0x04) != 0)  					result = result + "s";  				else  					result = result + "-";    				if ((attributes & 0x02) != 0)  					result = result + "h";  				else  					result = result + "-";    				// Device  				if ((attributes & 0x4) != 0)  					result = result + "d";  				else  					result = result + "-";    				// OS is NTFS  				if ( operatingSystem == 10 )  				{  					// Encrypted  					if ( (attributes & 0x4000) != 0 )   					{  						result += "E";  					}  					else   					{  						result += "-";  					}    					// Not content indexed  					if ( (attributes & 0x2000) != 0 )   					{  						result += "n";  					}  					else   					{  						result += "-";  					}    					// Offline  					if ( (attributes & 0x1000) != 0 )   					{  						result += "O";  					}  					else   					{  						result += "-";  					}    					// Compressed  					if ( (attributes & 0x0800) != 0 )   					{  						result += "C";  					}  					else   					{  						result += "-";  					}    					// Reparse point  					if ( (attributes & 0x0400) != 0 )   					{  						result += "R";  					}  					else   					{  						result += "-";  					}    					// Sparse  					if ( (attributes & 0x0200) != 0 )   					{  						result += "S";  					}  					else   					{  						result += "-";  					}    					// Temporary  					if ( (attributes & 0x0100) != 0 )   					{  						result += "T";  					}  					else   					{  						result += "-";  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,InterpretExternalAttributes,The following statement contains a magic number: if ((operatingSystem == 0) || (operatingSystem == 10))  			{  				if ((attributes & 0x10) != 0)  					result = result + "D";  				else  					result = result + "-";    				if ((attributes & 0x08) != 0)  					result = result + "V";  				else  					result = result + "-";    				if ((attributes & 0x01) != 0)  					result = result + "r";  				else  					result = result + "-";    				if ((attributes & 0x20) != 0)  					result = result + "a";  				else  					result = result + "-";    				if ((attributes & 0x04) != 0)  					result = result + "s";  				else  					result = result + "-";    				if ((attributes & 0x02) != 0)  					result = result + "h";  				else  					result = result + "-";    				// Device  				if ((attributes & 0x4) != 0)  					result = result + "d";  				else  					result = result + "-";    				// OS is NTFS  				if ( operatingSystem == 10 )  				{  					// Encrypted  					if ( (attributes & 0x4000) != 0 )   					{  						result += "E";  					}  					else   					{  						result += "-";  					}    					// Not content indexed  					if ( (attributes & 0x2000) != 0 )   					{  						result += "n";  					}  					else   					{  						result += "-";  					}    					// Offline  					if ( (attributes & 0x1000) != 0 )   					{  						result += "O";  					}  					else   					{  						result += "-";  					}    					// Compressed  					if ( (attributes & 0x0800) != 0 )   					{  						result += "C";  					}  					else   					{  						result += "-";  					}    					// Reparse point  					if ( (attributes & 0x0400) != 0 )   					{  						result += "R";  					}  					else   					{  						result += "-";  					}    					// Sparse  					if ( (attributes & 0x0200) != 0 )   					{  						result += "S";  					}  					else   					{  						result += "-";  					}    					// Temporary  					if ( (attributes & 0x0100) != 0 )   					{  						result += "T";  					}  					else   					{  						result += "-";  					}  				}  			}
Missing Default,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,SetArgs,The following switch statement is missing a default case: switch ( optArg )  												{  													case "on":  														useZip64_ = UseZip64.On;  														break;  														  													case "off":  														useZip64_ = UseZip64.Off;  														break;  														  													case "auto":  														useZip64_ = UseZip64.Dynamic;  														break;  												}
Missing Default,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,TestResultHandler,The following switch statement is missing a default case: switch ( status.Operation )  			{  				case TestOperation.Initialising:  					Console.WriteLine("Testing");  					break;    				case TestOperation.Complete:  					Console.WriteLine("Testing complete");  					break;    				case TestOperation.EntryHeader:  					// Not an error if message is null.  					if ( message == null )  					{  						Console.Write("{0} - "' status.Entry.Name);  					}  					else  					{  						Console.WriteLine(message);  					}  					break;    				case TestOperation.EntryData:  					if ( message != null )  					{  						Console.WriteLine(message);  					}  					break;    				case TestOperation.EntryComplete:  					if ( status.EntryValid )  					{  						Console.WriteLine("OK");  					}  					break;    				case TestOperation.MiscellaneousTests:  					if ( message != null )  					{  						Console.WriteLine(message);  					}  					break;  			}
Missing Default,ICSharpCode.SharpZipLib.Samples.CS.ZF,ZipFileArchiver,C:\repos\icsharpcode_SharpZipLib\samples\ICSharpCode.SharpZipLib.Samples\cs\zf\zf.cs,Execute,The following switch statement is missing a default case: switch (operation_)   					{  						case Operation.List:  							List(fileSpecs_);  							break;  						  						case Operation.Create:  							Create(fileSpecs_);  							break;  						  						case Operation.Extract:  							Extract(fileSpecs_);  							break;    						case Operation.Delete:  							Delete(fileSpecs_);  							break;    						case Operation.Add:  							Add(fileSpecs_);  							break;    						case Operation.Test:  							Test(fileSpecs_);  							break;  					}
