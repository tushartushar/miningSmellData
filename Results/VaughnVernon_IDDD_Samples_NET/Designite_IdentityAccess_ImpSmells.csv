Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SaaSOvation.IdentityAccess.Application.Commands,ChangeContactInfoCommand,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Application\Commands\ChangeContactInfoCommand.cs,ChangeContactInfoCommand,The method has 10 parameters. Parameters: tenantId' username' emailAddress' primaryTelephone' secondaryTelephone' addressStreetAddress' addressCity' addressStateProvince' addressPostalCode' addressCountryCode
Long Parameter List,SaaSOvation.IdentityAccess.Application.Commands,ChangePostalAddressCommand,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Application\Commands\ChangePostalAddressCommand.cs,ChangePostalAddressCommand,The method has 7 parameters. Parameters: tenantId' username' addressStreetAddress' addressCity' addressStateProvince' addressPostalCode' addressCountryCode
Long Parameter List,SaaSOvation.IdentityAccess.Application.Commands,DefineUserEnablementCommand,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Application\Commands\DefineUserEnablementCommand.cs,DefineUserEnablementCommand,The method has 5 parameters. Parameters: tenantId' userName' enabled' startDate' endDate
Long Parameter List,SaaSOvation.IdentityAccess.Application.Commands,ProvisionTenantCommand,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Application\Commands\ProvisionTenantCommand.cs,ProvisionTenantCommand,The method has 12 parameters. Parameters: tenantName' tenantDescription' administorFirstName' administorLastName' emailAddress' primaryTelephone' secondaryTelephone' addressStreetAddress' addressCity' addressStateProvince' addressPostalCode' addressCountryCode
Long Parameter List,SaaSOvation.IdentityAccess.Application.Commands,RegisterUserCommand,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Application\Commands\RegisterUserCommand.cs,RegisterUserCommand,The method has 17 parameters. Parameters: tenantId' invitationIdentifier' username' password' firstName' lastName' enabled' startDate' endDate' emailAddress' primaryTelephone' secondaryTelephone' addressStreetAddress' addressCity' addressStateProvince' addressPostalCode' addressCountryCode
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Access,UserAssignedToRole,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Access\UserAssginedToRole.cs,UserAssignedToRole,The method has 6 parameters. Parameters: tenantId' roleName' username' firstName' lastName' emailAddress
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,InvitationDescriptor,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\InvitationDescriptor.cs,InvitationDescriptor,The method has 5 parameters. Parameters: tenantId' invitationId' description' startingOn' until
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,PostalAddress,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PostalAddress.cs,PostalAddress,The method has 5 parameters. Parameters: streetAddress' city' stateProvince' postalCode' countryCode
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,RegistrationInvitation,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\RegistrationInvitation.cs,RegistrationInvitation,The method has 5 parameters. Parameters: tenantId' invitationId' description' startingOn' until
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,Tenant,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\Tenant.cs,RegisterUser,The method has 5 parameters. Parameters: invitationIdentifier' username' password' enablement' person
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,TenantAdministratorRegistered,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\TenantAdministratorRegistered.cs,TenantAdministratorRegistered,The method has 6 parameters. Parameters: tenantId' name' administorName' emailAddress' username' temporaryPassword
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,TenantProvisioningService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\TenantProvisioningService.cs,ProvisionTenant,The method has 7 parameters. Parameters: tenantName' tenantDescription' administorName' emailAddress' postalAddress' primaryTelephone' secondaryTelephone
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,TenantProvisioningService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\TenantProvisioningService.cs,RegisterAdministratorFor,The method has 6 parameters. Parameters: tenant' administorName' emailAddress' postalAddress' primaryTelephone' secondaryTelephone
Long Parameter List,SaaSOvation.IdentityAccess.Domain.Model.Identity,User,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\User.cs,User,The method has 5 parameters. Parameters: tenantId' username' password' enablement' person
Long Statement,SaaSOvation.IdentityAccess.Domain.Model.Identity,Group,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\Group.cs,AddGroup,The length of the statement  "			AssertionConcern.AssertArgumentFalse(groupMemberService.IsMemberGroup(group' this.ToGroupMember())' "Group recurrsion."); " is 121.
Long Statement,SaaSOvation.IdentityAccess.Domain.Model.Identity,GroupMemberService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\GroupMemberService.cs,IsMemberGroup,The length of the statement  "				throw new InvalidOperationException("The maximum depth of group nesting has been exceeded' stopping recursive function."); " is 122.
Long Statement,SaaSOvation.IdentityAccess.Domain.Model.Identity,Tenant,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\Tenant.cs,OfferRegistrationInvitation,The length of the statement  "			AssertionConcern.AssertStateTrue(this.registrationInvitations.Add(invitation)' "The invitation should have been added."); " is 121.
Long Statement,SaaSOvation.IdentityAccess.Domain.Model.Identity,User,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\User.cs,ProtectPassword,The length of the statement  "			AssertionConcern.AssertArgumentFalse(DomainRegistry.PasswordService.IsWeak(changedPassword)' "The password must be stronger."); " is 127.
Long Statement,SaaSOvation.IdentityAccess.Domain.Model.Identity,User,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\User.cs,ProtectPassword,The length of the statement  "			AssertionConcern.AssertArgumentNotEquals(this.Username' changedPassword' "The username and password must not be the same."); " is 124.
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,Enablement,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\Enablement.cs,GetHashCode,The following statement contains a magic number: int hashCodeValue =                  + (19563 * 181)                  + (this.Enabled ? 1:0)                  + (this.StartDate == null ? 0:this.StartDate.GetHashCode())                  + (this.EndDate == null ? 0:this.EndDate.GetHashCode());
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,Enablement,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\Enablement.cs,GetHashCode,The following statement contains a magic number: int hashCodeValue =                  + (19563 * 181)                  + (this.Enabled ? 1:0)                  + (this.StartDate == null ? 0:this.StartDate.GetHashCode())                  + (this.EndDate == null ? 0:this.EndDate.GetHashCode());
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,FullName,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\FullName.cs,GetHashCode,The following statement contains a magic number: int hashCodeValue =                  + (59151 * 191)                  + this.FirstName.GetHashCode()                  + this.LastName.GetHashCode();
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,FullName,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\FullName.cs,GetHashCode,The following statement contains a magic number: int hashCodeValue =                  + (59151 * 191)                  + this.FirstName.GetHashCode()                  + this.LastName.GetHashCode();
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,GroupMember,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\GroupMember.cs,GroupMember,The following statement contains a magic number: AssertionConcern.AssertArgumentLength(name' 1' 100' "Member name must be 100 characters or less.");
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,GenerateStrongPassword,The following statement contains a magic number: int opt = random.Next(4);
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,GenerateStrongPassword,The following statement contains a magic number: switch (opt)  				{  					case 0:  						index = random.Next(Letters.Length);  						password += (Letters.Substring(index' 1));  						break;  					case 1:  						index = random.Next(Letters.Length);  						password += (Letters.Substring(index' 1).ToLower());  						break;  					case 2:  						index = random.Next(Digits.Length);  						password += (Digits.Substring(index' 1));  						break;  					case 3:  						index = random.Next(Symbols.Length);  						password += (Symbols.Substring(index' 1));  						break;  				}
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,GenerateStrongPassword,The following statement contains a magic number: switch (opt)  				{  					case 0:  						index = random.Next(Letters.Length);  						password += (Letters.Substring(index' 1));  						break;  					case 1:  						index = random.Next(Letters.Length);  						password += (Letters.Substring(index' 1).ToLower());  						break;  					case 2:  						index = random.Next(Digits.Length);  						password += (Digits.Substring(index' 1));  						break;  					case 3:  						index = random.Next(Symbols.Length);  						password += (Symbols.Substring(index' 1));  						break;  				}
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,GenerateStrongPassword,The following statement contains a magic number: generatedPassword.Length >= 7
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,CalculatePasswordStrength,The following statement contains a magic number: strength += 10;
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,CalculatePasswordStrength,The following statement contains a magic number: strength += (length - 7);
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,CalculatePasswordStrength,The following statement contains a magic number: length > 7
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,CalculatePasswordStrength,The following statement contains a magic number: (letterCount >= 2) && (digitCount >= 2)
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,CalculatePasswordStrength,The following statement contains a magic number: (letterCount >= 2) && (digitCount >= 2)
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,RegistrationInvitation,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\RegistrationInvitation.cs,WillStartOn,The following statement contains a magic number: this.Until = new DateTime(date.Ticks + 86400000);
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,RegistrationInvitation,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\RegistrationInvitation.cs,GetHashCode,The following statement contains a magic number: return                  + (6325 * 233)                  + this.TenantId.GetHashCode()                  + this.InvitationId.GetHashCode();
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,RegistrationInvitation,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\RegistrationInvitation.cs,GetHashCode,The following statement contains a magic number: return                  + (6325 * 233)                  + this.TenantId.GetHashCode()                  + this.InvitationId.GetHashCode();
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,Tenant,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\Tenant.cs,Tenant,The following statement contains a magic number: AssertionConcern.AssertArgumentLength(name' 1' 100' "The name must be 100 characters or less.");
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,Tenant,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\Tenant.cs,Tenant,The following statement contains a magic number: AssertionConcern.AssertArgumentLength(description' 1' 100' "The name description be 100 characters or less.");
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,User,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\User.cs,User,The following statement contains a magic number: AssertionConcern.AssertArgumentLength(username' 3' 250' "The username must be 3 to 250 characters.");
Magic Number,SaaSOvation.IdentityAccess.Domain.Model.Identity,User,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\User.cs,User,The following statement contains a magic number: AssertionConcern.AssertArgumentLength(username' 3' 250' "The username must be 3 to 250 characters.");
Missing Default,SaaSOvation.IdentityAccess.Domain.Model.Identity,PasswordService,D:\research\architectureSmells\repos\VaughnVernon_IDDD_Samples_NET\iddd_identityaccess\Domain.Model\Identity\PasswordService.cs,GenerateStrongPassword,The following switch statement is missing a default case: switch (opt)  				{  					case 0:  						index = random.Next(Letters.Length);  						password += (Letters.Substring(index' 1));  						break;  					case 1:  						index = random.Next(Letters.Length);  						password += (Letters.Substring(index' 1).ToLower());  						break;  					case 2:  						index = random.Next(Digits.Length);  						password += (Digits.Substring(index' 1));  						break;  					case 3:  						index = random.Next(Symbols.Length);  						password += (Symbols.Substring(index' 1));  						break;  				}
