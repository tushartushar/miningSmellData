Implementation smell,Namespace,Class,File,Method,Description
Long Method,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,OnMessageReceivedEvent,The method has 108 lines of code.
Long Method,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,RegisterConnection,The method has 150 lines of code.
Long Method,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,CompileMessage,The method has 104 lines of code.
Long Method,Helpmebot.Legacy,LegacyCommandParser,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\LegacyCommandParser.cs,HandleCommand,The method has 121 lines of code.
Complex Method,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,OnMessageReceivedEvent,Cyclomatic complexity of the method is 19
Complex Method,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,RegisterConnection,Cyclomatic complexity of the method is 21
Complex Method,helpmebot6.Commands,Autolink,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Autolink.cs,ExecuteCommand,Cyclomatic complexity of the method is 8
Complex Method,helpmebot6.Commands,Silence,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Silence.cs,ExecuteCommand,Cyclomatic complexity of the method is 8
Complex Method,Helpmebot.Model.ModeMonitoring,ModeChanges,C:\repos\helpmebot_helpmebot\src\Helpmebot\Model\ModeMonitoring\ModeChanges.cs,IsEmpty,Cyclomatic complexity of the method is 12
Complex Method,Helpmebot.Services,JoinMessageService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\JoinMessageService.cs,Welcome,Cyclomatic complexity of the method is 9
Complex Method,Helpmebot.Services,ModeMonitoringService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\ModeMonitoringService.cs,OnMessageReceived,Cyclomatic complexity of the method is 8
Complex Method,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,CompileMessage,Cyclomatic complexity of the method is 9
Complex Method,Helpmebot.Legacy,LegacyCommandParser,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\LegacyCommandParser.cs,HandleCommand,Cyclomatic complexity of the method is 10
Long Parameter List,Helpmebot,AccessLogEntry,C:\repos\helpmebot_helpmebot\src\Helpmebot\AccessLog.cs,AccessLogEntry,The method has 6 parameters. Parameters: source' command' success' channel' parameters' requiredAccessLevel
Long Parameter List,Helpmebot.Background,SystemMonitoringClientService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Background\SystemMonitoringClientService.cs,SystemMonitoringClientService,The method has 5 parameters. Parameters: systemMonitoringPort' systemMonitoringMessage' systemMonitoringEnabled' logger' networkClient
Long Parameter List,Helpmebot.Commands,CommandBase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Commands\CommandBase.cs,CommandBase,The method has 7 parameters. Parameters: commandSource' user' arguments' userFlagService' logger' messageService' accessLogService
Long Parameter List,Helpmebot.Commands,CommandServiceHelper,C:\repos\helpmebot_helpmebot\src\Helpmebot\Commands\CommandServiceHelper.cs,CommandServiceHelper,The method has 7 parameters. Parameters: client' messageService' urlShorteningService' configurationHelper' mediaWikiSiteRepository' interwikiPrefixRepository' channelRepository
Long Parameter List,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,WatcherController,The method has 8 parameters. Parameters: messageService' urlShorteningService' watchedCategoryRepository' mediaWikiSiteRepository' ignoredPagesRepository' logger' ircClient' legacyDatabase
Long Identifier,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,,The length of the parameter connectionRegistrationSemaphore is 31.
Long Statement,Helpmebot,Helpmebot6,C:\repos\helpmebot_helpmebot\src\Helpmebot\Helpmebot.cs,InitialiseBot,The length of the statement  "            container.Register(Component.For<IModeMonitoringService>().Instance(modeMonitor).IsDefault().NamedAutomatically("modemon")); " is 124.
Long Statement,Helpmebot.IRC.Model,IrcChannelUser,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\Model\IrcChannelUser.cs,GetHashCode,The length of the statement  "                return ((this.User != null ? this.User.GetHashCode() : 0) * 397) ^ (this.Channel != null ? this.Channel.GetHashCode() : 0); " is 123.
Long Statement,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The length of the statement  "                /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0 " is 120.
Long Statement,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The length of the statement  "                 * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur " is 126.
Long Statement,helpmebot6.Commands,CategoryWatcher,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\CategoryWatcher.cs,ExecuteCommand,The length of the statement  "                    return ((GenericCommand)Activator.CreateInstance(subCmdType' this.Source' this.Channel' this.Arguments' this.CommandServiceHelper)).RunCommand(); " is 145.
Long Statement,helpmebot6.Commands,Commandaccess,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Commandaccess.cs,ExecuteCommand,The length of the statement  "            return new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters)); " is 155.
Long Statement,helpmebot6.Commands,Categorysize,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\CategorySize.cs,ExecuteCommand,The length of the statement  "                return new CommandResponseHandler(this.CommandServiceHelper.MessageService.NotEnoughParameters(this.Channel' "CategorySize"' 1' 0)); " is 132.
Long Statement,helpmebot6.Commands,Charge,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\FunStuff\Charge.cs,ExecuteCommand,The length of the statement  "                       ? new CommandResponseHandler(messageService.RetrieveMessage("cmdChargeParam"' this.Channel' new[] { this.CommandTarget })) " is 122.
Long Statement,helpmebot6.Commands,Charge,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\FunStuff\Charge.cs,ExecuteCommand,The length of the statement  "                       : new CommandResponseHandler(messageService.RetrieveMessage("cmdCharge"' this.Channel' new[] { this.Source.Nickname })); " is 120.
Long Statement,helpmebot6.Commands,Uncurl,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\FunStuff\Uncurl.cs,ExecuteCommand,The length of the statement  "            return new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage(Messages.Done' this.Channel' null)); " is 127.
Long Statement,helpmebot6.Commands,Vorticough,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\FunStuff\Vorticough.cs,ExecuteCommand,The length of the statement  "            return new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage("Vortigaunt"' this.Channel' null)); " is 126.
Long Statement,helpmebot6.Commands,Notify,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Notify.cs,NotifyJoin,The length of the statement  "            var message = this.CommandServiceHelper.MessageService.RetrieveMessage("notifyJoin"' this.Channel' new[] { source.Nickname' channel }); " is 135.
Long Statement,helpmebot6.Commands,Editcount,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Editcount.cs,ExecuteCommand,The length of the statement  "                var xtoolsUrl = string.Format("https://tools.wmflabs.org/xtools-ec/index.php?user={0}&project=en.wikipedia.org"' userName); " is 123.
Long Statement,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,ExecuteCommand,The length of the statement  "                return new CommandResponseHandler(messageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters)); " is 129.
Long Statement,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,ExecuteCommand,The length of the statement  "                return new CommandResponseHandler(messageService.RetrieveMessage("hexDecodeResultNoResolve"' this.Channel' messageargs)); " is 121.
Long Statement,helpmebot6.Commands,Die,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Die.cs,NotConfirmed,The length of the statement  "            return new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage("Die-unconfirmed"' this.Channel' null)); " is 131.
Long Statement,helpmebot6.Commands,Geolocate,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Geolocate.cs,ExecuteCommand,The length of the statement  "                return new CommandResponseHandler(messageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters)); " is 129.
Long Statement,helpmebot6.Commands,Isgd,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Isgd.cs,ExecuteCommand,The length of the statement  "                return new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters)); " is 155.
Long Statement,helpmebot6.Commands,Join,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Join.cs,ExecuteCommand,The length of the statement  "            return new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters)); " is 155.
Long Statement,helpmebot6.Commands,Registration,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Registration.cs,ExecuteCommand,The length of the statement  "                string notEnoughParamsMessage = messageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters); " is 126.
Long Statement,helpmebot6.Commands,Resolve,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Resolve.cs,ExecuteCommand,The length of the statement  "                return new CommandResponseHandler(messageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters)); " is 129.
Long Statement,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,ExecuteCommand,The length of the statement  "                var notEnoughParamsMessage = messageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters); " is 123.
Long Statement,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,SendShortUserInfo,The length of the statement  "            string message = this.CommandServiceHelper.MessageService.RetrieveMessage("cmdUserInfoShort"' this.Channel' messageParameters); " is 127.
Long Statement,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,SendLongUserInfo,The length of the statement  "            var xtoolsUrl = string.Format("https://tools.wmflabs.org/xtools-ec/index.php?user={0}&project=en.wikipedia.org"' userInformation.UserName); " is 139.
Long Statement,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,SendLongUserInfo,The length of the statement  "            string[] messageParameters2 = { userInformation.EditCount.ToString(CultureInfo.InvariantCulture)' userInformation.UserName' xtoolsShortUrl }; " is 141.
Long Statement,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,SendLongUserInfo,The length of the statement  "            string[] messageParameters4 = { userInformation.UserName' userInformation.EditRate.ToString(CultureInfo.InvariantCulture) }; " is 124.
Long Statement,Helpmebot.Commands.FunStuff,TargetedFunCommand,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\FunStuff\TargetedFunCommand.cs,ExecuteCommand,The length of the statement  "            string message = this.CommandServiceHelper.MessageService.RetrieveMessage(this.TargetMessage' this.Channel' messageparams); " is 123.
Long Statement,Helpmebot.Monitoring,CategoryWatcher,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\CategoryWatcher.cs,WatcherThreadMethod,The length of the statement  "                    // iteratively sleep (yuck) until we've got less than a second of our sleep remaining - sounds like a good enough tolerance for me. " is 131.
Long Statement,Helpmebot.Monitoring,CategoryWatcher,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\CategoryWatcher.cs,WatcherThreadMethod,The length of the statement  "                        this.logger.DebugFormat("Thread has woken after {0}ms' with {1} ms remaining"' stopwatch.ElapsedMilliseconds' remaining); " is 121.
Long Statement,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,IsWatcherInChannel,The length of the statement  "            var command = new MySqlCommand("SELECT COUNT(*) FROM channelwatchers INNER JOIN channel ON cw_channel = channel_id INNER JOIN watcher ON cw_watcher = watcher_id WHERE channel_name = @channel AND watcher_keyword = @keyword;"); " is 225.
Long Statement,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,UpdateDatabaseTable,The length of the statement  "                    var command = new MySqlCommand("UPDATE categoryitems SET item_updateflag = 1 WHERE item_keyword = @keyword AND item_name = @name LIMIT 1;"); " is 140.
Long Statement,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,CategoryHasItemsEvent,The length of the statement  "                    "SELECT channel_name FROM `watcher` INNER JOIN `channelwatchers` ON watcher_id = cw_watcher INNER JOIN `channel` ON channel_id = cw_channel WHERE watcher_keyword = @keyword;"); " is 176.
Long Statement,helpmebot6.Commands.CategoryWatcherCommand,Enable,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\CategoryWatcherCommand\Enable.cs,ExecuteCommand,The length of the statement  "                       ? new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage(Messages.Done' this.Channel' null)) " is 121.
Long Statement,helpmebot6.Commands.CategoryWatcherCommand,Enable,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\CategoryWatcherCommand\Enable.cs,ExecuteCommand,The length of the statement  "                       : new CommandResponseHandler(this.CommandServiceHelper.MessageService.RetrieveMessage(Messages.NoChange' this.Channel' null)); " is 126.
Long Statement,Helpmebot.Legacy.Configuration,LegacyConfig,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Configuration\LegacyConfig.cs,SetLocalOption,The length of the statement  "            // INNER JOIN `channel` ON `channel_id` = `cc_channel` WHERE `channel_name` = '##helpmebot' AND `configuration_name` = 'silence' " is 128.
Empty Catch Block,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,ExecuteCommand,The method has an empty catch block.
Empty Catch Block,helpmebot6.Commands,Resolve,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Resolve.cs,ExecuteCommand,The method has an empty catch block.
Empty Catch Block,Helpmebot.Services,BlockMonitoringService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\BlockMonitoringService.cs,GetIpAddress,The method has an empty catch block.
Magic Number,Helpmebot,Linker,C:\repos\helpmebot_helpmebot\src\Helpmebot\Linker.cs,ReallyParseMessage,The following statement contains a magic number: while (m.Length > 0)              {                  if (m.Groups[1].Length > 0)                  {                      newLinks.Add(m.Groups[1].Value);                  }                    if (m.Groups[2].Length > 0)                  {                      newLinks.Add("Template:" + m.Groups[2].Value);                  }                    m = m.NextMatch();              }
Magic Number,Helpmebot,Linker,C:\repos\helpmebot_helpmebot\src\Helpmebot\Linker.cs,ReallyParseMessage,The following statement contains a magic number: while (m.Length > 0)              {                  if (m.Groups[1].Length > 0)                  {                      newLinks.Add(m.Groups[1].Value);                  }                    if (m.Groups[2].Length > 0)                  {                      newLinks.Add("Template:" + m.Groups[2].Value);                  }                    m = m.NextMatch();              }
Magic Number,Helpmebot.Background,NotificationBackgroundService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Background\NotificationBackgroundService.cs,TimerOnElapsed,The following statement contains a magic number: lock (this.syncLock)              {                  this.Logger.Debug("Retrieving items from notification queue...");                    // Get items from the notification queue                  var list = this.notificationRepository.RetrieveLatest().ToList();                    this.Logger.DebugFormat("Found {0} items."' list.Count());                    // Iterate to send them.                  foreach (var notification in list)                  {                      var destination = "##helpmebot";                        // TODO: move me to a separate table or something                      switch (notification.Type)                      {                          case 1:                              destination = "#wikipedia-en-accounts";                              break;                            case 2:                              destination = "#wikipedia-en-accounts-devs";                              break;                      }                                            this.ircClient.SendMessage(destination' this.SanitiseMessage(notification.Text));                  }              }
Magic Number,Helpmebot.Background,SystemMonitoringClientService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Background\SystemMonitoringClientService.cs,ThreadMethod,The following statement contains a magic number: while (this.alive)              {                  if (!this.service.Pending())                  {                      Thread.Sleep(10);                      continue;                  }                    this.logger.Debug("Found waiting request.");                    TcpClient client = this.service.AcceptTcpClient();                    var sw = new StreamWriter(client.GetStream());                    if (!this.networkClient.NetworkConnected)                  {                      sw.WriteLine("IRC client is not connected to the network!");                  }                  else                  {                      sw.WriteLine(this.Message);                                      }                                    sw.Flush();                  client.Close();              }
Magic Number,Helpmebot.IRC.Model,IrcChannelUser,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\Model\IrcChannelUser.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((this.User != null ? this.User.GetHashCode() : 0) * 397) ^ (this.Channel != null ? this.Channel.GetHashCode() : 0);              }
Magic Number,Helpmebot.IRC.Messages,Message,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\Messages\Message.cs,Parse,The following statement contains a magic number: if (data.StartsWith(":"))              {                  var prefixstrings = data.Split(separator' 2' StringSplitOptions.RemoveEmptyEntries);                  data = prefixstrings[1];                  prefix = prefixstrings[0].Substring(1); // strip the leading : too              }
Magic Number,Helpmebot.IRC.Messages,Message,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\Messages\Message.cs,Parse,The following statement contains a magic number: var strings = data.Split(separator' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,Helpmebot.IRC.Messages,Message,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\Messages\Message.cs,Parse,The following statement contains a magic number: if (strings.Length == 2)              {                  var parameters = strings[1];                    if (parameters.Contains(" :") || parameters.StartsWith(":"))                  {                      var paramend = parameters.Substring(parameters.IndexOf(":"' StringComparison.Ordinal) + 1);                      var parameterList =                          parameters.Substring(0' parameters.IndexOf(":"' StringComparison.Ordinal))                              .Split(separator' StringSplitOptions.RemoveEmptyEntries)                              .ToList();                        parameterList.Add(paramend);                      messageParameters = parameterList;                  }                  else                  {                      messageParameters = parameters.Split(separator' StringSplitOptions.RemoveEmptyEntries).ToList();                  }              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The following statement contains a magic number: try              {                  if (message.Command != Numerics.WhoXReply)                  {                      throw new ArgumentException("Expected WHOX reply message"' "message");                  }                    List<string> parameters = message.Parameters.ToList();                  if (parameters.Count() != 8)                  {                      throw new ArgumentException("Expected 8 WHOX parameters."' "message");                  }                    /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0                   * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur                   *                             .            t   c                      u        h                   n              f  a                   *     prefix              cmd    0         1   2                      3        4                   5              6  7                   */                  string channel = parameters[2];                  string user = parameters[3];                  string host = parameters[4];                  string nick = parameters[5];                  string flags = parameters[6];                  bool away = flags[0] == 'G'; // H (here) / G (gone)                  string modes = flags.Substring(1);                  string account = parameters[7];                    lock (this.userOperationLock)                  {                      var ircUser = new IrcUser();                      if (this.userCache.ContainsKey(nick))                      {                          ircUser = this.userCache[nick];                      }                      else                      {                          ircUser.Nickname = nick;                            this.userCache.Add(nick' ircUser);                      }                        ircUser.Account = account;                      ircUser.Username = user;                      ircUser.Hostname = host;                      ircUser.Away = away;                        if (this.channels[channel].Users.ContainsKey(ircUser.Nickname))                      {                          IrcChannelUser channelUser = this.channels[channel].Users[ircUser.Nickname];                          channelUser.Operator = modes.Contains("@");                          channelUser.Voice = modes.Contains("+");                      }                      else                      {                          var channelUser = new IrcChannelUser(ircUser' channel)                                                {                                                    Operator = modes.Contains("@")'                                                     Voice = modes.Contains("+")                                                };                            this.channels[channel].Users.Add(ircUser.Nickname' channelUser);                      }                  }              }              catch (Exception ex)              {                  this.nickTrackingValid = false;                  this.logger.Error("Nick tracking for authentication is no longer valid."' ex);                  throw;              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The following statement contains a magic number: try              {                  if (message.Command != Numerics.WhoXReply)                  {                      throw new ArgumentException("Expected WHOX reply message"' "message");                  }                    List<string> parameters = message.Parameters.ToList();                  if (parameters.Count() != 8)                  {                      throw new ArgumentException("Expected 8 WHOX parameters."' "message");                  }                    /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0                   * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur                   *                             .            t   c                      u        h                   n              f  a                   *     prefix              cmd    0         1   2                      3        4                   5              6  7                   */                  string channel = parameters[2];                  string user = parameters[3];                  string host = parameters[4];                  string nick = parameters[5];                  string flags = parameters[6];                  bool away = flags[0] == 'G'; // H (here) / G (gone)                  string modes = flags.Substring(1);                  string account = parameters[7];                    lock (this.userOperationLock)                  {                      var ircUser = new IrcUser();                      if (this.userCache.ContainsKey(nick))                      {                          ircUser = this.userCache[nick];                      }                      else                      {                          ircUser.Nickname = nick;                            this.userCache.Add(nick' ircUser);                      }                        ircUser.Account = account;                      ircUser.Username = user;                      ircUser.Hostname = host;                      ircUser.Away = away;                        if (this.channels[channel].Users.ContainsKey(ircUser.Nickname))                      {                          IrcChannelUser channelUser = this.channels[channel].Users[ircUser.Nickname];                          channelUser.Operator = modes.Contains("@");                          channelUser.Voice = modes.Contains("+");                      }                      else                      {                          var channelUser = new IrcChannelUser(ircUser' channel)                                                {                                                    Operator = modes.Contains("@")'                                                     Voice = modes.Contains("+")                                                };                            this.channels[channel].Users.Add(ircUser.Nickname' channelUser);                      }                  }              }              catch (Exception ex)              {                  this.nickTrackingValid = false;                  this.logger.Error("Nick tracking for authentication is no longer valid."' ex);                  throw;              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The following statement contains a magic number: try              {                  if (message.Command != Numerics.WhoXReply)                  {                      throw new ArgumentException("Expected WHOX reply message"' "message");                  }                    List<string> parameters = message.Parameters.ToList();                  if (parameters.Count() != 8)                  {                      throw new ArgumentException("Expected 8 WHOX parameters."' "message");                  }                    /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0                   * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur                   *                             .            t   c                      u        h                   n              f  a                   *     prefix              cmd    0         1   2                      3        4                   5              6  7                   */                  string channel = parameters[2];                  string user = parameters[3];                  string host = parameters[4];                  string nick = parameters[5];                  string flags = parameters[6];                  bool away = flags[0] == 'G'; // H (here) / G (gone)                  string modes = flags.Substring(1);                  string account = parameters[7];                    lock (this.userOperationLock)                  {                      var ircUser = new IrcUser();                      if (this.userCache.ContainsKey(nick))                      {                          ircUser = this.userCache[nick];                      }                      else                      {                          ircUser.Nickname = nick;                            this.userCache.Add(nick' ircUser);                      }                        ircUser.Account = account;                      ircUser.Username = user;                      ircUser.Hostname = host;                      ircUser.Away = away;                        if (this.channels[channel].Users.ContainsKey(ircUser.Nickname))                      {                          IrcChannelUser channelUser = this.channels[channel].Users[ircUser.Nickname];                          channelUser.Operator = modes.Contains("@");                          channelUser.Voice = modes.Contains("+");                      }                      else                      {                          var channelUser = new IrcChannelUser(ircUser' channel)                                                {                                                    Operator = modes.Contains("@")'                                                     Voice = modes.Contains("+")                                                };                            this.channels[channel].Users.Add(ircUser.Nickname' channelUser);                      }                  }              }              catch (Exception ex)              {                  this.nickTrackingValid = false;                  this.logger.Error("Nick tracking for authentication is no longer valid."' ex);                  throw;              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The following statement contains a magic number: try              {                  if (message.Command != Numerics.WhoXReply)                  {                      throw new ArgumentException("Expected WHOX reply message"' "message");                  }                    List<string> parameters = message.Parameters.ToList();                  if (parameters.Count() != 8)                  {                      throw new ArgumentException("Expected 8 WHOX parameters."' "message");                  }                    /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0                   * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur                   *                             .            t   c                      u        h                   n              f  a                   *     prefix              cmd    0         1   2                      3        4                   5              6  7                   */                  string channel = parameters[2];                  string user = parameters[3];                  string host = parameters[4];                  string nick = parameters[5];                  string flags = parameters[6];                  bool away = flags[0] == 'G'; // H (here) / G (gone)                  string modes = flags.Substring(1);                  string account = parameters[7];                    lock (this.userOperationLock)                  {                      var ircUser = new IrcUser();                      if (this.userCache.ContainsKey(nick))                      {                          ircUser = this.userCache[nick];                      }                      else                      {                          ircUser.Nickname = nick;                            this.userCache.Add(nick' ircUser);                      }                        ircUser.Account = account;                      ircUser.Username = user;                      ircUser.Hostname = host;                      ircUser.Away = away;                        if (this.channels[channel].Users.ContainsKey(ircUser.Nickname))                      {                          IrcChannelUser channelUser = this.channels[channel].Users[ircUser.Nickname];                          channelUser.Operator = modes.Contains("@");                          channelUser.Voice = modes.Contains("+");                      }                      else                      {                          var channelUser = new IrcChannelUser(ircUser' channel)                                                {                                                    Operator = modes.Contains("@")'                                                     Voice = modes.Contains("+")                                                };                            this.channels[channel].Users.Add(ircUser.Nickname' channelUser);                      }                  }              }              catch (Exception ex)              {                  this.nickTrackingValid = false;                  this.logger.Error("Nick tracking for authentication is no longer valid."' ex);                  throw;              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The following statement contains a magic number: try              {                  if (message.Command != Numerics.WhoXReply)                  {                      throw new ArgumentException("Expected WHOX reply message"' "message");                  }                    List<string> parameters = message.Parameters.ToList();                  if (parameters.Count() != 8)                  {                      throw new ArgumentException("Expected 8 WHOX parameters."' "message");                  }                    /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0                   * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur                   *                             .            t   c                      u        h                   n              f  a                   *     prefix              cmd    0         1   2                      3        4                   5              6  7                   */                  string channel = parameters[2];                  string user = parameters[3];                  string host = parameters[4];                  string nick = parameters[5];                  string flags = parameters[6];                  bool away = flags[0] == 'G'; // H (here) / G (gone)                  string modes = flags.Substring(1);                  string account = parameters[7];                    lock (this.userOperationLock)                  {                      var ircUser = new IrcUser();                      if (this.userCache.ContainsKey(nick))                      {                          ircUser = this.userCache[nick];                      }                      else                      {                          ircUser.Nickname = nick;                            this.userCache.Add(nick' ircUser);                      }                        ircUser.Account = account;                      ircUser.Username = user;                      ircUser.Hostname = host;                      ircUser.Away = away;                        if (this.channels[channel].Users.ContainsKey(ircUser.Nickname))                      {                          IrcChannelUser channelUser = this.channels[channel].Users[ircUser.Nickname];                          channelUser.Operator = modes.Contains("@");                          channelUser.Voice = modes.Contains("+");                      }                      else                      {                          var channelUser = new IrcChannelUser(ircUser' channel)                                                {                                                    Operator = modes.Contains("@")'                                                     Voice = modes.Contains("+")                                                };                            this.channels[channel].Users.Add(ircUser.Nickname' channelUser);                      }                  }              }              catch (Exception ex)              {                  this.nickTrackingValid = false;                  this.logger.Error("Nick tracking for authentication is no longer valid."' ex);                  throw;              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The following statement contains a magic number: try              {                  if (message.Command != Numerics.WhoXReply)                  {                      throw new ArgumentException("Expected WHOX reply message"' "message");                  }                    List<string> parameters = message.Parameters.ToList();                  if (parameters.Count() != 8)                  {                      throw new ArgumentException("Expected 8 WHOX parameters."' "message");                  }                    /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0                   * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur                   *                             .            t   c                      u        h                   n              f  a                   *     prefix              cmd    0         1   2                      3        4                   5              6  7                   */                  string channel = parameters[2];                  string user = parameters[3];                  string host = parameters[4];                  string nick = parameters[5];                  string flags = parameters[6];                  bool away = flags[0] == 'G'; // H (here) / G (gone)                  string modes = flags.Substring(1);                  string account = parameters[7];                    lock (this.userOperationLock)                  {                      var ircUser = new IrcUser();                      if (this.userCache.ContainsKey(nick))                      {                          ircUser = this.userCache[nick];                      }                      else                      {                          ircUser.Nickname = nick;                            this.userCache.Add(nick' ircUser);                      }                        ircUser.Account = account;                      ircUser.Username = user;                      ircUser.Hostname = host;                      ircUser.Away = away;                        if (this.channels[channel].Users.ContainsKey(ircUser.Nickname))                      {                          IrcChannelUser channelUser = this.channels[channel].Users[ircUser.Nickname];                          channelUser.Operator = modes.Contains("@");                          channelUser.Voice = modes.Contains("+");                      }                      else                      {                          var channelUser = new IrcChannelUser(ircUser' channel)                                                {                                                    Operator = modes.Contains("@")'                                                     Voice = modes.Contains("+")                                                };                            this.channels[channel].Users.Add(ircUser.Nickname' channelUser);                      }                  }              }              catch (Exception ex)              {                  this.nickTrackingValid = false;                  this.logger.Error("Nick tracking for authentication is no longer valid."' ex);                  throw;              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,HandleWhoXReply,The following statement contains a magic number: try              {                  if (message.Command != Numerics.WhoXReply)                  {                      throw new ArgumentException("Expected WHOX reply message"' "message");                  }                    List<string> parameters = message.Parameters.ToList();                  if (parameters.Count() != 8)                  {                      throw new ArgumentException("Expected 8 WHOX parameters."' "message");                  }                    /* >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ChanServ services.           ChanServ       H@  0                   * >> :holmes.freenode.net 354 stwalkerster 001 #wikipedia-en-accounts ~jamesur wikimedia/Jamesofur Jamesofur|away G  jamesofur                   *                             .            t   c                      u        h                   n              f  a                   *     prefix              cmd    0         1   2                      3        4                   5              6  7                   */                  string channel = parameters[2];                  string user = parameters[3];                  string host = parameters[4];                  string nick = parameters[5];                  string flags = parameters[6];                  bool away = flags[0] == 'G'; // H (here) / G (gone)                  string modes = flags.Substring(1);                  string account = parameters[7];                    lock (this.userOperationLock)                  {                      var ircUser = new IrcUser();                      if (this.userCache.ContainsKey(nick))                      {                          ircUser = this.userCache[nick];                      }                      else                      {                          ircUser.Nickname = nick;                            this.userCache.Add(nick' ircUser);                      }                        ircUser.Account = account;                      ircUser.Username = user;                      ircUser.Hostname = host;                      ircUser.Away = away;                        if (this.channels[channel].Users.ContainsKey(ircUser.Nickname))                      {                          IrcChannelUser channelUser = this.channels[channel].Users[ircUser.Nickname];                          channelUser.Operator = modes.Contains("@");                          channelUser.Voice = modes.Contains("+");                      }                      else                      {                          var channelUser = new IrcChannelUser(ircUser' channel)                                                {                                                    Operator = modes.Contains("@")'                                                     Voice = modes.Contains("+")                                                };                            this.channels[channel].Users.Add(ircUser.Nickname' channelUser);                      }                  }              }              catch (Exception ex)              {                  this.nickTrackingValid = false;                  this.logger.Error("Nick tracking for authentication is no longer valid."' ex);                  throw;              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,OnChannelModeReceived,The following statement contains a magic number: int position = 2;
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,OnNameReplyReceived,The following statement contains a magic number: string channel = parameters[2];
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,OnNameReplyReceived,The following statement contains a magic number: string names = parameters[3];
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,RegisterConnection,The following statement contains a magic number: if (message.Command == "CAP")              {                  List<string> list = message.Parameters.ToList();                    if (list[1] == "LS")                  {                      string[] serverCapabilities = list[2].Split(' ');                      this.logger.DebugFormat("Server Capabilities: {0}"' serverCapabilities.Implode("' "));                      this.logger.DebugFormat("Client Capabilities: {0}"' this.clientCapabilities.Implode("' "));                        List<string> caps = serverCapabilities.Intersect(this.clientCapabilities).ToList();                        // We don't support one without the other!                      if (caps.Intersect(new[] { "account-notify"' "extended-join" }).Count() == 1)                      {                          this.logger.Warn(                              "Dropping account-notify and extended-join support since server only supports one of them!");                          caps.Remove("account-notify");                          caps.Remove("extended-join");                      }                        if (caps.Count == 0)                      {                          // nothing is suitable for us' so downgrade to 1459                          this.logger.InfoFormat("Requesting no capabilities.");                            this.Send(new Message("CAP"' "END"));                          this.Send1459Registration();                            return;                      }                        this.logger.InfoFormat("Requesting capabilities: {0}"' caps.Implode("' "));                        this.Send(new Message("CAP"' new[] { "REQ"' caps.Implode() }));                        return;                  }                    if (list[1] == "ACK")                  {                      string[] caps = list[2].Split(' ');                      this.logger.InfoFormat("Acknowledged capabilities: {0}"' caps.Implode("' "));                        foreach (string cap in caps)                      {                          if (cap == "sasl")                          {                              this.capSasl = true;                          }                            if (cap == "extended-join")                          {                              // This includes account-notify since both are required.                              this.capExtendedJoin = true;                          }                            // We don't care about multi-prefix' since the code to                           // handle it works nicely for those without it.                      }                        if (this.capSasl)                      {                          this.SaslAuth(null);                      }                      else                      {                          this.Send(new Message("CAP"' "END"));                          this.Send1459Registration();                      }                        return;                  }                    if (list[1] == "NAK")                  {                      // something went wrong' so downgrade to 1459.                      string[] caps = list[2].Split(' ');                      this.logger.WarnFormat("NOT Acked capabilities: {0}"' caps.Implode("' "));                        this.Send(new Message("CAP"' "END"));                      this.Send1459Registration();                      return;                  }              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,RegisterConnection,The following statement contains a magic number: if (message.Command == "CAP")              {                  List<string> list = message.Parameters.ToList();                    if (list[1] == "LS")                  {                      string[] serverCapabilities = list[2].Split(' ');                      this.logger.DebugFormat("Server Capabilities: {0}"' serverCapabilities.Implode("' "));                      this.logger.DebugFormat("Client Capabilities: {0}"' this.clientCapabilities.Implode("' "));                        List<string> caps = serverCapabilities.Intersect(this.clientCapabilities).ToList();                        // We don't support one without the other!                      if (caps.Intersect(new[] { "account-notify"' "extended-join" }).Count() == 1)                      {                          this.logger.Warn(                              "Dropping account-notify and extended-join support since server only supports one of them!");                          caps.Remove("account-notify");                          caps.Remove("extended-join");                      }                        if (caps.Count == 0)                      {                          // nothing is suitable for us' so downgrade to 1459                          this.logger.InfoFormat("Requesting no capabilities.");                            this.Send(new Message("CAP"' "END"));                          this.Send1459Registration();                            return;                      }                        this.logger.InfoFormat("Requesting capabilities: {0}"' caps.Implode("' "));                        this.Send(new Message("CAP"' new[] { "REQ"' caps.Implode() }));                        return;                  }                    if (list[1] == "ACK")                  {                      string[] caps = list[2].Split(' ');                      this.logger.InfoFormat("Acknowledged capabilities: {0}"' caps.Implode("' "));                        foreach (string cap in caps)                      {                          if (cap == "sasl")                          {                              this.capSasl = true;                          }                            if (cap == "extended-join")                          {                              // This includes account-notify since both are required.                              this.capExtendedJoin = true;                          }                            // We don't care about multi-prefix' since the code to                           // handle it works nicely for those without it.                      }                        if (this.capSasl)                      {                          this.SaslAuth(null);                      }                      else                      {                          this.Send(new Message("CAP"' "END"));                          this.Send1459Registration();                      }                        return;                  }                    if (list[1] == "NAK")                  {                      // something went wrong' so downgrade to 1459.                      string[] caps = list[2].Split(' ');                      this.logger.WarnFormat("NOT Acked capabilities: {0}"' caps.Implode("' "));                        this.Send(new Message("CAP"' "END"));                      this.Send1459Registration();                      return;                  }              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,RegisterConnection,The following statement contains a magic number: if (message.Command == "CAP")              {                  List<string> list = message.Parameters.ToList();                    if (list[1] == "LS")                  {                      string[] serverCapabilities = list[2].Split(' ');                      this.logger.DebugFormat("Server Capabilities: {0}"' serverCapabilities.Implode("' "));                      this.logger.DebugFormat("Client Capabilities: {0}"' this.clientCapabilities.Implode("' "));                        List<string> caps = serverCapabilities.Intersect(this.clientCapabilities).ToList();                        // We don't support one without the other!                      if (caps.Intersect(new[] { "account-notify"' "extended-join" }).Count() == 1)                      {                          this.logger.Warn(                              "Dropping account-notify and extended-join support since server only supports one of them!");                          caps.Remove("account-notify");                          caps.Remove("extended-join");                      }                        if (caps.Count == 0)                      {                          // nothing is suitable for us' so downgrade to 1459                          this.logger.InfoFormat("Requesting no capabilities.");                            this.Send(new Message("CAP"' "END"));                          this.Send1459Registration();                            return;                      }                        this.logger.InfoFormat("Requesting capabilities: {0}"' caps.Implode("' "));                        this.Send(new Message("CAP"' new[] { "REQ"' caps.Implode() }));                        return;                  }                    if (list[1] == "ACK")                  {                      string[] caps = list[2].Split(' ');                      this.logger.InfoFormat("Acknowledged capabilities: {0}"' caps.Implode("' "));                        foreach (string cap in caps)                      {                          if (cap == "sasl")                          {                              this.capSasl = true;                          }                            if (cap == "extended-join")                          {                              // This includes account-notify since both are required.                              this.capExtendedJoin = true;                          }                            // We don't care about multi-prefix' since the code to                           // handle it works nicely for those without it.                      }                        if (this.capSasl)                      {                          this.SaslAuth(null);                      }                      else                      {                          this.Send(new Message("CAP"' "END"));                          this.Send1459Registration();                      }                        return;                  }                    if (list[1] == "NAK")                  {                      // something went wrong' so downgrade to 1459.                      string[] caps = list[2].Split(' ');                      this.logger.WarnFormat("NOT Acked capabilities: {0}"' caps.Implode("' "));                        this.Send(new Message("CAP"' "END"));                      this.Send1459Registration();                      return;                  }              }
Magic Number,Helpmebot.IRC,IrcClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\IrcClient.cs,RegisterConnection,The following statement contains a magic number: if (message.Command == Numerics.SaslLoggedIn)              {                  string[] strings = message.Parameters.ToArray();                  this.logger.InfoFormat("You are now logged in as {1} ({0})"' strings[1]' strings[2]);                  this.servicesLoggedIn = true;                  return;              }
Magic Number,Helpmebot.IRC,NetworkClient,C:\repos\helpmebot_helpmebot\src\Helpmebot\IRC\NetworkClient.cs,WriterThreadTask,The following statement contains a magic number: while (this.client.Connected)              {                  string item = null;                    // grab an item from the queue if we can                  lock (this.sendQueueLock)                  {                      if (this.sendQueue.Count > 0)                      {                          item = this.sendQueue.Dequeue();                      }                  }                    if (item == null)                  {                      // Wait here for an item to be added to the queue                      this.writerThreadResetEvent.WaitOne();                  }                  else                  {                      if (string.IsNullOrEmpty(item))                      {                          continue;                      }                        this.outboundLogger.Debug(item);                      this.Writer.WriteLine(item);                      this.Writer.Flush();                        // Flood protection                      Thread.Sleep(500);                  }              }
Magic Number,helpmebot6.Commands,Accdeploy,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\AccBot\AccDeploy.cs,ExecuteCommand,The following statement contains a magic number: using (Stream data = HttpRequest.Get(requestUri' 1000 * 30 /* 30 sec timeout */).ToStream())              {                  var r = new StreamReader(data);                    var crh = new CommandResponseHandler();                    foreach (var x in r.ReadToEnd().Split('\n'' '\r'))                  {                      crh.Respond(x);                  }                    return crh;              }
Magic Number,helpmebot6.Commands,Accdeploy,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\AccBot\AccDeploy.cs,ExecuteCommand,The following statement contains a magic number: using (Stream data = HttpRequest.Get(requestUri' 1000 * 30 /* 30 sec timeout */).ToStream())              {                  var r = new StreamReader(data);                    var crh = new CommandResponseHandler();                    foreach (var x in r.ReadToEnd().Split('\n'' '\r'))                  {                      crh.Respond(x);                  }                    return crh;              }
Magic Number,helpmebot6.Commands,Access,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Access.cs,ExecuteCommand,The following statement contains a magic number: if (this.Arguments.Length > 1)              {                  switch (this.Arguments[0].ToLower())                  {                      case "add":                          if (this.Arguments.Length > 2)                          {                              var aL = LegacyUser.UserRights.Normal;                                switch (this.Arguments[2].ToLower())                              {                                  case "superuser":                                      aL = LegacyUser.UserRights.Superuser;                                      break;                                  case "advanced":                                      aL = LegacyUser.UserRights.Advanced;                                      break;                                  case "semi-ignored":                                      aL = LegacyUser.UserRights.Semiignored;                                      break;                                  case "semiignored":                                      aL = LegacyUser.UserRights.Semiignored;                                      break;                                  case "ignored":                                      aL = LegacyUser.UserRights.Ignored;                                      break;                                  case "normal":                                      aL = LegacyUser.UserRights.Normal;                                      break;                              }                                var s = this.Arguments[1];                              var legacyUser = LegacyUser.NewFromString(s);                                if (legacyUser == null)                              {                                  string[] errArgs = {s};                                  crh.Respond(                                      messageService.RetrieveMessage("cmdAccessInvalidUser"' this.Channel' errArgs));                                  return crh;                              }                                if (!s.Contains("@") || !s.Contains("!"))                              {                                  string[] errArgs = {s};                                  crh.Respond(                                      messageService.RetrieveMessage("cmdAccessInvalidNuh"' this.Channel' errArgs));                                  return crh;                              }                                crh = this.AddAccessEntry(legacyUser' aL);                          }                          else                          {                              string[] messageParameters =                              {                                  "access add"' "3"'                                  this.Arguments.Length.ToString(CultureInfo.InvariantCulture)                              };                              return                                  new CommandResponseHandler(                                      messageService.RetrieveMessage(                                          "notEnoughParameters"'                                          this.Channel'                                          messageParameters));                          }                            break;                      case "del":                          crh = this.DeleteAccessEntry(int.Parse(this.Arguments[1]));                          break;                      default:                          crh = new CommandResponseHandler();                          crh.Respond(                              messageService.RetrieveMessage("CmdAccessInvalidSubcommand"' this.Channel' new string[0]));                          break;                  }                    /*                   * add <source> <level>                   *                   * del <id>                   */              }              else              {                  string[] messageParameters =                      {                          "access"' "2"'                           this.Arguments.Length.ToString(CultureInfo.InstalledUICulture)                      };                  return                      new CommandResponseHandler(                          messageService.RetrieveMessage("notEnoughParameters"' this.Channel' messageParameters));              }
Magic Number,helpmebot6.Commands,Access,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Access.cs,ExecuteCommand,The following statement contains a magic number: if (this.Arguments.Length > 1)              {                  switch (this.Arguments[0].ToLower())                  {                      case "add":                          if (this.Arguments.Length > 2)                          {                              var aL = LegacyUser.UserRights.Normal;                                switch (this.Arguments[2].ToLower())                              {                                  case "superuser":                                      aL = LegacyUser.UserRights.Superuser;                                      break;                                  case "advanced":                                      aL = LegacyUser.UserRights.Advanced;                                      break;                                  case "semi-ignored":                                      aL = LegacyUser.UserRights.Semiignored;                                      break;                                  case "semiignored":                                      aL = LegacyUser.UserRights.Semiignored;                                      break;                                  case "ignored":                                      aL = LegacyUser.UserRights.Ignored;                                      break;                                  case "normal":                                      aL = LegacyUser.UserRights.Normal;                                      break;                              }                                var s = this.Arguments[1];                              var legacyUser = LegacyUser.NewFromString(s);                                if (legacyUser == null)                              {                                  string[] errArgs = {s};                                  crh.Respond(                                      messageService.RetrieveMessage("cmdAccessInvalidUser"' this.Channel' errArgs));                                  return crh;                              }                                if (!s.Contains("@") || !s.Contains("!"))                              {                                  string[] errArgs = {s};                                  crh.Respond(                                      messageService.RetrieveMessage("cmdAccessInvalidNuh"' this.Channel' errArgs));                                  return crh;                              }                                crh = this.AddAccessEntry(legacyUser' aL);                          }                          else                          {                              string[] messageParameters =                              {                                  "access add"' "3"'                                  this.Arguments.Length.ToString(CultureInfo.InvariantCulture)                              };                              return                                  new CommandResponseHandler(                                      messageService.RetrieveMessage(                                          "notEnoughParameters"'                                          this.Channel'                                          messageParameters));                          }                            break;                      case "del":                          crh = this.DeleteAccessEntry(int.Parse(this.Arguments[1]));                          break;                      default:                          crh = new CommandResponseHandler();                          crh.Respond(                              messageService.RetrieveMessage("CmdAccessInvalidSubcommand"' this.Channel' new string[0]));                          break;                  }                    /*                   * add <source> <level>                   *                   * del <id>                   */              }              else              {                  string[] messageParameters =                      {                          "access"' "2"'                           this.Arguments.Length.ToString(CultureInfo.InstalledUICulture)                      };                  return                      new CommandResponseHandler(                          messageService.RetrieveMessage("notEnoughParameters"' this.Channel' messageParameters));              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Afcbacklog,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Afcbacklog.cs,ExecuteCommand,The following statement contains a magic number: if (size == 0)              {                  // TODO: push these to the wiki?                  return new CommandResponseHandler("There are no new AfC submissions.");              }              else if (size < 200)              {                  return new CommandResponseHandler("AfC is clearing out.");              }              else if (size < 400)              {                  return new CommandResponseHandler("There is a normal backlog at AfC.");              }              else if (size < 650)              {                  return new CommandResponseHandler("AfC is semi-backlogged at the moment.");              }              else if (size < 900)              {                  return new CommandResponseHandler("There is a backlog at AfC.");              }              else if (size < 1200)              {                  return new CommandResponseHandler("AfC is highly backlogged at the moment.");              }              else if (size < 2000)              {                  return new CommandResponseHandler("There is a severe backlog at AfC.");              }              else if (size < 4000)              {                  return new CommandResponseHandler("AfC is critically backlogged.");              }              else if (size < 10000)              {                  return new CommandResponseHandler("AfC is out of order.");              }              else              {                  return new CommandResponseHandler(                      "Unknown error occurred' current status of AfC is unknown."'                       CommandResponseDestination.PrivateMessage);              }
Magic Number,helpmebot6.Commands,Age,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Age.cs,ExecuteCommand,The following statement contains a magic number: if (time.Equals(new TimeSpan(0)))              {                  string[] messageParameters = { userName };                  message = messageService.RetrieveMessage("noSuchUser"' this.Channel' messageParameters);              }              else              {                  string[] messageParameters =                      {                          userName' (time.Days / 365).ToString(CultureInfo.InvariantCulture)'                          (time.Days % 365).ToString(CultureInfo.InvariantCulture)'                          time.Hours.ToString(CultureInfo.InvariantCulture)'                          time.Minutes.ToString(CultureInfo.InvariantCulture)'                          time.Seconds.ToString(CultureInfo.InvariantCulture)                      };                  message = messageService.RetrieveMessage("cmdAge"' this.Channel' messageParameters);              }
Magic Number,helpmebot6.Commands,Age,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Age.cs,ExecuteCommand,The following statement contains a magic number: if (time.Equals(new TimeSpan(0)))              {                  string[] messageParameters = { userName };                  message = messageService.RetrieveMessage("noSuchUser"' this.Channel' messageParameters);              }              else              {                  string[] messageParameters =                      {                          userName' (time.Days / 365).ToString(CultureInfo.InvariantCulture)'                          (time.Days % 365).ToString(CultureInfo.InvariantCulture)'                          time.Hours.ToString(CultureInfo.InvariantCulture)'                          time.Minutes.ToString(CultureInfo.InvariantCulture)'                          time.Seconds.ToString(CultureInfo.InvariantCulture)                      };                  message = messageService.RetrieveMessage("cmdAge"' this.Channel' messageParameters);              }
Magic Number,helpmebot6.Commands,Blockuser,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Blockuser.cs,ExecuteCommand,The following statement contains a magic number: if (name.Contains(":"))              {                  string origname = name;                    string[] parts = name.Split(new[] { ':' }' 2);                  name = parts[1];                  prefix = parts[0];                    if (this.CommandServiceHelper.InterwikiPrefixRepository.GetByPrefix(prefix) == null)                  {                      name = origname;                      prefix = string.Empty;                  }                  else                  {                      prefix += ":";                  }              }
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: var ip = new byte[4];
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[0] = Convert.ToByte(input.Substring(0' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[0] = Convert.ToByte(input.Substring(0' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[1] = Convert.ToByte(input.Substring(2' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[1] = Convert.ToByte(input.Substring(2' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[1] = Convert.ToByte(input.Substring(2' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[2] = Convert.ToByte(input.Substring(4' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[2] = Convert.ToByte(input.Substring(4' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[2] = Convert.ToByte(input.Substring(4' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[2] = Convert.ToByte(input.Substring(4' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[3] = Convert.ToByte(input.Substring(6' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[3] = Convert.ToByte(input.Substring(6' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[3] = Convert.ToByte(input.Substring(6' 2)' 16);
Magic Number,helpmebot6.Commands,Decode,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Decode.cs,GetIpAddressFromHex,The following statement contains a magic number: ip[3] = Convert.ToByte(input.Substring(6' 2)' 16);
Magic Number,helpmebot6.Commands,Learn,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Learn.cs,ExecuteCommand,The following statement contains a magic number: if (args.Count > 3)              {                  if (args[0] == "@action")                  {                      action = true;                      args.PopFromFront();                  }              }
Magic Number,helpmebot6.Commands,Learn,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Learn.cs,ExecuteCommand,The following statement contains a magic number: if (args.Count >= 2)              {                  var keywordName = args.PopFromFront();                  string message;                    try                  {                      this.keywordService.Create(keywordName' args.Implode()' action);                      message = messageService.RetrieveMessage("cmdLearnDone"' this.Channel' null);                  }                  catch (Exception ex)                  {                      message = messageService.RetrieveMessage("cmdLearnError"' this.Channel' null);                      this.Log.Error("Error learning command"' ex);                  }                    this.CommandServiceHelper.Client.SendNotice(this.Source.Nickname' message);              }              else              {                  string[] messageParameters = { "learn"' "2"' args.Count.ToString(CultureInfo.InvariantCulture) };                  this.CommandServiceHelper.Client.SendNotice(                      this.Source.Nickname'                      messageService.RetrieveMessage(Messages.NotEnoughParameters' this.Channel' messageParameters));              }
Magic Number,helpmebot6.Commands,Registration,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Registration.cs,GetRegistrationDate,The following statement contains a magic number: using (var xmlFragment = HttpRequest.Get(uri).ToStream())              {                  var creader = new XmlTextReader(xmlFragment);                  do                  {                      creader.Read();                  }                  while (creader.Name != "user");                    string apiRegDate = creader.GetAttribute("registration");                  if (apiRegDate != null)                  {                      if (apiRegDate == string.Empty)                      {                          var registrationDate = new DateTime(1970' 1' 1' 0' 0' 0);                          RegistrationCache.Add(baseWiki + "||" + username' registrationDate);                          return registrationDate;                      }                        DateTime regDate = DateTime.Parse(apiRegDate);                      RegistrationCache.Add(baseWiki + "||" + username' regDate);                      return regDate;                  }              }
Magic Number,helpmebot6.Commands,Rights,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Rights.cs,GetRights,The following statement contains a magic number: using (var stream = HttpRequest.Get(uri).ToStream())              {                  var creader = new XmlTextReader(stream);                  do                  {                      creader.Read();                  }                  while (creader.Name != "user");                    creader.Read();                  if (creader.Name == "groups")                  {                      // the start of the group list                      do                      {                          creader.Read();                          string rightsList = creader.ReadString();                          if (!(rightsList == string.Empty || rightsList == "*"))                          {                              returnStr = returnStr + rightsList + "' ";                          }                            rightsCount = rightsCount + 1;                      }                      while (creader.Name == "g"); // each group should be added                  }                    returnStr = rightsCount == 0 ? string.Empty : returnStr.Remove(returnStr.Length - 2);                    return returnStr;              }
Magic Number,helpmebot6.Commands,Set,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Set.cs,ExecuteCommand,The following statement contains a magic number: if (this.Arguments[0] == "global")              {                  LegacyConfig.Singleton()[this.Arguments[1]] = this.Arguments[2];              }              else              {                  LegacyConfig.Singleton()[this.Arguments[1]' this.Arguments[0]] = this.Arguments[2];              }
Magic Number,helpmebot6.Commands,Set,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Set.cs,ExecuteCommand,The following statement contains a magic number: if (this.Arguments[0] == "global")              {                  LegacyConfig.Singleton()[this.Arguments[1]] = this.Arguments[2];              }              else              {                  LegacyConfig.Singleton()[this.Arguments[1]' this.Arguments[0]] = this.Arguments[2];              }
Magic Number,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,SendShortUserInfo,The following statement contains a magic number: var age = string.Format("{0}y {1}d {2}h {3}m"'                  (userInformation.UserAge.Days / 365).ToString(CultureInfo.InvariantCulture)'                  (userInformation.UserAge.Days % 365).ToString(CultureInfo.InvariantCulture)'                  userInformation.UserAge.Hours.ToString(CultureInfo.InvariantCulture)'                  userInformation.UserAge.Minutes.ToString(CultureInfo.InvariantCulture));
Magic Number,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,SendShortUserInfo,The following statement contains a magic number: var age = string.Format("{0}y {1}d {2}h {3}m"'                  (userInformation.UserAge.Days / 365).ToString(CultureInfo.InvariantCulture)'                  (userInformation.UserAge.Days % 365).ToString(CultureInfo.InvariantCulture)'                  userInformation.UserAge.Hours.ToString(CultureInfo.InvariantCulture)'                  userInformation.UserAge.Minutes.ToString(CultureInfo.InvariantCulture));
Magic Number,helpmebot6.Commands,Userinfo,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\UserInfo.cs,SendShortUserInfo,The following statement contains a magic number: string[] messageParameters =                  {                      userInformation.UserName'                      urlShorteningService.Shorten(userInformation.UserPage)'                      urlShorteningService.Shorten(userInformation.TalkPage)'                      urlShorteningService.Shorten(userInformation.UserContributions)'                      urlShorteningService.Shorten(userInformation.UserBlockLog)'                      userInformation.UserGroups'                      age'                      userInformation.RegistrationDate.ToString("u")'                      Math.Round(userInformation.EditRate' 3).ToString(CultureInfo.InvariantCulture)'                      userInformation.EditCount.ToString(CultureInfo.InvariantCulture)'                      userInformation.BlockInformation == string.Empty ? string.Empty : "| BLOCKED"                  };
Magic Number,Helpmebot.Legacy.Database,LegacyDatabase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Database\LegacyDatabase.cs,RunConnectionTest,The following statement contains a magic number: int sleepTime = 1000;
Magic Number,Helpmebot.Legacy.Database,LegacyDatabase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Database\LegacyDatabase.cs,RunConnectionTest,The following statement contains a magic number: while (!connectionOk || totalTimeSlept >= 180 /*seconds*/ * 1000 /*transform to milliseconds*/)              {                  if (!firstTime)                  {                      this.Log.Warn("Reconnecting to database...");                        this.Connect();                        Thread.Sleep(sleepTime);                      totalTimeSlept += sleepTime;                        sleepTime = (int)(sleepTime * 1.5) > int.MaxValue ? sleepTime : (int)(sleepTime * 1.5);                  }                    while (this.connection.State == ConnectionState.Connecting)                  {                      Thread.Sleep(100);                      totalTimeSlept += 100;                  }                    connectionOk = (this.connection.State == ConnectionState.Open)                                 || (this.connection.State == ConnectionState.Fetching)                                 || (this.connection.State == ConnectionState.Executing);                    firstTime = false;              }
Magic Number,Helpmebot.Legacy.Database,LegacyDatabase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Database\LegacyDatabase.cs,RunConnectionTest,The following statement contains a magic number: while (!connectionOk || totalTimeSlept >= 180 /*seconds*/ * 1000 /*transform to milliseconds*/)              {                  if (!firstTime)                  {                      this.Log.Warn("Reconnecting to database...");                        this.Connect();                        Thread.Sleep(sleepTime);                      totalTimeSlept += sleepTime;                        sleepTime = (int)(sleepTime * 1.5) > int.MaxValue ? sleepTime : (int)(sleepTime * 1.5);                  }                    while (this.connection.State == ConnectionState.Connecting)                  {                      Thread.Sleep(100);                      totalTimeSlept += 100;                  }                    connectionOk = (this.connection.State == ConnectionState.Open)                                 || (this.connection.State == ConnectionState.Fetching)                                 || (this.connection.State == ConnectionState.Executing);                    firstTime = false;              }
Magic Number,Helpmebot.Legacy.Database,LegacyDatabase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Database\LegacyDatabase.cs,RunConnectionTest,The following statement contains a magic number: while (!connectionOk || totalTimeSlept >= 180 /*seconds*/ * 1000 /*transform to milliseconds*/)              {                  if (!firstTime)                  {                      this.Log.Warn("Reconnecting to database...");                        this.Connect();                        Thread.Sleep(sleepTime);                      totalTimeSlept += sleepTime;                        sleepTime = (int)(sleepTime * 1.5) > int.MaxValue ? sleepTime : (int)(sleepTime * 1.5);                  }                    while (this.connection.State == ConnectionState.Connecting)                  {                      Thread.Sleep(100);                      totalTimeSlept += 100;                  }                    connectionOk = (this.connection.State == ConnectionState.Open)                                 || (this.connection.State == ConnectionState.Fetching)                                 || (this.connection.State == ConnectionState.Executing);                    firstTime = false;              }
Magic Number,Helpmebot.Legacy.Database,LegacyDatabase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Database\LegacyDatabase.cs,RunConnectionTest,The following statement contains a magic number: while (!connectionOk || totalTimeSlept >= 180 /*seconds*/ * 1000 /*transform to milliseconds*/)              {                  if (!firstTime)                  {                      this.Log.Warn("Reconnecting to database...");                        this.Connect();                        Thread.Sleep(sleepTime);                      totalTimeSlept += sleepTime;                        sleepTime = (int)(sleepTime * 1.5) > int.MaxValue ? sleepTime : (int)(sleepTime * 1.5);                  }                    while (this.connection.State == ConnectionState.Connecting)                  {                      Thread.Sleep(100);                      totalTimeSlept += 100;                  }                    connectionOk = (this.connection.State == ConnectionState.Open)                                 || (this.connection.State == ConnectionState.Fetching)                                 || (this.connection.State == ConnectionState.Executing);                    firstTime = false;              }
Magic Number,Helpmebot.Legacy.Database,LegacyDatabase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Database\LegacyDatabase.cs,RunConnectionTest,The following statement contains a magic number: while (!connectionOk || totalTimeSlept >= 180 /*seconds*/ * 1000 /*transform to milliseconds*/)              {                  if (!firstTime)                  {                      this.Log.Warn("Reconnecting to database...");                        this.Connect();                        Thread.Sleep(sleepTime);                      totalTimeSlept += sleepTime;                        sleepTime = (int)(sleepTime * 1.5) > int.MaxValue ? sleepTime : (int)(sleepTime * 1.5);                  }                    while (this.connection.State == ConnectionState.Connecting)                  {                      Thread.Sleep(100);                      totalTimeSlept += 100;                  }                    connectionOk = (this.connection.State == ConnectionState.Open)                                 || (this.connection.State == ConnectionState.Fetching)                                 || (this.connection.State == ConnectionState.Executing);                    firstTime = false;              }
Magic Number,Helpmebot.Legacy.Database,LegacyDatabase,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Database\LegacyDatabase.cs,RunConnectionTest,The following statement contains a magic number: while (!connectionOk || totalTimeSlept >= 180 /*seconds*/ * 1000 /*transform to milliseconds*/)              {                  if (!firstTime)                  {                      this.Log.Warn("Reconnecting to database...");                        this.Connect();                        Thread.Sleep(sleepTime);                      totalTimeSlept += sleepTime;                        sleepTime = (int)(sleepTime * 1.5) > int.MaxValue ? sleepTime : (int)(sleepTime * 1.5);                  }                    while (this.connection.State == ConnectionState.Connecting)                  {                      Thread.Sleep(100);                      totalTimeSlept += 100;                  }                    connectionOk = (this.connection.State == ConnectionState.Open)                                 || (this.connection.State == ConnectionState.Fetching)                                 || (this.connection.State == ConnectionState.Executing);                    firstTime = false;              }
Magic Number,Helpmebot.Legacy.Model,LegacyUser,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Model\LegacyUser.cs,NewFromString,The following statement contains a magic number: try              {                  if (source.Contains("@") && source.Contains("!"))                  {                      char[] splitSeparators = { '!'' '@' };                      string[] sourceSegment = source.Split(splitSeparators' 3);                      nick = sourceSegment[0];                      user = sourceSegment[1];                      host = sourceSegment[2];                  }                  else if (source.Contains("@"))                  {                      char[] splitSeparators = { '@' };                      string[] sourceSegment = source.Split(splitSeparators' 2);                      nick = sourceSegment[0];                      host = sourceSegment[1];                  }                  else                  {                      nick = source;                  }              }              catch (IndexOutOfRangeException ex)              {                  logger.Error(ex.Message' ex);              }
Magic Number,Helpmebot.Legacy.Model,LegacyUser,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Model\LegacyUser.cs,NewFromString,The following statement contains a magic number: try              {                  if (source.Contains("@") && source.Contains("!"))                  {                      char[] splitSeparators = { '!'' '@' };                      string[] sourceSegment = source.Split(splitSeparators' 3);                      nick = sourceSegment[0];                      user = sourceSegment[1];                      host = sourceSegment[2];                  }                  else if (source.Contains("@"))                  {                      char[] splitSeparators = { '@' };                      string[] sourceSegment = source.Split(splitSeparators' 2);                      nick = sourceSegment[0];                      host = sourceSegment[1];                  }                  else                  {                      nick = source;                  }              }              catch (IndexOutOfRangeException ex)              {                  logger.Error(ex.Message' ex);              }
Magic Number,Helpmebot.Legacy.Model,LegacyUser,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Model\LegacyUser.cs,NewFromString,The following statement contains a magic number: try              {                  if (source.Contains("@") && source.Contains("!"))                  {                      char[] splitSeparators = { '!'' '@' };                      string[] sourceSegment = source.Split(splitSeparators' 3);                      nick = sourceSegment[0];                      user = sourceSegment[1];                      host = sourceSegment[2];                  }                  else if (source.Contains("@"))                  {                      char[] splitSeparators = { '@' };                      string[] sourceSegment = source.Split(splitSeparators' 2);                      nick = sourceSegment[0];                      host = sourceSegment[1];                  }                  else                  {                      nick = source;                  }              }              catch (IndexOutOfRangeException ex)              {                  logger.Error(ex.Message' ex);              }
Magic Number,Helpmebot.Model,Keyword,C:\repos\helpmebot_helpmebot\src\Helpmebot\Model\Keyword.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = this.Name != null ? this.Name.GetHashCode() : 0;                  hashCode = (hashCode * 397) ^ (this.Response != null ? this.Response.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ this.Action.GetHashCode();                  return hashCode;              }
Magic Number,Helpmebot.Model,Keyword,C:\repos\helpmebot_helpmebot\src\Helpmebot\Model\Keyword.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = this.Name != null ? this.Name.GetHashCode() : 0;                  hashCode = (hashCode * 397) ^ (this.Response != null ? this.Response.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ this.Action.GetHashCode();                  return hashCode;              }
Magic Number,Helpmebot.Services,ModeMonitoringService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\ModeMonitoringService.cs,OnMessageReceived,The following statement contains a magic number: if (e.Message.Command == Numerics.BanListEntry)              {                  var parameters = e.Message.Parameters.ToList();                  this.ProcessBanListEntry(parameters[2]' parameters[1]' "b");              }
Magic Number,Helpmebot.Services,ModeMonitoringService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\ModeMonitoringService.cs,OnMessageReceived,The following statement contains a magic number: if (e.Message.Command == Numerics.QuietListEntry)              {                  var parameters = e.Message.Parameters.ToList();                  this.ProcessBanListEntry(parameters[3]' parameters[1]' "q");              }
Magic Number,Helpmebot.Services,ModeMonitoringService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\ModeMonitoringService.cs,OnMessageReceived,The following statement contains a magic number: if (e.Message.Command == Numerics.ExemptListEntry)              {                  var parameters = e.Message.Parameters.ToList();                  this.ProcessBanListEntry(parameters[2]' parameters[1]' "e");              }
Magic Number,Helpmebot.Services,MessageService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\MessageService.cs,RetrieveMessage,The following statement contains a magic number: if (builtString.StartsWith("#ACTION"))              {                  builtString = builtString.Substring(8).SetupForCtcp("ACTION");              }
Magic Number,Helpmebot.Monitoring,CategoryWatcher,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\CategoryWatcher.cs,WatcherThreadMethod,The following statement contains a magic number: try              {                  while (true)                  {                      this.logger.DebugFormat("Sleeping thread for {0} seconds"' this.SleepTime);                      int remaining = this.SleepTime * 1000;                        // iteratively sleep (yuck) until we've got less than a second of our sleep remaining - sounds like a good enough tolerance for me.                      while (remaining > 1000)                      {                          var millisecondsTimeout = remaining / 2;                          var stopwatch = Stopwatch.StartNew();                          Thread.Sleep(millisecondsTimeout);                          stopwatch.Stop();                            remaining -= (int)stopwatch.ElapsedMilliseconds;                          this.logger.DebugFormat("Thread has woken after {0}ms' with {1} ms remaining"' stopwatch.ElapsedMilliseconds' remaining);                      }                        this.logger.DebugFormat("Thread wakeup"' this.SleepTime);                                            try                      {                          var categoryCheckResult = this.DoCategoryCheck();                          IEnumerable<string> categoryResults = categoryCheckResult.ToList();                                                    if (categoryResults.Any())                          {                              var onCategoryHasItemsEvent = this.CategoryHasItemsEvent;                              if (onCategoryHasItemsEvent != null)                              {                                  onCategoryHasItemsEvent(this' new CategoryHasItemsEventArgs(categoryResults' this.key));                              }                          }                      }                      catch (WebException e)                      {                          this.logger.Warn(e.Message' e);                      }                                      }              }              catch (ThreadAbortException)              {                  EventHandler temp = this.ThreadFatalErrorEvent;                  if (temp != null)                  {                      temp(this' new EventArgs());                  }              }
Magic Number,Helpmebot.Monitoring,CategoryWatcher,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\CategoryWatcher.cs,WatcherThreadMethod,The following statement contains a magic number: try              {                  while (true)                  {                      this.logger.DebugFormat("Sleeping thread for {0} seconds"' this.SleepTime);                      int remaining = this.SleepTime * 1000;                        // iteratively sleep (yuck) until we've got less than a second of our sleep remaining - sounds like a good enough tolerance for me.                      while (remaining > 1000)                      {                          var millisecondsTimeout = remaining / 2;                          var stopwatch = Stopwatch.StartNew();                          Thread.Sleep(millisecondsTimeout);                          stopwatch.Stop();                            remaining -= (int)stopwatch.ElapsedMilliseconds;                          this.logger.DebugFormat("Thread has woken after {0}ms' with {1} ms remaining"' stopwatch.ElapsedMilliseconds' remaining);                      }                        this.logger.DebugFormat("Thread wakeup"' this.SleepTime);                                            try                      {                          var categoryCheckResult = this.DoCategoryCheck();                          IEnumerable<string> categoryResults = categoryCheckResult.ToList();                                                    if (categoryResults.Any())                          {                              var onCategoryHasItemsEvent = this.CategoryHasItemsEvent;                              if (onCategoryHasItemsEvent != null)                              {                                  onCategoryHasItemsEvent(this' new CategoryHasItemsEventArgs(categoryResults' this.key));                              }                          }                      }                      catch (WebException e)                      {                          this.logger.Warn(e.Message' e);                      }                                      }              }              catch (ThreadAbortException)              {                  EventHandler temp = this.ThreadFatalErrorEvent;                  if (temp != null)                  {                      temp(this' new EventArgs());                  }              }
Magic Number,Helpmebot.Monitoring,CategoryWatcher,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\CategoryWatcher.cs,WatcherThreadMethod,The following statement contains a magic number: try              {                  while (true)                  {                      this.logger.DebugFormat("Sleeping thread for {0} seconds"' this.SleepTime);                      int remaining = this.SleepTime * 1000;                        // iteratively sleep (yuck) until we've got less than a second of our sleep remaining - sounds like a good enough tolerance for me.                      while (remaining > 1000)                      {                          var millisecondsTimeout = remaining / 2;                          var stopwatch = Stopwatch.StartNew();                          Thread.Sleep(millisecondsTimeout);                          stopwatch.Stop();                            remaining -= (int)stopwatch.ElapsedMilliseconds;                          this.logger.DebugFormat("Thread has woken after {0}ms' with {1} ms remaining"' stopwatch.ElapsedMilliseconds' remaining);                      }                        this.logger.DebugFormat("Thread wakeup"' this.SleepTime);                                            try                      {                          var categoryCheckResult = this.DoCategoryCheck();                          IEnumerable<string> categoryResults = categoryCheckResult.ToList();                                                    if (categoryResults.Any())                          {                              var onCategoryHasItemsEvent = this.CategoryHasItemsEvent;                              if (onCategoryHasItemsEvent != null)                              {                                  onCategoryHasItemsEvent(this' new CategoryHasItemsEventArgs(categoryResults' this.key));                              }                          }                      }                      catch (WebException e)                      {                          this.logger.Warn(e.Message' e);                      }                                      }              }              catch (ThreadAbortException)              {                  EventHandler temp = this.ThreadFatalErrorEvent;                  if (temp != null)                  {                      temp(this' new EventArgs());                  }              }
Magic Number,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,CompileMessage,The following statement contains a magic number: if (items.Any())              {                  string listString = string.Empty;                  foreach (string item in items)                  {                      // Display [[]]'ied name of the page which requests help                      listString += "[[" + item + "]] ";                        // Display an http URL to the page' if desired                      if (shortenUrls)                      {                          string urlName = item.Replace(' '' '_');                            string uriString = LegacyConfig.Singleton()["wikiUrl"] + HttpUtility.UrlEncode(urlName);                          listString += this.urlShorteningService.Shorten(uriString);                      }                        if (showWaitTime)                      {                          var command =                              new MySqlCommand(                                  "SELECT item_entrytime FROM categoryitems WHERE item_name = @name and item_keyword = @keyword;");                            command.Parameters.AddWithValue("@name"' item);                          command.Parameters.AddWithValue("@keyword"' keyword);                            string insertDate = this.legacyDatabase.ExecuteScalarSelect(command);                          DateTime realInsertDate;                          if (!DateTime.TryParse(insertDate' out realInsertDate))                          {                              realInsertDate = DateTime.Now;                          }                            TimeSpan ts = DateTime.Now - realInsertDate;                            if (ts >= minimumWaitTime)                          {                              string[] messageparams =                                  {                                      ts.Hours.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.Minutes.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.Seconds.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.TotalDays >= 1                                          ? ((int)Math.Floor(ts.TotalDays)) + "d "                                          : string.Empty                                  };                              listString += this.messageService.RetrieveMessage(                                  "catWatcherWaiting"'                                   destination'                                   messageparams);                          }                      }                        // trailing space added as a hack because MediaWiki doesn't preserve the trailing space :(                      listString += this.messageService.RetrieveMessage("listSeparator"' destination' null) + " ";                  }                    listString = listString.TrimEnd(' '' ''');                  string pluralString = items.Count() == 1                                            ? this.messageService.RetrieveMessage(                                                keyword + "Singular"'                                                 destination'                                                 new[] { "keywordSingularDefault" })                                            : this.messageService.RetrieveMessage(                                                keyword + "Plural"'                                                 destination'                                                 new[] { "keywordPluralDefault" });                  string[] messageParams =                      {                          items.Count().ToString(CultureInfo.InvariantCulture)' pluralString'                           listString                      };                  message = this.messageService.RetrieveMessage(                      keyword + (showDelta ? "New" : string.Empty) + "HasItems"'                       destination'                       messageParams);              }              else              {                  string[] mp =                      {                          this.messageService.RetrieveMessage(                              keyword + "Plural"'                               destination'                               new[] { "keywordPluralDefault" })                      };                  message = this.messageService.RetrieveMessage(keyword + "NoItems"' destination' mp);              }
Magic Number,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,CompileMessage,The following statement contains a magic number: if (items.Any())              {                  string listString = string.Empty;                  foreach (string item in items)                  {                      // Display [[]]'ied name of the page which requests help                      listString += "[[" + item + "]] ";                        // Display an http URL to the page' if desired                      if (shortenUrls)                      {                          string urlName = item.Replace(' '' '_');                            string uriString = LegacyConfig.Singleton()["wikiUrl"] + HttpUtility.UrlEncode(urlName);                          listString += this.urlShorteningService.Shorten(uriString);                      }                        if (showWaitTime)                      {                          var command =                              new MySqlCommand(                                  "SELECT item_entrytime FROM categoryitems WHERE item_name = @name and item_keyword = @keyword;");                            command.Parameters.AddWithValue("@name"' item);                          command.Parameters.AddWithValue("@keyword"' keyword);                            string insertDate = this.legacyDatabase.ExecuteScalarSelect(command);                          DateTime realInsertDate;                          if (!DateTime.TryParse(insertDate' out realInsertDate))                          {                              realInsertDate = DateTime.Now;                          }                            TimeSpan ts = DateTime.Now - realInsertDate;                            if (ts >= minimumWaitTime)                          {                              string[] messageparams =                                  {                                      ts.Hours.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.Minutes.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.Seconds.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.TotalDays >= 1                                          ? ((int)Math.Floor(ts.TotalDays)) + "d "                                          : string.Empty                                  };                              listString += this.messageService.RetrieveMessage(                                  "catWatcherWaiting"'                                   destination'                                   messageparams);                          }                      }                        // trailing space added as a hack because MediaWiki doesn't preserve the trailing space :(                      listString += this.messageService.RetrieveMessage("listSeparator"' destination' null) + " ";                  }                    listString = listString.TrimEnd(' '' ''');                  string pluralString = items.Count() == 1                                            ? this.messageService.RetrieveMessage(                                                keyword + "Singular"'                                                 destination'                                                 new[] { "keywordSingularDefault" })                                            : this.messageService.RetrieveMessage(                                                keyword + "Plural"'                                                 destination'                                                 new[] { "keywordPluralDefault" });                  string[] messageParams =                      {                          items.Count().ToString(CultureInfo.InvariantCulture)' pluralString'                           listString                      };                  message = this.messageService.RetrieveMessage(                      keyword + (showDelta ? "New" : string.Empty) + "HasItems"'                       destination'                       messageParams);              }              else              {                  string[] mp =                      {                          this.messageService.RetrieveMessage(                              keyword + "Plural"'                               destination'                               new[] { "keywordPluralDefault" })                      };                  message = this.messageService.RetrieveMessage(keyword + "NoItems"' destination' mp);              }
Magic Number,Helpmebot.Monitoring,WatcherController,C:\repos\helpmebot_helpmebot\src\Helpmebot\Monitoring\WatcherController.cs,CompileMessage,The following statement contains a magic number: if (items.Any())              {                  string listString = string.Empty;                  foreach (string item in items)                  {                      // Display [[]]'ied name of the page which requests help                      listString += "[[" + item + "]] ";                        // Display an http URL to the page' if desired                      if (shortenUrls)                      {                          string urlName = item.Replace(' '' '_');                            string uriString = LegacyConfig.Singleton()["wikiUrl"] + HttpUtility.UrlEncode(urlName);                          listString += this.urlShorteningService.Shorten(uriString);                      }                        if (showWaitTime)                      {                          var command =                              new MySqlCommand(                                  "SELECT item_entrytime FROM categoryitems WHERE item_name = @name and item_keyword = @keyword;");                            command.Parameters.AddWithValue("@name"' item);                          command.Parameters.AddWithValue("@keyword"' keyword);                            string insertDate = this.legacyDatabase.ExecuteScalarSelect(command);                          DateTime realInsertDate;                          if (!DateTime.TryParse(insertDate' out realInsertDate))                          {                              realInsertDate = DateTime.Now;                          }                            TimeSpan ts = DateTime.Now - realInsertDate;                            if (ts >= minimumWaitTime)                          {                              string[] messageparams =                                  {                                      ts.Hours.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.Minutes.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.Seconds.ToString(CultureInfo.InvariantCulture).PadLeft(2' '0')'                                       ts.TotalDays >= 1                                          ? ((int)Math.Floor(ts.TotalDays)) + "d "                                          : string.Empty                                  };                              listString += this.messageService.RetrieveMessage(                                  "catWatcherWaiting"'                                   destination'                                   messageparams);                          }                      }                        // trailing space added as a hack because MediaWiki doesn't preserve the trailing space :(                      listString += this.messageService.RetrieveMessage("listSeparator"' destination' null) + " ";                  }                    listString = listString.TrimEnd(' '' ''');                  string pluralString = items.Count() == 1                                            ? this.messageService.RetrieveMessage(                                                keyword + "Singular"'                                                 destination'                                                 new[] { "keywordSingularDefault" })                                            : this.messageService.RetrieveMessage(                                                keyword + "Plural"'                                                 destination'                                                 new[] { "keywordPluralDefault" });                  string[] messageParams =                      {                          items.Count().ToString(CultureInfo.InvariantCulture)' pluralString'                           listString                      };                  message = this.messageService.RetrieveMessage(                      keyword + (showDelta ? "New" : string.Empty) + "HasItems"'                       destination'                       messageParams);              }              else              {                  string[] mp =                      {                          this.messageService.RetrieveMessage(                              keyword + "Plural"'                               destination'                               new[] { "keywordPluralDefault" })                      };                  message = this.messageService.RetrieveMessage(keyword + "NoItems"' destination' mp);              }
Magic Number,helpmebot6.Commands.CategoryWatcherCommand,Delay,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\CategoryWatcherCommand\Delay.cs,ExecuteCommand,The following statement contains a magic number: if (this.Arguments.Length > 2)              {                  // 2 or more args                  return WatcherController.Instance()                      .SetDelay(this.Arguments[0]' int.Parse(this.Arguments[2])' this.Channel);              }
Magic Number,helpmebot6.Commands.CategoryWatcherCommand,Delay,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\CategoryWatcherCommand\Delay.cs,ExecuteCommand,The following statement contains a magic number: if (this.Arguments.Length > 2)              {                  // 2 or more args                  return WatcherController.Instance()                      .SetDelay(this.Arguments[0]' int.Parse(this.Arguments[2])' this.Channel);              }
Magic Number,helpmebot6.Commands.CategoryWatcherCommand,Delay,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\CategoryWatcherCommand\Delay.cs,ExecuteCommand,The following statement contains a magic number: if (this.Arguments.Length == 2)              {                  int delay = WatcherController.Instance().GetDelay(this.Arguments[0]);                  string[] messageParams = { this.Arguments[0]' delay.ToString(CultureInfo.InvariantCulture) };                  string message = this.CommandServiceHelper.MessageService.RetrieveMessage(                      "catWatcherCurrentDelay"'                       this.Channel'                       messageParams);                  return new CommandResponseHandler(message);              }
Missing Default,Helpmebot.Background,NotificationBackgroundService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Background\NotificationBackgroundService.cs,TimerOnElapsed,The following switch statement is missing a default case: switch (notification.Type)                      {                          case 1:                              destination = "#wikipedia-en-accounts";                              break;                            case 2:                              destination = "#wikipedia-en-accounts-devs";                              break;                      }
Missing Default,helpmebot6.Commands,Access,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Access.cs,ExecuteCommand,The following switch statement is missing a default case: switch (this.Arguments[2].ToLower())                              {                                  case "superuser":                                      aL = LegacyUser.UserRights.Superuser;                                      break;                                  case "advanced":                                      aL = LegacyUser.UserRights.Advanced;                                      break;                                  case "semi-ignored":                                      aL = LegacyUser.UserRights.Semiignored;                                      break;                                  case "semiignored":                                      aL = LegacyUser.UserRights.Semiignored;                                      break;                                  case "ignored":                                      aL = LegacyUser.UserRights.Ignored;                                      break;                                  case "normal":                                      aL = LegacyUser.UserRights.Normal;                                      break;                              }
Missing Default,helpmebot6.Commands,Blockmonitor,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Blockmonitor.cs,ExecuteCommand,The following switch statement is missing a default case: switch (mode.ToLower())              {                  case "add":                      this.AddMode(argumentsList' response);                      break;                  case "del":                  case "delete":                  case "remove":                      this.DeleteMode(argumentsList' response);                      break;              }
Missing Default,helpmebot6.Commands,Autolink,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Autolink.cs,ExecuteCommand,The following switch statement is missing a default case: switch (args[0].ToLower())                  {                      case "enable":                          newValue = "true";                          break;                      case "disable":                          newValue = "false";                          break;                      case "global":                          newValue = "global";                          break;                  }
Missing Default,helpmebot6.Commands,Page,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Page.cs,ExecuteCommand,The following switch statement is missing a default case: switch (xtr.Name)                          {                              case "r":                                  // redirect!                                  // <r from="Sausages" to="Sausage" />                                  redirects = xtr.GetAttribute("from");                                  break;                              case "page":                                  if (xtr.GetAttribute("missing") != null)                                  {                                      var msg = messageService.RetrieveMessage("pageMissing"' this.Channel' null);                                      return new CommandResponseHandler(msg);                                  }                                    title = xtr.GetAttribute("title");                                  touched = DateTime.Parse(xtr.GetAttribute("touched"));                                    break;                              case "rev":                                  // user' comment                                  // <rev user="RjwilmsiBot" comment="..." />                                  user = xtr.GetAttribute("user");                                  comment = xtr.GetAttribute("comment");                                  break;                              case "pr":                                  // protections                                    // <pr type="edit" level="autoconfirmed" expiry="2010-06-30T18:36:52Z" />                                  string time = xtr.GetAttribute("expiry");                                  protection.Add(                                      new PageProtection(                                          xtr.GetAttribute("type")'                                          xtr.GetAttribute("level")'                                          time == "infinity" ? DateTime.MaxValue : DateTime.Parse(time)));                                  break;                          }
Missing Default,helpmebot6.Commands,Silence,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Silence.cs,ExecuteCommand,The following switch statement is missing a default case: switch (args[0].ToLower())                  {                      case "enable":                          newValue = "true";                          break;                      case "disable":                          newValue = "false";                          break;                      case "global":                          newValue = "global";                          break;                  }
Missing Default,helpmebot6.Commands,Welcomer,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\Commands\Welcomer.cs,ExecuteCommand,The following switch statement is missing a default case: switch (mode.ToLower())              {                  case "enable":                  case "disable":                      response.Respond(                          this.CommandServiceHelper.MessageService.RetrieveMessage("Welcomer-ObsoleteOption"' this.Channel' new[] { mode })'                          CommandResponseDestination.PrivateMessage);                      break;                  case "add":                      this.AddMode(argumentsList' response);                      break;                  case "del":                  case "delete":                  case "remove":                      this.DeleteMode(argumentsList' response);                      break;                  case "list":                      this.ListMode(response);                      break;              }
Missing Default,Helpmebot.Model.ModeMonitoring,ModeChanges,C:\repos\helpmebot_helpmebot\src\Helpmebot\Model\ModeMonitoring\ModeChanges.cs,FromChangeList,The following switch statement is missing a default case: switch (c)                  {                      case '+':                          adding = true;                          break;                      case '-':                          adding = false;                          break;                      case 'o':                          var op = modeParameters.First();                          modeParameters.RemoveAt(0);                          if (adding)                          {                              changes.Ops.Add(op);                          }                          else                          {                              changes.Deops.Add(op);                          }                            break;                      case 'b':                          var ban = modeParameters.First();                          modeParameters.RemoveAt(0);                          if (adding)                          {                              changes.Bans.Add(ban);                          }                          else                          {                              changes.Unbans.Add(ban);                          }                            break;                      case 'q':                          var quiet = modeParameters.First();                          modeParameters.RemoveAt(0);                          if (adding)                          {                              changes.Quiets.Add(quiet);                          }                          else                          {                              changes.Unquiets.Add(quiet);                          }                            break;                      case 'e':                          var exempt = modeParameters.First();                          modeParameters.RemoveAt(0);                          if (adding)                          {                              changes.Exempts.Add(exempt);                          }                          else                          {                              changes.Unexempts.Add(exempt);                          }                            break;                      case 'z':                          changes.ReducedModeration = adding;                          break;                      case 'm':                          changes.Moderated = adding;                          break;                      case 'r':                          changes.RegisteredOnly = adding;                          break;                      case 'f':                      case 'j':                      case 'l':                      case 'k':                          modeParameters.RemoveAt(0);                          break;                  }
Missing Default,Helpmebot.Services.Geolocation,IpInfoDbGeoloationService,C:\repos\helpmebot_helpmebot\src\Helpmebot\Services\Geolocation\IpInfoDbGeoloationService.cs,GetLocation,The following switch statement is missing a default case: switch (xtr.Name)                      {                          case "statusCode":                              result.Status = xtr.ReadElementContentAsString();                              break;                          case "countryCode":                              result.CountryCode = xtr.ReadElementContentAsString();                              break;                          case "countryName":                              result.Country = xtr.ReadElementContentAsString();                              break;                          case "regionName":                              result.Region = xtr.ReadElementContentAsString();                              break;                          case "cityName":                              result.City = xtr.ReadElementContentAsString();                              break;                          case "zipCode":                              result.ZipPostalCode = xtr.ReadElementContentAsString();                              break;                          case "latitude":                              result.Latitude = xtr.ReadElementContentAsFloat();                              break;                          case "longitude":                              result.Longitude = xtr.ReadElementContentAsFloat();                              break;                      }
Missing Default,Helpmebot.Legacy,LegacyCommandParser,C:\repos\helpmebot_helpmebot\src\Helpmebot\Legacy\LegacyCommandParser.cs,HandleCommandResponseHandler,The following switch statement is missing a default case: switch (item.Destination)                      {                          case CommandResponseDestination.Default:                              if (this.OverrideBotSilence || LegacyConfig.Singleton()["silence"' destination] != "true")                              {                                  irc1.SendMessage(destination' message);                              }                                break;                          case CommandResponseDestination.ChannelDebug:                              irc1.SendMessage(this.commandServiceHelper.ConfigurationHelper.CoreConfiguration.DebugChannel' message);                              break;                          case CommandResponseDestination.PrivateMessage:                              irc1.SendMessage(source.Nickname' message);                              break;                      }
