Implementation smell,Namespace,Class,File,Method,Description
Long Method,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The method has 76 lines of code.
Long Method,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,processCOM,The method has 60 lines of code.
Long Method,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The method has 326 lines of code.
Long Method,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The method has 147 lines of code.
Long Method,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The method has 60 lines of code.
Complex Method,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,Cyclomatic complexity of the method is 12
Complex Method,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,Cyclomatic complexity of the method is 14
Complex Method,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,processCOM,Cyclomatic complexity of the method is 14
Complex Method,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,Cyclomatic complexity of the method is 38
Complex Method,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,Cyclomatic complexity of the method is 109
Complex Method,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,Cyclomatic complexity of the method is 54
Complex Method,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetListOfActivatedEngines,Cyclomatic complexity of the method is 7
Long Statement,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,HandShake,The length of the statement  "	Debug.Log ("KSPSerialIO: Handshake received - " + HPacket.M1.ToString () + HPacket.M2.ToString () + HPacket.M3.ToString ()); " is 124.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "						KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ()); " is 137.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "						KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude; " is 170.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "			KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z); " is 127.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "			KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x); " is 129.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "				KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position); " is 157.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "				KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode); " is 135.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "			//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString()); " is 131.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "			//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString()); " is 137.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "                    ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +" is 120.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "                    ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());" is 141.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "                    ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());" is 147.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "						ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible"); " is 124.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The length of the statement  "			if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) { " is 204.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,updateHeadingPitchRollField,The length of the statement  "	north = Vector3d.Exclude (up' (v.mainBody.position + v.mainBody.transform.up * (float)v.mainBody.Radius) - CoM).normalized; " is 123.
Long Statement,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,updateHeadingPitchRollField,The length of the statement  "	return Quaternion.Inverse (Quaternion.Euler (90' 0' 0) * Quaternion.Inverse (v.GetTransform ().rotation) * rotationSurface); " is 124.
Complex Conditional,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,ProspectForResource,The conditional expression  "attachNode.attachedPart != null //if there is a part attached here  && attachNode.nodeType == AttachNode.NodeType.Stack //and the attached part is stacked (rather than surface mounted)  && (attachNode.attachedPart.fuelCrossFeed//and the attached part allows fuel flow  ) && !(part.NoCrossFeedNodeKey.Length > 0 //and this part does not forbid fuel flow  && attachNode.id.Contains (part.NoCrossFeedNodeKey))"  is complex.
Complex Conditional,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,ProspectForResourceMax,The conditional expression  "attachNode.attachedPart != null //if there is a part attached here  && attachNode.nodeType == AttachNode.NodeType.Stack //and the attached part is stacked (rather than surface mounted)  && (attachNode.attachedPart.fuelCrossFeed//and the attached part allows fuel flow  ) && !(part.NoCrossFeedNodeKey.Length > 0 //and this part does not forbid fuel flow  && attachNode.id.Contains (part.NoCrossFeedNodeKey))"  is complex.
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,sendPacket,The following statement contains a magic number: Payload.CopyTo (Packet' 3);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,sendPacket,The following statement contains a magic number: Packet [2] = size;  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Begin,The following statement contains a magic number: Port = new SerialPort (PortNumber' SettingsNStuff.BaudRate' Parity.None' 8' StopBits.One);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Begin,The following statement contains a magic number: Port.ReceivedBytesThreshold = 3;  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,initializeDataPackets,The following statement contains a magic number: HPacket.M2 = 2;  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,initializeDataPackets,The following statement contains a magic number: HPacket.M3 = 3;  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,initializeDataPackets,The following statement contains a magic number: VControls.ControlGroup = new Boolean[11];  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,initializeDataPackets,The following statement contains a magic number: VControlsOld.ControlGroup = new Boolean[11];  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (DisplayFound) {  	Debug.Log ("KSPSerialIO: running...");  	Begin ();  } else {  	Debug.Log ("KSPSerialIO: Version 0.19.0");  	Debug.Log ("KSPSerialIO: Getting serial ports...");  	Debug.Log ("KSPSerialIO: Output packet size: " + Marshal.SizeOf (VData).ToString () + "/255");  	initializeDataPackets ();  	try {  		//Use registry hack to get a list of serial ports until we get system.io.ports  		RegistryKey SerialCOMSKey = Registry.LocalMachine.OpenSubKey (@"HARDWARE\\DEVICEMAP\\SERIALCOMM\\");  		Begin ();  		//print("KSPSerialIO: receive threshold " + Port.ReceivedBytesThreshold.ToString());  		if (SerialCOMSKey == null) {  			Debug.Log ("KSPSerialIO: Dude do you even win32 serial port??");  		} else {  			String[] realports = SerialCOMSKey.GetValueNames ();  			// get list of all serial devices  			String[] names = new string[realports.Length + 1];  			// make a new list with 1 extra' we put the default port first  			realports.CopyTo (names' 1);  			Debug.Log ("KSPSerialIO: Found " + names.Length.ToString () + " serial ports");  			//look through all found ports for our display  			int j = 0;  			foreach (string PortName in names) {  				if (j == 0)// try default port first  				 {  					PortNumber = SettingsNStuff.DefaultPort;  					Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  				} else {  					PortNumber = (string)SerialCOMSKey.GetValue (PortName);  					Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  				}  				Port.PortName = PortNumber;  				j++;  				if (!Port.IsOpen) {  					try {  						Port.Open ();  					} catch (Exception e) {  						Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  					}  					//secret handshake  					if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  						Thread.Sleep (SettingsNStuff.HandshakeDelay);  						//Port.DiscardOutBuffer();  						//Port.DiscardInBuffer();  						sendPacket (HPacket);  						//wait for reply  						int k = 0;  						while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  							Thread.Sleep (100);  							k++;  						}  						Port.Close ();  						if (DisplayFound) {  							Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  							break;  						} else {  							Debug.Log ("KSPSerialIO: KSP Display not found");  						}  					} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  						DisplayFound = true;  						Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  						break;  					}  				} else {  					Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  				}  			}  		}  	} catch (Exception e) {  		print (e.Message);  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (DisplayFound) {  	Debug.Log ("KSPSerialIO: running...");  	Begin ();  } else {  	Debug.Log ("KSPSerialIO: Version 0.19.0");  	Debug.Log ("KSPSerialIO: Getting serial ports...");  	Debug.Log ("KSPSerialIO: Output packet size: " + Marshal.SizeOf (VData).ToString () + "/255");  	initializeDataPackets ();  	try {  		//Use registry hack to get a list of serial ports until we get system.io.ports  		RegistryKey SerialCOMSKey = Registry.LocalMachine.OpenSubKey (@"HARDWARE\\DEVICEMAP\\SERIALCOMM\\");  		Begin ();  		//print("KSPSerialIO: receive threshold " + Port.ReceivedBytesThreshold.ToString());  		if (SerialCOMSKey == null) {  			Debug.Log ("KSPSerialIO: Dude do you even win32 serial port??");  		} else {  			String[] realports = SerialCOMSKey.GetValueNames ();  			// get list of all serial devices  			String[] names = new string[realports.Length + 1];  			// make a new list with 1 extra' we put the default port first  			realports.CopyTo (names' 1);  			Debug.Log ("KSPSerialIO: Found " + names.Length.ToString () + " serial ports");  			//look through all found ports for our display  			int j = 0;  			foreach (string PortName in names) {  				if (j == 0)// try default port first  				 {  					PortNumber = SettingsNStuff.DefaultPort;  					Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  				} else {  					PortNumber = (string)SerialCOMSKey.GetValue (PortName);  					Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  				}  				Port.PortName = PortNumber;  				j++;  				if (!Port.IsOpen) {  					try {  						Port.Open ();  					} catch (Exception e) {  						Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  					}  					//secret handshake  					if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  						Thread.Sleep (SettingsNStuff.HandshakeDelay);  						//Port.DiscardOutBuffer();  						//Port.DiscardInBuffer();  						sendPacket (HPacket);  						//wait for reply  						int k = 0;  						while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  							Thread.Sleep (100);  							k++;  						}  						Port.Close ();  						if (DisplayFound) {  							Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  							break;  						} else {  							Debug.Log ("KSPSerialIO: KSP Display not found");  						}  					} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  						DisplayFound = true;  						Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  						break;  					}  				} else {  					Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  				}  			}  		}  	} catch (Exception e) {  		print (e.Message);  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: try {  	//Use registry hack to get a list of serial ports until we get system.io.ports  	RegistryKey SerialCOMSKey = Registry.LocalMachine.OpenSubKey (@"HARDWARE\\DEVICEMAP\\SERIALCOMM\\");  	Begin ();  	//print("KSPSerialIO: receive threshold " + Port.ReceivedBytesThreshold.ToString());  	if (SerialCOMSKey == null) {  		Debug.Log ("KSPSerialIO: Dude do you even win32 serial port??");  	} else {  		String[] realports = SerialCOMSKey.GetValueNames ();  		// get list of all serial devices  		String[] names = new string[realports.Length + 1];  		// make a new list with 1 extra' we put the default port first  		realports.CopyTo (names' 1);  		Debug.Log ("KSPSerialIO: Found " + names.Length.ToString () + " serial ports");  		//look through all found ports for our display  		int j = 0;  		foreach (string PortName in names) {  			if (j == 0)// try default port first  			 {  				PortNumber = SettingsNStuff.DefaultPort;  				Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  			} else {  				PortNumber = (string)SerialCOMSKey.GetValue (PortName);  				Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  			}  			Port.PortName = PortNumber;  			j++;  			if (!Port.IsOpen) {  				try {  					Port.Open ();  				} catch (Exception e) {  					Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  				}  				//secret handshake  				if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  					Thread.Sleep (SettingsNStuff.HandshakeDelay);  					//Port.DiscardOutBuffer();  					//Port.DiscardInBuffer();  					sendPacket (HPacket);  					//wait for reply  					int k = 0;  					while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  						Thread.Sleep (100);  						k++;  					}  					Port.Close ();  					if (DisplayFound) {  						Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  						break;  					} else {  						Debug.Log ("KSPSerialIO: KSP Display not found");  					}  				} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  					DisplayFound = true;  					Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  					break;  				}  			} else {  				Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  			}  		}  	}  } catch (Exception e) {  	print (e.Message);  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: try {  	//Use registry hack to get a list of serial ports until we get system.io.ports  	RegistryKey SerialCOMSKey = Registry.LocalMachine.OpenSubKey (@"HARDWARE\\DEVICEMAP\\SERIALCOMM\\");  	Begin ();  	//print("KSPSerialIO: receive threshold " + Port.ReceivedBytesThreshold.ToString());  	if (SerialCOMSKey == null) {  		Debug.Log ("KSPSerialIO: Dude do you even win32 serial port??");  	} else {  		String[] realports = SerialCOMSKey.GetValueNames ();  		// get list of all serial devices  		String[] names = new string[realports.Length + 1];  		// make a new list with 1 extra' we put the default port first  		realports.CopyTo (names' 1);  		Debug.Log ("KSPSerialIO: Found " + names.Length.ToString () + " serial ports");  		//look through all found ports for our display  		int j = 0;  		foreach (string PortName in names) {  			if (j == 0)// try default port first  			 {  				PortNumber = SettingsNStuff.DefaultPort;  				Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  			} else {  				PortNumber = (string)SerialCOMSKey.GetValue (PortName);  				Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  			}  			Port.PortName = PortNumber;  			j++;  			if (!Port.IsOpen) {  				try {  					Port.Open ();  				} catch (Exception e) {  					Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  				}  				//secret handshake  				if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  					Thread.Sleep (SettingsNStuff.HandshakeDelay);  					//Port.DiscardOutBuffer();  					//Port.DiscardInBuffer();  					sendPacket (HPacket);  					//wait for reply  					int k = 0;  					while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  						Thread.Sleep (100);  						k++;  					}  					Port.Close ();  					if (DisplayFound) {  						Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  						break;  					} else {  						Debug.Log ("KSPSerialIO: KSP Display not found");  					}  				} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  					DisplayFound = true;  					Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  					break;  				}  			} else {  				Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  			}  		}  	}  } catch (Exception e) {  	print (e.Message);  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (SerialCOMSKey == null) {  	Debug.Log ("KSPSerialIO: Dude do you even win32 serial port??");  } else {  	String[] realports = SerialCOMSKey.GetValueNames ();  	// get list of all serial devices  	String[] names = new string[realports.Length + 1];  	// make a new list with 1 extra' we put the default port first  	realports.CopyTo (names' 1);  	Debug.Log ("KSPSerialIO: Found " + names.Length.ToString () + " serial ports");  	//look through all found ports for our display  	int j = 0;  	foreach (string PortName in names) {  		if (j == 0)// try default port first  		 {  			PortNumber = SettingsNStuff.DefaultPort;  			Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  		} else {  			PortNumber = (string)SerialCOMSKey.GetValue (PortName);  			Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  		}  		Port.PortName = PortNumber;  		j++;  		if (!Port.IsOpen) {  			try {  				Port.Open ();  			} catch (Exception e) {  				Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  			}  			//secret handshake  			if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  				Thread.Sleep (SettingsNStuff.HandshakeDelay);  				//Port.DiscardOutBuffer();  				//Port.DiscardInBuffer();  				sendPacket (HPacket);  				//wait for reply  				int k = 0;  				while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  					Thread.Sleep (100);  					k++;  				}  				Port.Close ();  				if (DisplayFound) {  					Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  					break;  				} else {  					Debug.Log ("KSPSerialIO: KSP Display not found");  				}  			} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  				DisplayFound = true;  				Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  				break;  			}  		} else {  			Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  		}  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (SerialCOMSKey == null) {  	Debug.Log ("KSPSerialIO: Dude do you even win32 serial port??");  } else {  	String[] realports = SerialCOMSKey.GetValueNames ();  	// get list of all serial devices  	String[] names = new string[realports.Length + 1];  	// make a new list with 1 extra' we put the default port first  	realports.CopyTo (names' 1);  	Debug.Log ("KSPSerialIO: Found " + names.Length.ToString () + " serial ports");  	//look through all found ports for our display  	int j = 0;  	foreach (string PortName in names) {  		if (j == 0)// try default port first  		 {  			PortNumber = SettingsNStuff.DefaultPort;  			Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  		} else {  			PortNumber = (string)SerialCOMSKey.GetValue (PortName);  			Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  		}  		Port.PortName = PortNumber;  		j++;  		if (!Port.IsOpen) {  			try {  				Port.Open ();  			} catch (Exception e) {  				Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  			}  			//secret handshake  			if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  				Thread.Sleep (SettingsNStuff.HandshakeDelay);  				//Port.DiscardOutBuffer();  				//Port.DiscardInBuffer();  				sendPacket (HPacket);  				//wait for reply  				int k = 0;  				while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  					Thread.Sleep (100);  					k++;  				}  				Port.Close ();  				if (DisplayFound) {  					Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  					break;  				} else {  					Debug.Log ("KSPSerialIO: KSP Display not found");  				}  			} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  				DisplayFound = true;  				Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  				break;  			}  		} else {  			Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  		}  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: foreach (string PortName in names) {  	if (j == 0)// try default port first  	 {  		PortNumber = SettingsNStuff.DefaultPort;  		Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  	} else {  		PortNumber = (string)SerialCOMSKey.GetValue (PortName);  		Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  	}  	Port.PortName = PortNumber;  	j++;  	if (!Port.IsOpen) {  		try {  			Port.Open ();  		} catch (Exception e) {  			Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  		}  		//secret handshake  		if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  			//Port.DiscardOutBuffer();  			//Port.DiscardInBuffer();  			sendPacket (HPacket);  			//wait for reply  			int k = 0;  			while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  				Thread.Sleep (100);  				k++;  			}  			Port.Close ();  			if (DisplayFound) {  				Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  				break;  			} else {  				Debug.Log ("KSPSerialIO: KSP Display not found");  			}  		} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  			DisplayFound = true;  			Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  			break;  		}  	} else {  		Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: foreach (string PortName in names) {  	if (j == 0)// try default port first  	 {  		PortNumber = SettingsNStuff.DefaultPort;  		Debug.Log ("KSPSerialIO: trying default port " + PortNumber);  	} else {  		PortNumber = (string)SerialCOMSKey.GetValue (PortName);  		Debug.Log ("KSPSerialIO: trying port " + PortName + " - " + PortNumber);  	}  	Port.PortName = PortNumber;  	j++;  	if (!Port.IsOpen) {  		try {  			Port.Open ();  		} catch (Exception e) {  			Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  		}  		//secret handshake  		if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  			//Port.DiscardOutBuffer();  			//Port.DiscardInBuffer();  			sendPacket (HPacket);  			//wait for reply  			int k = 0;  			while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  				Thread.Sleep (100);  				k++;  			}  			Port.Close ();  			if (DisplayFound) {  				Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  				break;  			} else {  				Debug.Log ("KSPSerialIO: KSP Display not found");  			}  		} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  			DisplayFound = true;  			Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  			break;  		}  	} else {  		Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (!Port.IsOpen) {  	try {  		Port.Open ();  	} catch (Exception e) {  		Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  	}  	//secret handshake  	if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  		Thread.Sleep (SettingsNStuff.HandshakeDelay);  		//Port.DiscardOutBuffer();  		//Port.DiscardInBuffer();  		sendPacket (HPacket);  		//wait for reply  		int k = 0;  		while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  			Thread.Sleep (100);  			k++;  		}  		Port.Close ();  		if (DisplayFound) {  			Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  			break;  		} else {  			Debug.Log ("KSPSerialIO: KSP Display not found");  		}  	} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  		DisplayFound = true;  		Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  		break;  	}  } else {  	Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (!Port.IsOpen) {  	try {  		Port.Open ();  	} catch (Exception e) {  		Debug.Log ("Error opening serial port " + Port.PortName + ": " + e.Message);  	}  	//secret handshake  	if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  		Thread.Sleep (SettingsNStuff.HandshakeDelay);  		//Port.DiscardOutBuffer();  		//Port.DiscardInBuffer();  		sendPacket (HPacket);  		//wait for reply  		int k = 0;  		while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  			Thread.Sleep (100);  			k++;  		}  		Port.Close ();  		if (DisplayFound) {  			Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  			break;  		} else {  			Debug.Log ("KSPSerialIO: KSP Display not found");  		}  	} else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  		DisplayFound = true;  		Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  		break;  	}  } else {  	Debug.Log ("KSPSerialIO: " + PortNumber + "is already being used.");  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  	Thread.Sleep (SettingsNStuff.HandshakeDelay);  	//Port.DiscardOutBuffer();  	//Port.DiscardInBuffer();  	sendPacket (HPacket);  	//wait for reply  	int k = 0;  	while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  		Thread.Sleep (100);  		k++;  	}  	Port.Close ();  	if (DisplayFound) {  		Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  		break;  	} else {  		Debug.Log ("KSPSerialIO: KSP Display not found");  	}  } else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  	DisplayFound = true;  	Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  	break;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 0)) {  	Thread.Sleep (SettingsNStuff.HandshakeDelay);  	//Port.DiscardOutBuffer();  	//Port.DiscardInBuffer();  	sendPacket (HPacket);  	//wait for reply  	int k = 0;  	while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  		Thread.Sleep (100);  		k++;  	}  	Port.Close ();  	if (DisplayFound) {  		Debug.Log ("KSPSerialIO: found KSP Display at " + Port.PortName);  		break;  	} else {  		Debug.Log ("KSPSerialIO: KSP Display not found");  	}  } else if (Port.IsOpen && (SettingsNStuff.HandshakeDisable == 1)) {  	DisplayFound = true;  	Debug.Log ("KSPSerialIO: Handshake disabled' using " + Port.PortName);  	break;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  	Thread.Sleep (100);  	k++;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: while (Port.BytesToRead == 0 && k < 15 && !DisplayFound) {  	Thread.Sleep (100);  	k++;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Awake,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,readline,The following statement contains a magic number: while (c != '\n' && j < 255) {  	result += c;  	c = (char)Port.ReadByte ();  	j++;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: while (Port.BytesToRead > 0) {  	if (processCOM ()) {  		switch (id) {  		case HSPid:  			HPacket = (HandShakePacket)ByteArrayToStructure (buffer' HPacket);  			Invoke ("HandShake"' 0);  			if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  				DisplayFound = true;  			} else {  				DisplayFound = false;  			}  			break;  		case Cid:  			VesselControls ();  			//Invoke("VesselControls"' 0);  			break;  		default:  			Invoke ("Unimplemented"' 0);  			break;  		}  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: while (Port.BytesToRead > 0) {  	if (processCOM ()) {  		switch (id) {  		case HSPid:  			HPacket = (HandShakePacket)ByteArrayToStructure (buffer' HPacket);  			Invoke ("HandShake"' 0);  			if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  				DisplayFound = true;  			} else {  				DisplayFound = false;  			}  			break;  		case Cid:  			VesselControls ();  			//Invoke("VesselControls"' 0);  			break;  		default:  			Invoke ("Unimplemented"' 0);  			break;  		}  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: if (processCOM ()) {  	switch (id) {  	case HSPid:  		HPacket = (HandShakePacket)ByteArrayToStructure (buffer' HPacket);  		Invoke ("HandShake"' 0);  		if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  			DisplayFound = true;  		} else {  			DisplayFound = false;  		}  		break;  	case Cid:  		VesselControls ();  		//Invoke("VesselControls"' 0);  		break;  	default:  		Invoke ("Unimplemented"' 0);  		break;  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: if (processCOM ()) {  	switch (id) {  	case HSPid:  		HPacket = (HandShakePacket)ByteArrayToStructure (buffer' HPacket);  		Invoke ("HandShake"' 0);  		if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  			DisplayFound = true;  		} else {  			DisplayFound = false;  		}  		break;  	case Cid:  		VesselControls ();  		//Invoke("VesselControls"' 0);  		break;  	default:  		Invoke ("Unimplemented"' 0);  		break;  	}  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: switch (id) {  case HSPid:  	HPacket = (HandShakePacket)ByteArrayToStructure (buffer' HPacket);  	Invoke ("HandShake"' 0);  	if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  		DisplayFound = true;  	} else {  		DisplayFound = false;  	}  	break;  case Cid:  	VesselControls ();  	//Invoke("VesselControls"' 0);  	break;  default:  	Invoke ("Unimplemented"' 0);  	break;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: switch (id) {  case HSPid:  	HPacket = (HandShakePacket)ByteArrayToStructure (buffer' HPacket);  	Invoke ("HandShake"' 0);  	if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  		DisplayFound = true;  	} else {  		DisplayFound = false;  	}  	break;  case Cid:  	VesselControls ();  	//Invoke("VesselControls"' 0);  	break;  default:  	Invoke ("Unimplemented"' 0);  	break;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  	DisplayFound = true;  } else {  	DisplayFound = false;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Port_ReceivedEvent,The following statement contains a magic number: if ((HPacket.M1 == 3) && (HPacket.M2 == 1) && (HPacket.M3 == 4)) {  	DisplayFound = true;  } else {  	DisplayFound = false;  }  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: VControls.SAS = BitMathByte (CPacket.MainControls' 7);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: VControls.RCS = BitMathByte (CPacket.MainControls' 6);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: VControls.Lights = BitMathByte (CPacket.MainControls' 5);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: VControls.Gear = BitMathByte (CPacket.MainControls' 4);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: VControls.Brakes = BitMathByte (CPacket.MainControls' 3);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: VControls.Precision = BitMathByte (CPacket.MainControls' 2);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: VControls.SpeedMode = (int)(CPacket.NavballSASMode >> 4);  
Magic Number,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,VesselControls,The following statement contains a magic number: for (int j = 1; j <= 10; j++) {  	VControls.ControlGroup [j] = BitMathUshort (CPacket.ControlGroup' j);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: if (KSPSerialPort.DisplayFound) {  	if (!KSPSerialPort.Port.IsOpen) {  		ScreenMessages.PostScreenMessage ("Starting serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		try {  			KSPSerialPort.Port.Open ();  			Thread.Sleep (SettingsNStuff.HandshakeDelay);  		} catch (Exception e) {  			ScreenMessages.PostScreenMessage ("Error opening serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  			ScreenMessages.PostScreenMessage (e.Message' 10f' KSPIOScreenStyle);  		}  	} else {  		ScreenMessages.PostScreenMessage ("Using serial port " + KSPSerialPort.Port.PortName' 10f' KSPIOScreenStyle);  		if (SettingsNStuff.HandshakeDisable == 1)  			ScreenMessages.PostScreenMessage ("Handshake disabled");  	}  	Thread.Sleep (200);  	ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  	ActiveVessel = FlightGlobals.ActiveVessel;  	ActiveVessel.OnPostAutopilotUpdate += AxisInput;  	//sync inputs at start  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	/*                 ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);                 ActiveVessel.OnFlyByWire += new FlightInputCallback(AxisInput);                                  ActiveVessel.OnPostAutopilotUpdate -= AxisInput;                 ActiveVessel.OnPostAutopilotUpdate += AxisInput;                 */} else {  	ScreenMessages.PostScreenMessage ("No display found"' 10f' KSPIOScreenStyle);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Start,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null && KSPSerialPort.Port.IsOpen) {  	//Debug.Log("KSPSerialIO: 1");  	//If the current active vessel is not what we were using' we need to remove controls from the old   	//vessel and attache it to the current one  	if (ActiveVessel.id != FlightGlobals.ActiveVessel.id) {  		ActiveVessel.OnPostAutopilotUpdate -= AxisInput;  		ActiveVessel = FlightGlobals.ActiveVessel;  		ActiveVessel.OnPostAutopilotUpdate += AxisInput;  		//sync some inputs on vessel switch  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		Debug.Log ("KSPSerialIO: ActiveVessel changed");  	} else {  		ActiveVessel = FlightGlobals.ActiveVessel;  	}  	#region outputs  	theTime = Time.unscaledTime;  	if ((theTime - lastUpdate) > refreshrate) {  		//Debug.Log("KSPSerialIO: 2");  		lastUpdate = theTime;  		List<Part> ActiveEngines = new List<Part> ();  		ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  		KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  		KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  		KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  		KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  		KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  		KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  		KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  		KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  		KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  		KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  		KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  		KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  		KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  		//Debug.Log("KSPSerialIO: 3");  		double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  		double AGL = (ASL - ActiveVessel.terrainAltitude);  		if (AGL < ASL)  			KSPSerialPort.VData.RAlt = (float)AGL;  		else  			KSPSerialPort.VData.RAlt = (float)ASL;  		KSPSerialPort.VData.Alt = (float)ASL;  		KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  		KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  		KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  		TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  		KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  		KSPSerialPort.VData.LiquidFuel = TempR.Current;  		KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  		KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  		KSPSerialPort.VData.OxidizerTot = TempR.Max;  		KSPSerialPort.VData.Oxidizer = TempR.Current;  		KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  		KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  		TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  		KSPSerialPort.VData.EChargeTot = TempR.Max;  		KSPSerialPort.VData.ECharge = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  		KSPSerialPort.VData.MonoPropTot = TempR.Max;  		KSPSerialPort.VData.MonoProp = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  		KSPSerialPort.VData.IntakeAirTot = TempR.Max;  		KSPSerialPort.VData.IntakeAir = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  		KSPSerialPort.VData.SolidFuelTot = TempR.Max;  		KSPSerialPort.VData.SolidFuel = TempR.Current;  		TempR = GetResourceTotal (ActiveVessel' "XenonGas");  		KSPSerialPort.VData.XenonGasTot = TempR.Max;  		KSPSerialPort.VData.XenonGas = TempR.Current;  		missionTime = ActiveVessel.missionTime;  		deltaT = missionTime - missionTimeOld;  		missionTimeOld = missionTime;  		KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  		KSPSerialPort.VData.deltaTime = (float)deltaT;  		KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  		//Debug.Log("KSPSerialIO: 4");  		KSPSerialPort.VData.MNTime = 0;  		KSPSerialPort.VData.MNDeltaV = 0;  		if (ActiveVessel.patchedConicSolver != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  				if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  					KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  					//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  					KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  					//Added JS  				}  			}  		}  		//Debug.Log("KSPSerialIO: 5");  		Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  		KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  		KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  		KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  		KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  		KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  		KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  		KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  		KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  		KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  		KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  		if (ActiveVessel.orbit.referenceBody != null) {  			KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  		}  		KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  		KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  		KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  		KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  		KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  		//target distance and velocity stuff                      		KSPSerialPort.VData.TargetDist = 0;  		KSPSerialPort.VData.TargetV = 0;  		if (TargetExists ()) {  			KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  			KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  		}  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  		//get navball speed display mode  		if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  			KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  		}  		#region debugjunk  		/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  		//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  		//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  		//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  		//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  		//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  		//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  		//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  		//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  		//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  		//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  		//KSPSerialPort.Port.WriteLine("Success!");  		/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  		#endregion  		KSPSerialPort.sendPacket (KSPSerialPort.VData);  	}  	//end refresh  	#endregion  	#region inputs  	if (KSPSerialPort.ControlReceived) {  		/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  		if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  			KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  			//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  		}  		//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  		if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  			KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  			//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  		}  		if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  			KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  		}  		if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  			KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  		}  		if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  			KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  		}  		if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  			KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  		}  		if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  			if (KSPSerialPort.VControls.Stage)  				StageManager.ActivateNextStage ();  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  			KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  		}  		//================ control groups  		if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  			KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  		}  		if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  			KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  		}  		if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  			KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  		}  		if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  			KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  		}  		if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  			KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  		}  		if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  			KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  		}  		if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  			KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  		}  		if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  			KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  		}  		if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  			KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  		}  		if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  			KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  		}  		//Set sas mode  		if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  			if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  				if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  					ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  				} else {  					ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  				}  			}  			KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  		}  		//set navball mode  		if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  			if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  				FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  			}  			KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  		}  		if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  			//ActiveVessel.Autopilot.SAS.ManualOverride(true);   			if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  				wasSASOn = true;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  			}  			//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  			/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  			//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  			//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  		} else {  			if (wasSASOn == true) {  				wasSASOn = false;  				ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  				//ActiveVessel.Autopilot.SAS.lockedMode = true;  				//ActiveVessel.Autopilot.SAS.dampingMode = false;  			}  		}  		KSPSerialPort.ControlReceived = false;  	}  	//end ControlReceived  	#endregion  } //end if null and same vessel  else {  	//Debug.Log("KSPSerialIO: ActiveVessel not found");  	//ActiveVessel.OnFlyByWire -= new FlightInputCallback(AxisInput);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if ((theTime - lastUpdate) > refreshrate) {  	//Debug.Log("KSPSerialIO: 2");  	lastUpdate = theTime;  	List<Part> ActiveEngines = new List<Part> ();  	ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  	KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  	KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  	KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  	KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  	KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  	KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  	KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  	KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  	KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  	KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  	KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  	KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  	KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  	//Debug.Log("KSPSerialIO: 3");  	double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  	double AGL = (ASL - ActiveVessel.terrainAltitude);  	if (AGL < ASL)  		KSPSerialPort.VData.RAlt = (float)AGL;  	else  		KSPSerialPort.VData.RAlt = (float)ASL;  	KSPSerialPort.VData.Alt = (float)ASL;  	KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  	KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  	KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  	TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  	KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  	KSPSerialPort.VData.LiquidFuel = TempR.Current;  	KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  	KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  	KSPSerialPort.VData.OxidizerTot = TempR.Max;  	KSPSerialPort.VData.Oxidizer = TempR.Current;  	KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  	KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  	KSPSerialPort.VData.EChargeTot = TempR.Max;  	KSPSerialPort.VData.ECharge = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  	KSPSerialPort.VData.MonoPropTot = TempR.Max;  	KSPSerialPort.VData.MonoProp = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  	KSPSerialPort.VData.IntakeAirTot = TempR.Max;  	KSPSerialPort.VData.IntakeAir = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  	KSPSerialPort.VData.SolidFuelTot = TempR.Max;  	KSPSerialPort.VData.SolidFuel = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "XenonGas");  	KSPSerialPort.VData.XenonGasTot = TempR.Max;  	KSPSerialPort.VData.XenonGas = TempR.Current;  	missionTime = ActiveVessel.missionTime;  	deltaT = missionTime - missionTimeOld;  	missionTimeOld = missionTime;  	KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  	KSPSerialPort.VData.deltaTime = (float)deltaT;  	KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  	//Debug.Log("KSPSerialIO: 4");  	KSPSerialPort.VData.MNTime = 0;  	KSPSerialPort.VData.MNDeltaV = 0;  	if (ActiveVessel.patchedConicSolver != null) {  		if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  				KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  				//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  				KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  				//Added JS  			}  		}  	}  	//Debug.Log("KSPSerialIO: 5");  	Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  	KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  	KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  	KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  	KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  	KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  	KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  	KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  	KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  	KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  	if (ActiveVessel.orbit.referenceBody != null) {  		KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  	}  	KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  	KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  	KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  	KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  	KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  	//target distance and velocity stuff                      	KSPSerialPort.VData.TargetDist = 0;  	KSPSerialPort.VData.TargetV = 0;  	if (TargetExists ()) {  		KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  		KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  	}  	KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  	//get navball speed display mode  	if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  	}  	#region debugjunk  	/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  	//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  	//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  	//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  	//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  	//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  	//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  	//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  	//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  	//KSPSerialPort.Port.WriteLine("Success!");  	/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  	#endregion  	KSPSerialPort.sendPacket (KSPSerialPort.VData);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if ((theTime - lastUpdate) > refreshrate) {  	//Debug.Log("KSPSerialIO: 2");  	lastUpdate = theTime;  	List<Part> ActiveEngines = new List<Part> ();  	ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  	KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  	KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  	KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  	KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  	KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  	KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  	KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  	KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  	KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  	KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  	KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  	KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  	KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  	//Debug.Log("KSPSerialIO: 3");  	double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  	double AGL = (ASL - ActiveVessel.terrainAltitude);  	if (AGL < ASL)  		KSPSerialPort.VData.RAlt = (float)AGL;  	else  		KSPSerialPort.VData.RAlt = (float)ASL;  	KSPSerialPort.VData.Alt = (float)ASL;  	KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  	KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  	KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  	TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  	KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  	KSPSerialPort.VData.LiquidFuel = TempR.Current;  	KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  	KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  	KSPSerialPort.VData.OxidizerTot = TempR.Max;  	KSPSerialPort.VData.Oxidizer = TempR.Current;  	KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  	KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  	KSPSerialPort.VData.EChargeTot = TempR.Max;  	KSPSerialPort.VData.ECharge = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  	KSPSerialPort.VData.MonoPropTot = TempR.Max;  	KSPSerialPort.VData.MonoProp = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  	KSPSerialPort.VData.IntakeAirTot = TempR.Max;  	KSPSerialPort.VData.IntakeAir = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  	KSPSerialPort.VData.SolidFuelTot = TempR.Max;  	KSPSerialPort.VData.SolidFuel = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "XenonGas");  	KSPSerialPort.VData.XenonGasTot = TempR.Max;  	KSPSerialPort.VData.XenonGas = TempR.Current;  	missionTime = ActiveVessel.missionTime;  	deltaT = missionTime - missionTimeOld;  	missionTimeOld = missionTime;  	KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  	KSPSerialPort.VData.deltaTime = (float)deltaT;  	KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  	//Debug.Log("KSPSerialIO: 4");  	KSPSerialPort.VData.MNTime = 0;  	KSPSerialPort.VData.MNDeltaV = 0;  	if (ActiveVessel.patchedConicSolver != null) {  		if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  				KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  				//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  				KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  				//Added JS  			}  		}  	}  	//Debug.Log("KSPSerialIO: 5");  	Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  	KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  	KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  	KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  	KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  	KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  	KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  	KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  	KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  	KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  	if (ActiveVessel.orbit.referenceBody != null) {  		KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  	}  	KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  	KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  	KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  	KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  	KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  	//target distance and velocity stuff                      	KSPSerialPort.VData.TargetDist = 0;  	KSPSerialPort.VData.TargetV = 0;  	if (TargetExists ()) {  		KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  		KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  	}  	KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  	//get navball speed display mode  	if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  	}  	#region debugjunk  	/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  	//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  	//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  	//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  	//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  	//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  	//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  	//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  	//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  	//KSPSerialPort.Port.WriteLine("Success!");  	/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  	#endregion  	KSPSerialPort.sendPacket (KSPSerialPort.VData);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if ((theTime - lastUpdate) > refreshrate) {  	//Debug.Log("KSPSerialIO: 2");  	lastUpdate = theTime;  	List<Part> ActiveEngines = new List<Part> ();  	ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  	KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  	KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  	KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  	KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  	KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  	KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  	KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  	KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  	KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  	KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  	KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  	KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  	KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  	//Debug.Log("KSPSerialIO: 3");  	double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  	double AGL = (ASL - ActiveVessel.terrainAltitude);  	if (AGL < ASL)  		KSPSerialPort.VData.RAlt = (float)AGL;  	else  		KSPSerialPort.VData.RAlt = (float)ASL;  	KSPSerialPort.VData.Alt = (float)ASL;  	KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  	KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  	KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  	TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  	KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  	KSPSerialPort.VData.LiquidFuel = TempR.Current;  	KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  	KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  	KSPSerialPort.VData.OxidizerTot = TempR.Max;  	KSPSerialPort.VData.Oxidizer = TempR.Current;  	KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  	KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  	KSPSerialPort.VData.EChargeTot = TempR.Max;  	KSPSerialPort.VData.ECharge = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  	KSPSerialPort.VData.MonoPropTot = TempR.Max;  	KSPSerialPort.VData.MonoProp = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  	KSPSerialPort.VData.IntakeAirTot = TempR.Max;  	KSPSerialPort.VData.IntakeAir = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  	KSPSerialPort.VData.SolidFuelTot = TempR.Max;  	KSPSerialPort.VData.SolidFuel = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "XenonGas");  	KSPSerialPort.VData.XenonGasTot = TempR.Max;  	KSPSerialPort.VData.XenonGas = TempR.Current;  	missionTime = ActiveVessel.missionTime;  	deltaT = missionTime - missionTimeOld;  	missionTimeOld = missionTime;  	KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  	KSPSerialPort.VData.deltaTime = (float)deltaT;  	KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  	//Debug.Log("KSPSerialIO: 4");  	KSPSerialPort.VData.MNTime = 0;  	KSPSerialPort.VData.MNDeltaV = 0;  	if (ActiveVessel.patchedConicSolver != null) {  		if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  				KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  				//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  				KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  				//Added JS  			}  		}  	}  	//Debug.Log("KSPSerialIO: 5");  	Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  	KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  	KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  	KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  	KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  	KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  	KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  	KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  	KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  	KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  	if (ActiveVessel.orbit.referenceBody != null) {  		KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  	}  	KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  	KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  	KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  	KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  	KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  	//target distance and velocity stuff                      	KSPSerialPort.VData.TargetDist = 0;  	KSPSerialPort.VData.TargetV = 0;  	if (TargetExists ()) {  		KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  		KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  	}  	KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  	//get navball speed display mode  	if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  	}  	#region debugjunk  	/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  	//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  	//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  	//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  	//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  	//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  	//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  	//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  	//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  	//KSPSerialPort.Port.WriteLine("Success!");  	/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  	#endregion  	KSPSerialPort.sendPacket (KSPSerialPort.VData);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if ((theTime - lastUpdate) > refreshrate) {  	//Debug.Log("KSPSerialIO: 2");  	lastUpdate = theTime;  	List<Part> ActiveEngines = new List<Part> ();  	ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  	KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  	KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  	KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  	KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  	KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  	KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  	KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  	KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  	KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  	KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  	KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  	KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  	KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  	//Debug.Log("KSPSerialIO: 3");  	double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  	double AGL = (ASL - ActiveVessel.terrainAltitude);  	if (AGL < ASL)  		KSPSerialPort.VData.RAlt = (float)AGL;  	else  		KSPSerialPort.VData.RAlt = (float)ASL;  	KSPSerialPort.VData.Alt = (float)ASL;  	KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  	KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  	KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  	TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  	KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  	KSPSerialPort.VData.LiquidFuel = TempR.Current;  	KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  	KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  	KSPSerialPort.VData.OxidizerTot = TempR.Max;  	KSPSerialPort.VData.Oxidizer = TempR.Current;  	KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  	KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  	KSPSerialPort.VData.EChargeTot = TempR.Max;  	KSPSerialPort.VData.ECharge = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  	KSPSerialPort.VData.MonoPropTot = TempR.Max;  	KSPSerialPort.VData.MonoProp = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  	KSPSerialPort.VData.IntakeAirTot = TempR.Max;  	KSPSerialPort.VData.IntakeAir = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  	KSPSerialPort.VData.SolidFuelTot = TempR.Max;  	KSPSerialPort.VData.SolidFuel = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "XenonGas");  	KSPSerialPort.VData.XenonGasTot = TempR.Max;  	KSPSerialPort.VData.XenonGas = TempR.Current;  	missionTime = ActiveVessel.missionTime;  	deltaT = missionTime - missionTimeOld;  	missionTimeOld = missionTime;  	KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  	KSPSerialPort.VData.deltaTime = (float)deltaT;  	KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  	//Debug.Log("KSPSerialIO: 4");  	KSPSerialPort.VData.MNTime = 0;  	KSPSerialPort.VData.MNDeltaV = 0;  	if (ActiveVessel.patchedConicSolver != null) {  		if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  				KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  				//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  				KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  				//Added JS  			}  		}  	}  	//Debug.Log("KSPSerialIO: 5");  	Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  	KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  	KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  	KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  	KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  	KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  	KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  	KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  	KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  	KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  	if (ActiveVessel.orbit.referenceBody != null) {  		KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  	}  	KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  	KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  	KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  	KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  	KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  	//target distance and velocity stuff                      	KSPSerialPort.VData.TargetDist = 0;  	KSPSerialPort.VData.TargetV = 0;  	if (TargetExists ()) {  		KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  		KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  	}  	KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  	//get navball speed display mode  	if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  	}  	#region debugjunk  	/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  	//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  	//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  	//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  	//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  	//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  	//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  	//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  	//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  	//KSPSerialPort.Port.WriteLine("Success!");  	/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  	#endregion  	KSPSerialPort.sendPacket (KSPSerialPort.VData);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if ((theTime - lastUpdate) > refreshrate) {  	//Debug.Log("KSPSerialIO: 2");  	lastUpdate = theTime;  	List<Part> ActiveEngines = new List<Part> ();  	ActiveEngines = GetListOfActivatedEngines (ActiveVessel);  	KSPSerialPort.VData.AP = (float)ActiveVessel.orbit.ApA;  	KSPSerialPort.VData.PE = (float)ActiveVessel.orbit.PeA;  	KSPSerialPort.VData.SemiMajorAxis = (float)ActiveVessel.orbit.semiMajorAxis;  	KSPSerialPort.VData.SemiMinorAxis = (float)ActiveVessel.orbit.semiMinorAxis;  	KSPSerialPort.VData.e = (float)ActiveVessel.orbit.eccentricity;  	KSPSerialPort.VData.inc = (float)ActiveVessel.orbit.inclination;  	KSPSerialPort.VData.VVI = (float)ActiveVessel.verticalSpeed;  	KSPSerialPort.VData.G = (float)ActiveVessel.geeForce;  	KSPSerialPort.VData.TAp = (int)Math.Round (ActiveVessel.orbit.timeToAp);  	KSPSerialPort.VData.TPe = (int)Math.Round (ActiveVessel.orbit.timeToPe);  	KSPSerialPort.VData.Density = (float)ActiveVessel.atmDensity;  	KSPSerialPort.VData.TrueAnomaly = (float)ActiveVessel.orbit.trueAnomaly;  	KSPSerialPort.VData.period = (int)Math.Round (ActiveVessel.orbit.period);  	//Debug.Log("KSPSerialIO: 3");  	double ASL = ActiveVessel.mainBody.GetAltitude (ActiveVessel.CoM);  	double AGL = (ASL - ActiveVessel.terrainAltitude);  	if (AGL < ASL)  		KSPSerialPort.VData.RAlt = (float)AGL;  	else  		KSPSerialPort.VData.RAlt = (float)ASL;  	KSPSerialPort.VData.Alt = (float)ASL;  	KSPSerialPort.VData.Vsurf = (float)ActiveVessel.srfSpeed;  	KSPSerialPort.VData.Lat = (float)ActiveVessel.latitude;  	KSPSerialPort.VData.Lon = (float)ActiveVessel.longitude;  	TempR = GetResourceTotal (ActiveVessel' "LiquidFuel");  	KSPSerialPort.VData.LiquidFuelTot = TempR.Max;  	KSPSerialPort.VData.LiquidFuel = TempR.Current;  	KSPSerialPort.VData.LiquidFuelTotS = (float)ProspectForResourceMax ("LiquidFuel"' ActiveEngines);  	KSPSerialPort.VData.LiquidFuelS = (float)ProspectForResource ("LiquidFuel"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "Oxidizer");  	KSPSerialPort.VData.OxidizerTot = TempR.Max;  	KSPSerialPort.VData.Oxidizer = TempR.Current;  	KSPSerialPort.VData.OxidizerTotS = (float)ProspectForResourceMax ("Oxidizer"' ActiveEngines);  	KSPSerialPort.VData.OxidizerS = (float)ProspectForResource ("Oxidizer"' ActiveEngines);  	TempR = GetResourceTotal (ActiveVessel' "ElectricCharge");  	KSPSerialPort.VData.EChargeTot = TempR.Max;  	KSPSerialPort.VData.ECharge = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "MonoPropellant");  	KSPSerialPort.VData.MonoPropTot = TempR.Max;  	KSPSerialPort.VData.MonoProp = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "IntakeAir");  	KSPSerialPort.VData.IntakeAirTot = TempR.Max;  	KSPSerialPort.VData.IntakeAir = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "SolidFuel");  	KSPSerialPort.VData.SolidFuelTot = TempR.Max;  	KSPSerialPort.VData.SolidFuel = TempR.Current;  	TempR = GetResourceTotal (ActiveVessel' "XenonGas");  	KSPSerialPort.VData.XenonGasTot = TempR.Max;  	KSPSerialPort.VData.XenonGas = TempR.Current;  	missionTime = ActiveVessel.missionTime;  	deltaT = missionTime - missionTimeOld;  	missionTimeOld = missionTime;  	KSPSerialPort.VData.MissionTime = (UInt32)Math.Round (missionTime);  	KSPSerialPort.VData.deltaTime = (float)deltaT;  	KSPSerialPort.VData.VOrbit = (float)ActiveVessel.orbit.GetVel ().magnitude;  	//Debug.Log("KSPSerialIO: 4");  	KSPSerialPort.VData.MNTime = 0;  	KSPSerialPort.VData.MNDeltaV = 0;  	if (ActiveVessel.patchedConicSolver != null) {  		if (ActiveVessel.patchedConicSolver.maneuverNodes != null) {  			if (ActiveVessel.patchedConicSolver.maneuverNodes.Count > 0) {  				KSPSerialPort.VData.MNTime = (UInt32)Math.Round (ActiveVessel.patchedConicSolver.maneuverNodes [0].UT - Planetarium.GetUniversalTime ());  				//KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes[0].DeltaV.magnitude;  				KSPSerialPort.VData.MNDeltaV = (float)ActiveVessel.patchedConicSolver.maneuverNodes [0].GetBurnVector (ActiveVessel.patchedConicSolver.maneuverNodes [0].patch).magnitude;  				//Added JS  			}  		}  	}  	//Debug.Log("KSPSerialIO: 5");  	Quaternion attitude = updateHeadingPitchRollField (ActiveVessel);  	KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  	KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  	KSPSerialPort.VData.Heading = (float)attitude.eulerAngles.y;  	KSPSerialPort.ControlStatus ((int)enumAG.SAS' ActiveVessel.ActionGroups [KSPActionGroup.SAS]);  	KSPSerialPort.ControlStatus ((int)enumAG.RCS' ActiveVessel.ActionGroups [KSPActionGroup.RCS]);  	KSPSerialPort.ControlStatus ((int)enumAG.Light' ActiveVessel.ActionGroups [KSPActionGroup.Light]);  	KSPSerialPort.ControlStatus ((int)enumAG.Gear' ActiveVessel.ActionGroups [KSPActionGroup.Gear]);  	KSPSerialPort.ControlStatus ((int)enumAG.Brakes' ActiveVessel.ActionGroups [KSPActionGroup.Brakes]);  	KSPSerialPort.ControlStatus ((int)enumAG.Abort' ActiveVessel.ActionGroups [KSPActionGroup.Abort]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom01' ActiveVessel.ActionGroups [KSPActionGroup.Custom01]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom02' ActiveVessel.ActionGroups [KSPActionGroup.Custom02]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom03' ActiveVessel.ActionGroups [KSPActionGroup.Custom03]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom04' ActiveVessel.ActionGroups [KSPActionGroup.Custom04]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom05' ActiveVessel.ActionGroups [KSPActionGroup.Custom05]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom06' ActiveVessel.ActionGroups [KSPActionGroup.Custom06]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom07' ActiveVessel.ActionGroups [KSPActionGroup.Custom07]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom08' ActiveVessel.ActionGroups [KSPActionGroup.Custom08]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom09' ActiveVessel.ActionGroups [KSPActionGroup.Custom09]);  	KSPSerialPort.ControlStatus ((int)enumAG.Custom10' ActiveVessel.ActionGroups [KSPActionGroup.Custom10]);  	if (ActiveVessel.orbit.referenceBody != null) {  		KSPSerialPort.VData.SOINumber = GetSOINumber (ActiveVessel.orbit.referenceBody.name);  	}  	KSPSerialPort.VData.MaxOverHeat = GetMaxOverHeat (ActiveVessel);  	KSPSerialPort.VData.MachNumber = (float)ActiveVessel.mach;  	KSPSerialPort.VData.IAS = (float)ActiveVessel.indicatedAirSpeed;  	KSPSerialPort.VData.CurrentStage = (byte)StageManager.CurrentStage;  	KSPSerialPort.VData.TotalStage = (byte)StageManager.StageCount;  	//target distance and velocity stuff                      	KSPSerialPort.VData.TargetDist = 0;  	KSPSerialPort.VData.TargetV = 0;  	if (TargetExists ()) {  		KSPSerialPort.VData.TargetDist = (float)Vector3.Distance (FlightGlobals.fetch.VesselTarget.GetVessel ().transform.position' ActiveVessel.transform.position);  		KSPSerialPort.VData.TargetV = (float)FlightGlobals.ship_tgtVelocity.magnitude;  	}  	KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  	//get navball speed display mode  	if (ActiveVessel.ActionGroups [KSPActionGroup.SAS]) {  		KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.ActiveVessel.Autopilot.Mode + 1) | KSPSerialPort.VData.NavballSASMode);  	}  	#region debugjunk  	/*                     Debug.Log("KSPSerialIO: Stage " + KSPSerialPort.VData.CurrentStage.ToString() + ' ' +                         KSPSerialPort.VData.TotalStage.ToString());                      Debug.Log("KSPSerialIO: Overheat " + KSPSerialPort.VData.MaxOverHeat.ToString());                     Debug.Log("KSPSerialIO: Mach " + KSPSerialPort.VData.MachNumber.ToString());                     Debug.Log("KSPSerialIO: IAS " + KSPSerialPort.VData.IAS.ToString());                                          Debug.Log("KSPSerialIO: SOI " + ActiveVessel.orbit.referenceBody.name + KSPSerialPort.VData.SOINumber.ToString());                                          ScreenMessages.PostScreenMessage(KSPSerialPort.VData.OxidizerS.ToString() + "/" + KSPSerialPort.VData.OxidizerTotS +                         "   " + KSPSerialPort.VData.Oxidizer.ToString() + "/" + KSPSerialPort.VData.OxidizerTot);                     *///KSPSerialPort.VData.Roll = Mathf.Atan2(2 * (x * y + w * z)' w * w + x * x - y * y - z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Pitch = Mathf.Atan2(2 * (y * z + w * x)' w * w - x * x - y * y + z * z) * 180 / Mathf.PI;  	//KSPSerialPort.VData.Heading = Mathf.Asin(-2 * (x * z - w * y)) *180 / Mathf.PI;  	//Debug.Log("KSPSerialIO: Roll    " + KSPSerialPort.VData.Roll.ToString());  	//Debug.Log("KSPSerialIO: Pitch   " + KSPSerialPort.VData.Pitch.ToString());  	//Debug.Log("KSPSerialIO: Heading " + KSPSerialPort.VData.Heading.ToString());  	//Debug.Log("KSPSerialIO: VOrbit" + KSPSerialPort.VData.VOrbit.ToString());  	//ScreenMessages.PostScreenMessage(ActiveVessel.ActionGroups[KSPActionGroup.RCS].ToString());  	//Debug.Log("KSPSerialIO: MNTime" + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV" + KSPSerialPort.VData.MNDeltaV.ToString());  	//Debug.Log("KSPSerialIO: Time" + KSPSerialPort.VData.MissionTime.ToString() + " Delta Time" + KSPSerialPort.VData.deltaTime.ToString());  	//Debug.Log("KSPSerialIO: Throttle = " + KSPSerialPort.CPacket.Throttle.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.Fuelp.ToString());  	//ScreenMessages.PostScreenMessage(KSPSerialPort.VData.RAlt.ToString());  	//KSPSerialPort.Port.WriteLine("Success!");  	/*                     ScreenMessages.PostScreenMessage(KSPSerialPort.VData.LiquidFuelS.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTotS +                         "   " + KSPSerialPort.VData.LiquidFuel.ToString() + "/" + KSPSerialPort.VData.LiquidFuelTot);                                          ScreenMessages.PostScreenMessage("MNTime " + KSPSerialPort.VData.MNTime.ToString() + " MNDeltaV " + KSPSerialPort.VData.MNDeltaV.ToString());                     ScreenMessages.PostScreenMessage("TargetDist " + KSPSerialPort.VData.TargetDist.ToString() + " TargetV " + KSPSerialPort.VData.TargetV.ToString());                      */  	#endregion  	KSPSerialPort.sendPacket (KSPSerialPort.VData);  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VData.Roll = (float)((attitude.eulerAngles.z > 180) ? (attitude.eulerAngles.z - 360.0) : attitude.eulerAngles.z);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VData.Pitch = (float)((attitude.eulerAngles.x > 180) ? (360.0 - attitude.eulerAngles.x) : -attitude.eulerAngles.x);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VData.NavballSASMode = (byte)(((int)FlightGlobals.speedDisplayMode + 1) << 4);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.ControlReceived) {  	/*                     ScreenMessages.PostScreenMessage("Nav Mode " + KSPSerialPort.CPacket.NavballSASMode.ToString());                                           ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString()' 10f' KSPIOScreenStyle);                                           Debug.Log("KSPSerialIO: SAS: " + KSPSerialPort.VControls.SAS.ToString() +                      "' RCS: " + KSPSerialPort.VControls.RCS.ToString() +                      "' Lights: " + KSPSerialPort.VControls.Lights.ToString() +                      "' Gear: " + KSPSerialPort.VControls.Gear.ToString() +                      "' Brakes: " + KSPSerialPort.VControls.Brakes.ToString() +                      "' Precision: " + KSPSerialPort.VControls.Precision.ToString() +                      "' Abort: " + KSPSerialPort.VControls.Abort.ToString() +                      "' Stage: " + KSPSerialPort.VControls.Stage.ToString());                      *///if (FlightInputHandler.RCSLock != KSPSerialPort.VControls.RCS)  	if (KSPSerialPort.VControls.RCS != KSPSerialPort.VControlsOld.RCS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' KSPSerialPort.VControls.RCS);  		KSPSerialPort.VControlsOld.RCS = KSPSerialPort.VControls.RCS;  		//ScreenMessages.PostScreenMessage("RCS: " + KSPSerialPort.VControls.RCS.ToString()' 10f' KSPIOScreenStyle);  	}  	//if (ActiveVessel.ctrlState.killRot != KSPSerialPort.VControls.SAS)  	if (KSPSerialPort.VControls.SAS != KSPSerialPort.VControlsOld.SAS) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' KSPSerialPort.VControls.SAS);  		KSPSerialPort.VControlsOld.SAS = KSPSerialPort.VControls.SAS;  		//ScreenMessages.PostScreenMessage("SAS: " + KSPSerialPort.VControls.SAS.ToString()' 10f' KSPIOScreenStyle);  	}  	if (KSPSerialPort.VControls.Lights != KSPSerialPort.VControlsOld.Lights) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Light' KSPSerialPort.VControls.Lights);  		KSPSerialPort.VControlsOld.Lights = KSPSerialPort.VControls.Lights;  	}  	if (KSPSerialPort.VControls.Gear != KSPSerialPort.VControlsOld.Gear) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Gear' KSPSerialPort.VControls.Gear);  		KSPSerialPort.VControlsOld.Gear = KSPSerialPort.VControls.Gear;  	}  	if (KSPSerialPort.VControls.Brakes != KSPSerialPort.VControlsOld.Brakes) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' KSPSerialPort.VControls.Brakes);  		KSPSerialPort.VControlsOld.Brakes = KSPSerialPort.VControls.Brakes;  	}  	if (KSPSerialPort.VControls.Abort != KSPSerialPort.VControlsOld.Abort) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Abort' KSPSerialPort.VControls.Abort);  		KSPSerialPort.VControlsOld.Abort = KSPSerialPort.VControls.Abort;  	}  	if (KSPSerialPort.VControls.Stage != KSPSerialPort.VControlsOld.Stage) {  		if (KSPSerialPort.VControls.Stage)  			StageManager.ActivateNextStage ();  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Stage' KSPSerialPort.VControls.Stage);  		KSPSerialPort.VControlsOld.Stage = KSPSerialPort.VControls.Stage;  	}  	//================ control groups  	if (KSPSerialPort.VControls.ControlGroup [1] != KSPSerialPort.VControlsOld.ControlGroup [1]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom01' KSPSerialPort.VControls.ControlGroup [1]);  		KSPSerialPort.VControlsOld.ControlGroup [1] = KSPSerialPort.VControls.ControlGroup [1];  	}  	if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  		KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  	}  	if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  		KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  	}  	if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  		KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  	}  	if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  		KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  	}  	if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  		KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  	}  	if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  		KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  	}  	if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  		KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  	}  	if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  		KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  	}  	if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  		ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  		KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  	}  	//Set sas mode  	if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  		if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  			if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  				ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  			} else {  				ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  			}  		}  		KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  	}  	//set navball mode  	if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  		if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  			FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  		}  		KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  	}  	if (Math.Abs (KSPSerialPort.VControls.Pitch) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Roll) > SettingsNStuff.SASTol || Math.Abs (KSPSerialPort.VControls.Yaw) > SettingsNStuff.SASTol) {  		//ActiveVessel.Autopilot.SAS.ManualOverride(true);   		if ((ActiveVessel.ActionGroups [KSPActionGroup.SAS]) && (wasSASOn == false)) {  			wasSASOn = true;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' false);  		}  		//ScreenMessages.PostScreenMessage("KSPSerialIO: SAS mode " + wasSASOn);  		/*                         if (wasSASOn == true)                         {                                                         //ActiveVessel.Autopilot.SAS.lockedMode = false;                             //ActiveVessel.Autopilot.SAS.dampingMode = true;                         }                                                                                                                         if (KSPSerialPort.VControls.SAS == true)                         {                             KSPSerialPort.VControls.SAS = false;                             KSPSerialPort.VControlsOld.SAS = false;                         }                          *///KSPSerialPort.VControlsOld.Pitch = KSPSerialPort.VControls.Pitch;  		//KSPSerialPort.VControlsOld.Roll = KSPSerialPort.VControls.Roll;  		//KSPSerialPort.VControlsOld.Yaw = KSPSerialPort.VControls.Yaw;  	} else {  		if (wasSASOn == true) {  			wasSASOn = false;  			ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' true);  			//ActiveVessel.Autopilot.SAS.lockedMode = true;  			//ActiveVessel.Autopilot.SAS.dampingMode = false;  		}  	}  	KSPSerialPort.ControlReceived = false;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [2] != KSPSerialPort.VControlsOld.ControlGroup [2]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  	KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom02' KSPSerialPort.VControls.ControlGroup [2]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [2] = KSPSerialPort.VControls.ControlGroup [2];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [3] != KSPSerialPort.VControlsOld.ControlGroup [3]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  	KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom03' KSPSerialPort.VControls.ControlGroup [3]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [3] = KSPSerialPort.VControls.ControlGroup [3];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [4] != KSPSerialPort.VControlsOld.ControlGroup [4]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  	KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom04' KSPSerialPort.VControls.ControlGroup [4]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [4] = KSPSerialPort.VControls.ControlGroup [4];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [5] != KSPSerialPort.VControlsOld.ControlGroup [5]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  	KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom05' KSPSerialPort.VControls.ControlGroup [5]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [5] = KSPSerialPort.VControls.ControlGroup [5];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [6] != KSPSerialPort.VControlsOld.ControlGroup [6]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  	KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom06' KSPSerialPort.VControls.ControlGroup [6]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [6] = KSPSerialPort.VControls.ControlGroup [6];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [7] != KSPSerialPort.VControlsOld.ControlGroup [7]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  	KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom07' KSPSerialPort.VControls.ControlGroup [7]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [7] = KSPSerialPort.VControls.ControlGroup [7];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [8] != KSPSerialPort.VControlsOld.ControlGroup [8]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  	KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom08' KSPSerialPort.VControls.ControlGroup [8]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [8] = KSPSerialPort.VControls.ControlGroup [8];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [9] != KSPSerialPort.VControlsOld.ControlGroup [9]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  	KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom09' KSPSerialPort.VControls.ControlGroup [9]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [9] = KSPSerialPort.VControls.ControlGroup [9];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.ControlGroup [10] != KSPSerialPort.VControlsOld.ControlGroup [10]) {  	ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  	KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: ActiveVessel.ActionGroups.SetGroup (KSPActionGroup.Custom10' KSPSerialPort.VControls.ControlGroup [10]);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: KSPSerialPort.VControlsOld.ControlGroup [10] = KSPSerialPort.VControls.ControlGroup [10];  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.SASMode != KSPSerialPort.VControlsOld.SASMode) {  	if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  		if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  			ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  		} else {  			ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  		}  	}  	KSPSerialPort.VControlsOld.SASMode = KSPSerialPort.VControls.SASMode;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.SASMode != 0 && KSPSerialPort.VControls.SASMode < 11) {  	if (!ActiveVessel.Autopilot.CanSetMode ((VesselAutopilot.AutopilotMode)(KSPSerialPort.VControls.SASMode - 1))) {  		ScreenMessages.PostScreenMessage ("KSPSerialIO: SAS mode " + KSPSerialPort.VControls.SASMode.ToString () + " not avalible");  	} else {  		ActiveVessel.Autopilot.SetMode ((VesselAutopilot.AutopilotMode)KSPSerialPort.VControls.SASMode - 1);  	}  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (KSPSerialPort.VControls.SpeedMode != KSPSerialPort.VControlsOld.SpeedMode) {  	if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  		FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  	}  	KSPSerialPort.VControlsOld.SpeedMode = KSPSerialPort.VControls.SpeedMode;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,Update,The following statement contains a magic number: if (!((KSPSerialPort.VControls.SpeedMode == 0) || ((KSPSerialPort.VControls.SpeedMode == 3) && !TargetExists ()))) {  	FlightGlobals.SetSpeedMode ((FlightGlobals.SpeedDisplayModes)(KSPSerialPort.VControls.SpeedMode - 1));  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetMaxOverHeat,The following statement contains a magic number: percent = (byte)Math.Round (percentD * 100);  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.ThrottleEnable) {  case 1:  	s.mainThrottle = KSPSerialPort.VControls.Throttle;  	break;  case 2:  	if (s.mainThrottle == 0) {  		s.mainThrottle = KSPSerialPort.VControls.Throttle;  	}  	break;  case 3:  	if (KSPSerialPort.VControls.Throttle != 0) {  		s.mainThrottle = KSPSerialPort.VControls.Throttle;  	}  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.ThrottleEnable) {  case 1:  	s.mainThrottle = KSPSerialPort.VControls.Throttle;  	break;  case 2:  	if (s.mainThrottle == 0) {  		s.mainThrottle = KSPSerialPort.VControls.Throttle;  	}  	break;  case 3:  	if (KSPSerialPort.VControls.Throttle != 0) {  		s.mainThrottle = KSPSerialPort.VControls.Throttle;  	}  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.PitchEnable) {  case 1:  	s.pitch = KSPSerialPort.VControls.Pitch;  	break;  case 2:  	if (s.pitch == 0)  		s.pitch = KSPSerialPort.VControls.Pitch;  	break;  case 3:  	if (KSPSerialPort.VControls.Pitch != 0)  		s.pitch = KSPSerialPort.VControls.Pitch;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.PitchEnable) {  case 1:  	s.pitch = KSPSerialPort.VControls.Pitch;  	break;  case 2:  	if (s.pitch == 0)  		s.pitch = KSPSerialPort.VControls.Pitch;  	break;  case 3:  	if (KSPSerialPort.VControls.Pitch != 0)  		s.pitch = KSPSerialPort.VControls.Pitch;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.RollEnable) {  case 1:  	s.roll = KSPSerialPort.VControls.Roll;  	break;  case 2:  	if (s.roll == 0)  		s.roll = KSPSerialPort.VControls.Roll;  	break;  case 3:  	if (KSPSerialPort.VControls.Roll != 0)  		s.roll = KSPSerialPort.VControls.Roll;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.RollEnable) {  case 1:  	s.roll = KSPSerialPort.VControls.Roll;  	break;  case 2:  	if (s.roll == 0)  		s.roll = KSPSerialPort.VControls.Roll;  	break;  case 3:  	if (KSPSerialPort.VControls.Roll != 0)  		s.roll = KSPSerialPort.VControls.Roll;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.YawEnable) {  case 1:  	s.yaw = KSPSerialPort.VControls.Yaw;  	break;  case 2:  	if (s.yaw == 0)  		s.yaw = KSPSerialPort.VControls.Yaw;  	break;  case 3:  	if (KSPSerialPort.VControls.Yaw != 0)  		s.yaw = KSPSerialPort.VControls.Yaw;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.YawEnable) {  case 1:  	s.yaw = KSPSerialPort.VControls.Yaw;  	break;  case 2:  	if (s.yaw == 0)  		s.yaw = KSPSerialPort.VControls.Yaw;  	break;  case 3:  	if (KSPSerialPort.VControls.Yaw != 0)  		s.yaw = KSPSerialPort.VControls.Yaw;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.TXEnable) {  case 1:  	s.X = KSPSerialPort.VControls.TX;  	break;  case 2:  	if (s.X == 0)  		s.X = KSPSerialPort.VControls.TX;  	break;  case 3:  	if (KSPSerialPort.VControls.TX != 0)  		s.X = KSPSerialPort.VControls.TX;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.TXEnable) {  case 1:  	s.X = KSPSerialPort.VControls.TX;  	break;  case 2:  	if (s.X == 0)  		s.X = KSPSerialPort.VControls.TX;  	break;  case 3:  	if (KSPSerialPort.VControls.TX != 0)  		s.X = KSPSerialPort.VControls.TX;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.TYEnable) {  case 1:  	s.Y = KSPSerialPort.VControls.TY;  	break;  case 2:  	if (s.Y == 0)  		s.Y = KSPSerialPort.VControls.TY;  	break;  case 3:  	if (KSPSerialPort.VControls.TY != 0)  		s.Y = KSPSerialPort.VControls.TY;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.TYEnable) {  case 1:  	s.Y = KSPSerialPort.VControls.TY;  	break;  case 2:  	if (s.Y == 0)  		s.Y = KSPSerialPort.VControls.TY;  	break;  case 3:  	if (KSPSerialPort.VControls.TY != 0)  		s.Y = KSPSerialPort.VControls.TY;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.TZEnable) {  case 1:  	s.Z = KSPSerialPort.VControls.TZ;  	break;  case 2:  	if (s.Z == 0)  		s.Z = KSPSerialPort.VControls.TZ;  	break;  case 3:  	if (KSPSerialPort.VControls.TZ != 0)  		s.Z = KSPSerialPort.VControls.TZ;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.TZEnable) {  case 1:  	s.Z = KSPSerialPort.VControls.TZ;  	break;  case 2:  	if (s.Z == 0)  		s.Z = KSPSerialPort.VControls.TZ;  	break;  case 3:  	if (KSPSerialPort.VControls.TZ != 0)  		s.Z = KSPSerialPort.VControls.TZ;  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.WheelSteerEnable) {  case 1:  	s.wheelSteer = KSPSerialPort.VControls.WheelSteer;  	break;  case 2:  	if (s.wheelSteer == 0) {  		s.wheelSteer = KSPSerialPort.VControls.WheelSteer;  	}  	break;  case 3:  	if (KSPSerialPort.VControls.WheelSteer != 0) {  		s.wheelSteer = KSPSerialPort.VControls.WheelSteer;  	}  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.WheelSteerEnable) {  case 1:  	s.wheelSteer = KSPSerialPort.VControls.WheelSteer;  	break;  case 2:  	if (s.wheelSteer == 0) {  		s.wheelSteer = KSPSerialPort.VControls.WheelSteer;  	}  	break;  case 3:  	if (KSPSerialPort.VControls.WheelSteer != 0) {  		s.wheelSteer = KSPSerialPort.VControls.WheelSteer;  	}  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.WheelThrottleEnable) {  case 1:  	s.wheelThrottle = KSPSerialPort.VControls.WheelThrottle;  	break;  case 2:  	if (s.wheelThrottle == 0) {  		s.wheelThrottle = KSPSerialPort.VControls.WheelThrottle;  	}  	break;  case 3:  	if (KSPSerialPort.VControls.WheelThrottle != 0) {  		s.wheelThrottle = KSPSerialPort.VControls.WheelThrottle;  	}  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,AxisInput,The following statement contains a magic number: switch (SettingsNStuff.WheelThrottleEnable) {  case 1:  	s.wheelThrottle = KSPSerialPort.VControls.WheelThrottle;  	break;  case 2:  	if (s.wheelThrottle == 0) {  		s.wheelThrottle = KSPSerialPort.VControls.WheelThrottle;  	}  	break;  case 3:  	if (KSPSerialPort.VControls.WheelThrottle != 0) {  		s.wheelThrottle = KSPSerialPort.VControls.WheelThrottle;  	}  	break;  default:  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: switch (name.ToLower ()) {  case "sun":  	SOI = 100;  	break;  case "moho":  	SOI = 110;  	break;  case "eve":  	SOI = 120;  	break;  case "gilly":  	SOI = 121;  	break;  case "kerbin":  	SOI = 130;  	break;  case "mun":  	SOI = 131;  	break;  case "minmus":  	SOI = 132;  	break;  case "duna":  	SOI = 140;  	break;  case "ike":  	SOI = 141;  	break;  case "dres":  	SOI = 150;  	break;  case "jool":  	SOI = 160;  	break;  case "laythe":  	SOI = 161;  	break;  case "vall":  	SOI = 162;  	break;  case "tylo":  	SOI = 163;  	break;  case "bop":  	SOI = 164;  	break;  case "pol":  	SOI = 165;  	break;  case "eeloo":  	SOI = 170;  	break;  default:  	SOI = 0;  	break;  }  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 100;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 110;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 120;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 121;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 130;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 131;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 132;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 140;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 141;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 150;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 160;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 161;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 162;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 163;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 164;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 165;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,GetSOINumber,The following statement contains a magic number: SOI = 170;  
Magic Number,KSPSerialIO,KSPSerialIO,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,updateHeadingPitchRollField,The following statement contains a magic number: return Quaternion.Inverse (Quaternion.Euler (90' 0' 0) * Quaternion.Inverse (v.GetTransform ().rotation) * rotationSurface);  
Missing Default,KSPSerialIO,KSPSerialPort,D:\newReposJune17\zitron-git_KSPSerialIO\KSPSerialIO\KSPIO.cs,processCOM,The following switch statement is missing a default case: switch (id) {  case HSPid:  	structSize = Marshal.SizeOf (HPacket);  	break;  case Cid:  	structSize = Marshal.SizeOf (CPacket);  	break;  }  
