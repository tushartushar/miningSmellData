Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Drexyia.WebSvc.Process.WebSvcSync.Operations,RetrieveSyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcSync\Operations\RetrieveSyncOp.cs,RetrieveSyncOp,The method has 5 parameters. Parameters: webSvcPath' timeoutPeriod' parser' configProxy' log
Long Parameter List,Drexyia.WebSvc.Process.WebSvcAsync.Operations,CallAsyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcAsync\Operations\CallAsyncOp.cs,CallAsyncOp,The method has 5 parameters. Parameters: webSvcMethod' cancelToken' timeoutPeriod' proxy' log
Long Parameter List,Drexyia.WebSvc.Process.WebSvcAsync.Operations,RetrieveAsyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcAsync\Operations\RetrieveAsyncOp.cs,RetrieveAsyncOp,The method has 5 parameters. Parameters: webSvcPath' timeoutPeriod' parser' configProxy' log
Long Statement,Drexyia.WebSvc.Process.WebSvcSync.Operations,CallSyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcSync\Operations\CallSyncOp.cs,Work,The length of the statement  "                webRequest.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION] = _webSvcMethod.Request.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION]; " is 155.
Long Statement,Drexyia.WebSvc.Process.WebSvcAsync.Operations,CallAsyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcAsync\Operations\CallAsyncOp.cs,Work,The length of the statement  "                webRequest.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION] = _webSvcMethod.Request.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION]; " is 155.
Empty Catch Block,Drexyia.WebSvc.Process.WebSvcAsync.Operations,CallAsyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcAsync\Operations\CallAsyncOp.cs,TearDown,The method has an empty catch block.
Magic Number,Drexyia.WebSvc.Process,WsdlDownload,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WsdlDownload.cs,DownloadFile,The following statement contains a magic number: client.Timeout = _timeoutInSeconds * 1000;
Magic Number,Drexyia.WebSvc.Process.WebSvcSync.Operations,CallSyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcSync\Operations\CallSyncOp.cs,Work,The following statement contains a magic number: try {                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.CreateDefault(new Uri(_webSvcMethod.ServiceURI));                    webRequest.Method = "Post";                  webRequest.ContentType = _webSvcMethod.Request.Headers[model.WebSvcMessage.HEADER_NAME_CONTENT_TYPE];                  webRequest.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION] = _webSvcMethod.Request.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION];                  webRequest.ServicePoint.Expect100Continue = false;                  webRequest.Proxy = base.WebProxy;                    webRequest.Timeout = base.TimeoutInSec * 1000;                    _streamWriter = new StreamWriter(webRequest.GetRequestStream());                    _streamWriter.Write(_webSvcMethod.Request.Body);                  _streamWriter.Flush();                  _streamWriter.Close();                    _webResponse = (HttpWebResponse)webRequest.GetResponse();                    base.Log.Info("Work Response Process " + base.Name);                    _streamReader = new StreamReader(_webResponse.GetResponseStream());                    string body = _streamReader.ReadToEnd();                  string status = ((int)_webResponse.StatusCode).ToString() + " " + _webResponse.StatusCode.ToString();                  Dictionary<string' string> headers = new Dictionary<string' string>();                  foreach (string key in _webResponse.Headers.Keys) {                      headers[key] = _webResponse.Headers[key];                  }                    var response = new model.WebSvcMessageResponse();                  response.Body = body;                  response.Status = status;                  response.Headers = headers;                    return response;                }              finally               {                  if (_webResponse != null) {                      _webResponse.Close();                  }                  if (_streamWriter != null) {                      _streamWriter.Close();                  }                  if (_streamReader != null) {                      _streamReader.Close();                  }              }
Magic Number,Drexyia.WebSvc.Process.WebSvcAsync,TimeoutObject,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcAsync\TimeoutObject.cs,CheckForTimeout,The following statement contains a magic number: for (int i = 0; i < _timeOutInSeconds; i++) {                  if (base.IsWorkComplete) {                      return;                  }                    Thread.Sleep(1000);              }
Magic Number,Drexyia.WebSvc.Process.WebSvcAsync.Operations,CallAsyncOp,C:\repos\drexyia_WsdlUI\Drexyia\Drexyia.WebSvc.Process\WebSvcAsync\Operations\CallAsyncOp.cs,Work,The following statement contains a magic number: try {                    if (_cancelObject != null) {                      _cancelObject.Start();                  }                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.CreateDefault(new Uri(_webSvcMethod.ServiceURI));                    webRequest.Method = "Post";                  webRequest.ContentType = _webSvcMethod.Request.Headers[model.WebSvcMessage.HEADER_NAME_CONTENT_TYPE];                  webRequest.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION] = _webSvcMethod.Request.Headers[model.WebSvcMessageRequest.HEADER_NAME_SOAP_ACTION];                  webRequest.ServicePoint.Expect100Continue = false;                  webRequest.Proxy = base.WebProxy;                  webRequest.Timeout = base.TimeoutInSec * 1000;                    _streamWriter = new StreamWriter(webRequest.GetRequestStream());                    _streamWriter.Write(_webSvcMethod.Request.Body);                  _streamWriter.Flush();                  _streamWriter.Close();                    _webResponse = (HttpWebResponse)webRequest.GetResponse();                    if (_cancelToken != null) {                      if (_cancelToken.IsCancellationRequested) {                          base.Log.Info("Work Response Cancel " + base.Name);                          return;                      }                  }                  base.Log.Info("Work Response Process " + base.Name);                    _streamReader = new StreamReader(_webResponse.GetResponseStream());                    string body = _streamReader.ReadToEnd();                  string status = ((int)_webResponse.StatusCode).ToString() + " " + _webResponse.StatusCode.ToString();                  Dictionary<string' string> headers = new Dictionary<string' string>();                  foreach (string key in _webResponse.Headers.Keys) {                      headers[key] = _webResponse.Headers[key];                  }                    if (OnComplete != null) {                        DateTime endTime = DateTime.Now;                        OnComplete(this'                          new process.WebSvcAsync.EventParams.AsyncArgsCompleteCall(base.Name' startTime' endTime'                              new process.WebSvcAsync.Result.CallAsyncResult(body' status' headers)                              ));                    }              }              catch (System.Net.WebException ex)               {                  if (_cancelToken != null) {                        //if exception is thrown on the server then check whether user has cancelled before returning                      if (_cancelToken.IsCancellationRequested) {                          base.Log.Info("Work Response Exception' User Cancelled " + Name + " " + ex.Message);                          return;                      }                  }                    //throw for the base class to handle                  throw ex;                }              finally               {                  TearDown();              }
