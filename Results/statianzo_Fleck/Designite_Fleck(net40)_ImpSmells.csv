Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,Cyclomatic complexity of the method is 12
Complex Method,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,Cyclomatic complexity of the method is 10
Long Parameter List,Fleck,HandlerFactory,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\HandlerFactory.cs,BuildHandler,The method has 6 parameters. Parameters: request' onMessage' onClose' onBinary' onPing' onPong
Long Parameter List,Fleck,QueuedStream,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fleck,QueuedStream,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fleck,QueuedStream,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWriteInternal,The method has 6 parameters. Parameters: buffer' offset' count' callback' state' queued
Long Parameter List,Fleck,WriteData,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\QueuedStream.cs,WriteData,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fleck,WebSocketConnection,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\WebSocketConnection.cs,WebSocketConnection,The method has 5 parameters. Parameters: socket' initialize' parseRequest' handlerFactory' negotiateSubProtocol
Long Parameter List,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,Create,The method has 6 parameters. Parameters: request' onMessage' onClose' onBinary' onPing' onPong
Long Parameter List,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The method has 7 parameters. Parameters: frameType' data' onMessage' onClose' onBinary' onPing' onPong
Long Identifier,Fleck,RequestParser,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\RequestParser.cs,,The length of the parameter FlashSocketPolicyRequestPattern is 31.
Long Identifier,Fleck,RequestParser,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\RequestParser.cs,,The length of the parameter _FlashSocketPolicyRequestRegex is 30.
Long Statement,Fleck,QueuedStream,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\QueuedStream.cs,EndWrite,The length of the statement  "                        "QueuedStream does not support synchronous write operations. Please wait for callback to be invoked before calling EndWrite."); " is 127.
Long Statement,Fleck,QueuedStream,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWriteInternal,The length of the statement  "                            data.AsyncResult.ActualResult = BeginWriteInternal(data.Buffer' data.Offset' data.Count' data.Callback' data.State' data); " is 122.
Long Statement,Fleck,QueuedStream,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWriteInternal,The length of the statement  "            // this is especially important if the underlying stream completed the operation synchronously (hence "result.CompletedSynchronously" is true!) " is 143.
Long Statement,Fleck,SocketWrapper,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\SocketWrapper.cs,Accept,The length of the statement  "            Func<IAsyncResult' ISocket> end = r => _tokenSource.Token.IsCancellationRequested ? null : new SocketWrapper(_socket.EndAccept(r)); " is 131.
Long Statement,Fleck,WebSocketServer,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\WebSocketServer.cs,ParseIPAddress,The length of the statement  "                    throw new FormatException("Failed to parse the IP address part of the location. Please make sure you specify a valid IP address. Use 0.0.0.0 or [::] to listen on all interfaces."' ex); " is 184.
Long Statement,Fleck,WebSocketServer,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\WebSocketServer.cs,OnClientConnect,The length of the statement  "            FleckLog.Debug(String.Format("Client connected from {0}:{1}"' clientSocket.RemoteIpAddress' clientSocket.RemotePort.ToString())); " is 129.
Long Statement,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,Create,The length of the statement  "                ReceiveData = d => Hybi13Handler.ReceiveData(d' readState' (op' data) => Hybi13Handler.ProcessFrame(op' data' onMessage' onClose' onBinary' onPing' onPong)) " is 156.
Complex Conditional,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The conditional expression  "!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue)"  is complex.
Magic Number,Fleck,IntExtensions,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\IntExtensions.cs,ToLittleEndianInt,The following statement contains a magic number: source.Length == 2
Magic Number,Fleck,IntExtensions,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\IntExtensions.cs,ToLittleEndianInt,The following statement contains a magic number: source.Length == 8
Magic Number,Fleck,SocketWrapper,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\SocketWrapper.cs,SetKeepAlive,The following statement contains a magic number: byte[] inArray = new byte[size * 3];
Magic Number,Fleck,SocketWrapper,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\SocketWrapper.cs,SetKeepAlive,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(retryInterval)' 0' inArray' size * 2' size);
Magic Number,Fleck,WebSocketServer,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\WebSocketServer.cs,Start,The following statement contains a magic number: ListenerSocket.Listen(100);
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,FrameText,The following statement contains a magic number: var wrappedBytes = new byte[bytes.Length + 2];
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,Handshake,The following statement contains a magic number: var challenge = new ArraySegment<byte>(request.Bytes' request.Bytes.Length - 8' 8);
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,Handshake,The following statement contains a magic number: var challenge = new ArraySegment<byte>(request.Bytes' request.Bytes.Length - 8' 8);
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: var rawAnswer = new byte[16];
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(result1Bytes' 0' rawAnswer' 0' 4);
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(result2Bytes' 0' rawAnswer' 4' 4);
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(result2Bytes' 0' rawAnswer' 4' 4);
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(challenge.Array' challenge.Offset' rawAnswer' 8' 8);
Magic Number,Fleck.Handlers,Draft76Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(challenge.Array' challenge.Offset' rawAnswer' 8' 8);
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,FrameData,The following statement contains a magic number: byte op = (byte)((byte)frameType + 128);
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,FrameData,The following statement contains a magic number: memoryStream.WriteByte(127);
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: var isFinal = (data[0] & 128) != 0;
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: var reservedBits = (data[0] & 112);
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: var frameType = (FrameType)(data[0] & 15);
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: var isMasked = (data[1] & 128) != 0;
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: var length = (data[1] & 127);
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: var index = 2;
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: data.Count < index + 8
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: index += 8;
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: length == 127
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: data.Count < index + 4
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: var maskBytes = data.Skip(index).Take(4).ToArray();
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: index += 4;
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: payloadData[i] = (byte)(data[index+i] ^ maskBytes[i % 4]);
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: data.Count >= 2
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Missing Default,Fleck,HandlerFactory,D:\research\architectureSmells\repos1\statianzo_Fleck\src\Fleck\HandlerFactory.cs,BuildHandler,The following switch statement is missing a default case: switch (version)              {                  case "76":                      return Draft76Handler.Create(request' onMessage);                  case "7":                  case "8":                  case "13":                      return Hybi13Handler.Create(request' onMessage' onClose' onBinary' onPing' onPong);                  case "policy-file-request":                      return FlashSocketPolicyRequestHandler.Create(request);              }
