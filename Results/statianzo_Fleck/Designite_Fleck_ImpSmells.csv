Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,Cyclomatic complexity of the method is 9
Long Parameter List,Fleck,HandlerFactory,C:\repos\statianzo_Fleck\src\Fleck\HandlerFactory.cs,BuildHandler,The method has 6 parameters. Parameters: request' onMessage' onClose' onBinary' onPing' onPong
Long Parameter List,Fleck,WebSocketConnection,C:\repos\statianzo_Fleck\src\Fleck\WebSocketConnection.cs,WebSocketConnection,The method has 5 parameters. Parameters: socket' initialize' parseRequest' handlerFactory' negotiateSubProtocol
Long Parameter List,Fleck,QueuedStream,C:\repos\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fleck,QueuedStream,C:\repos\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fleck,QueuedStream,C:\repos\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWriteInternal,The method has 6 parameters. Parameters: buffer' offset' count' callback' state' queued
Long Parameter List,Fleck,WriteData,C:\repos\statianzo_Fleck\src\Fleck\QueuedStream.cs,WriteData,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,Create,The method has 6 parameters. Parameters: request' onMessage' onClose' onBinary' onPing' onPong
Long Parameter List,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The method has 7 parameters. Parameters: frameType' data' onMessage' onClose' onBinary' onPing' onPong
Long Identifier,Fleck,RequestParser,C:\repos\statianzo_Fleck\src\Fleck\RequestParser.cs,,The length of the parameter FlashSocketPolicyRequestPattern is 31.
Long Identifier,Fleck,RequestParser,C:\repos\statianzo_Fleck\src\Fleck\RequestParser.cs,,The length of the parameter _FlashSocketPolicyRequestRegex is 30.
Long Statement,Fleck,SocketWrapper,C:\repos\statianzo_Fleck\src\Fleck\SocketWrapper.cs,Accept,The length of the statement  "            Func<IAsyncResult' ISocket> end = r => _tokenSource.Token.IsCancellationRequested ? null : new SocketWrapper(_socket.EndAccept(r)); " is 131.
Long Statement,Fleck,WebSocketServer,C:\repos\statianzo_Fleck\src\Fleck\WebSocketServer.cs,ParseIPAddress,The length of the statement  "                    throw new FormatException("Failed to parse the IP address part of the location. Please make sure you specify a valid IP address. Use 0.0.0.0 or [::] to listen on all interfaces."' ex); " is 184.
Long Statement,Fleck,WebSocketServer,C:\repos\statianzo_Fleck\src\Fleck\WebSocketServer.cs,OnClientConnect,The length of the statement  "            FleckLog.Debug(String.Format("Client connected from {0}:{1}"' clientSocket.RemoteIpAddress' clientSocket.RemotePort.ToString())); " is 129.
Long Statement,Fleck,QueuedStream,C:\repos\statianzo_Fleck\src\Fleck\QueuedStream.cs,EndWrite,The length of the statement  "                        "QueuedStream does not support synchronous write operations. Please wait for callback to be invoked before calling EndWrite."); " is 127.
Long Statement,Fleck,QueuedStream,C:\repos\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWriteInternal,The length of the statement  "                            data.AsyncResult.ActualResult = BeginWriteInternal(data.Buffer' data.Offset' data.Count' data.Callback' data.State' data); " is 122.
Long Statement,Fleck,QueuedStream,C:\repos\statianzo_Fleck\src\Fleck\QueuedStream.cs,BeginWriteInternal,The length of the statement  "            // this is especially important if the underlying stream completed the operation synchronously (hence "result.CompletedSynchronously" is true!) " is 143.
Long Statement,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,Create,The length of the statement  "                ReceiveData = d => Hybi13Handler.ReceiveData(d' readState' (op' data) => Hybi13Handler.ProcessFrame(op' data' onMessage' onClose' onBinary' onPing' onPong)) " is 156.
Complex Conditional,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The conditional expression  "!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue)"  is complex.
Magic Number,Fleck,WebSocketServer,C:\repos\statianzo_Fleck\src\Fleck\WebSocketServer.cs,Start,The following statement contains a magic number: ListenerSocket.Listen(100);
Magic Number,Fleck,IntExtensions,C:\repos\statianzo_Fleck\src\Fleck\IntExtensions.cs,ToLittleEndianInt,The following statement contains a magic number: if(source.Length == 2)                  return BitConverter.ToUInt16(source' 0);
Magic Number,Fleck,IntExtensions,C:\repos\statianzo_Fleck\src\Fleck\IntExtensions.cs,ToLittleEndianInt,The following statement contains a magic number: if(source.Length == 8)                  return (int)BitConverter.ToUInt64(source' 0);
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,FrameText,The following statement contains a magic number: var wrappedBytes = new byte[bytes.Length + 2];
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,Handshake,The following statement contains a magic number: var challenge = new ArraySegment<byte>(request.Bytes' request.Bytes.Length - 8' 8);
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,Handshake,The following statement contains a magic number: var challenge = new ArraySegment<byte>(request.Bytes' request.Bytes.Length - 8' 8);
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: var rawAnswer = new byte[16];
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(result1Bytes' 0' rawAnswer' 0' 4);
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(result2Bytes' 0' rawAnswer' 4' 4);
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(result2Bytes' 0' rawAnswer' 4' 4);
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(challenge.Array' challenge.Offset' rawAnswer' 8' 8);
Magic Number,Fleck.Handlers,Draft76Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Draft76Handler.cs,CalculateAnswerBytes,The following statement contains a magic number: Array.Copy(challenge.Array' challenge.Offset' rawAnswer' 8' 8);
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,FrameData,The following statement contains a magic number: byte op = (byte)((byte)frameType + 128);
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,FrameData,The following statement contains a magic number: if (payload.Length > UInt16.MaxValue) {                  memoryStream.WriteByte(127);                  var lengthBytes = payload.Length.ToBigEndianBytes<ulong>();                  memoryStream.Write(lengthBytes' 0' lengthBytes.Length);              } else if (payload.Length > 125) {                  memoryStream.WriteByte(126);                  var lengthBytes = payload.Length.ToBigEndianBytes<ushort>();                  memoryStream.Write(lengthBytes' 0' lengthBytes.Length);              } else {                  memoryStream.WriteByte((byte)payload.Length);              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,FrameData,The following statement contains a magic number: if (payload.Length > UInt16.MaxValue) {                  memoryStream.WriteByte(127);                  var lengthBytes = payload.Length.ToBigEndianBytes<ulong>();                  memoryStream.Write(lengthBytes' 0' lengthBytes.Length);              } else if (payload.Length > 125) {                  memoryStream.WriteByte(126);                  var lengthBytes = payload.Length.ToBigEndianBytes<ushort>();                  memoryStream.Write(lengthBytes' 0' lengthBytes.Length);              } else {                  memoryStream.WriteByte((byte)payload.Length);              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,FrameData,The following statement contains a magic number: if (payload.Length > UInt16.MaxValue) {                  memoryStream.WriteByte(127);                  var lengthBytes = payload.Length.ToBigEndianBytes<ulong>();                  memoryStream.Write(lengthBytes' 0' lengthBytes.Length);              } else if (payload.Length > 125) {                  memoryStream.WriteByte(126);                  var lengthBytes = payload.Length.ToBigEndianBytes<ushort>();                  memoryStream.Write(lengthBytes' 0' lengthBytes.Length);              } else {                  memoryStream.WriteByte((byte)payload.Length);              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ReceiveData,The following statement contains a magic number: while (data.Count >= 2)              {                  var isFinal = (data[0] & 128) != 0;                  var reservedBits = (data[0] & 112);                  var frameType = (FrameType)(data[0] & 15);                  var isMasked = (data[1] & 128) != 0;                  var length = (data[1] & 127);                                                      if (!isMasked                      || !Enum.IsDefined(typeof(FrameType)' frameType)                      || reservedBits != 0 //Must be zero per spec 5.2                      || (frameType == FrameType.Continuation && !readState.FrameType.HasValue))                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                    var index = 2;                  int payloadLength;                                    if (length == 127)                  {                      if (data.Count < index + 8)                          return; //Not complete                      payloadLength = data.Skip(index).Take(8).ToArray().ToLittleEndianInt();                      index += 8;                  }                  else if (length == 126)                  {                      if (data.Count < index + 2)                          return; //Not complete                      payloadLength = data.Skip(index).Take(2).ToArray().ToLittleEndianInt();                      index += 2;                  }                  else                  {                      payloadLength = length;                  }                                    if (data.Count < index + 4)                       return; //Not complete                                   var maskBytes = data.Skip(index).Take(4).ToArray();                                    index += 4;                                                      if (data.Count < index + payloadLength)                       return; //Not complete                                    var payload = data                                  .Skip(index)                                  .Take(payloadLength)                                  .Select((x' i) => (byte)(x ^ maskBytes[i % 4]));                                                        readState.Data.AddRange(payload);                  data.RemoveRange(0' index + payloadLength);                                    if (frameType != FrameType.Continuation)                      readState.FrameType = frameType;                                    if (isFinal && readState.FrameType.HasValue)                  {                      var stateData = readState.Data.ToArray();                      var stateFrameType = readState.FrameType;                      readState.Clear();                                            processFrame(stateFrameType.Value' stateData);                  }              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Magic Number,Fleck.Handlers,Hybi13Handler,C:\repos\statianzo_Fleck\src\Fleck\Handlers\Hybi13Handler.cs,ProcessFrame,The following statement contains a magic number: switch (frameType)              {              case FrameType.Close:                  if (data.Length == 1 || data.Length>125)                      throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                                        if (data.Length >= 2)                  {                      var closeCode = (ushort)data.Take(2).ToArray().ToLittleEndianInt();                      if (!WebSocketStatusCodes.ValidCloseCodes.Contains(closeCode) && (closeCode < 3000 || closeCode > 4999))                          throw new WebSocketException(WebSocketStatusCodes.ProtocolError);                  }                                    if (data.Length > 2)                      ReadUTF8PayloadData(data.Skip(2).ToArray());                                    onClose();                  break;              case FrameType.Binary:                  onBinary(data);                  break;              case FrameType.Ping:                  onPing(data);                  break;              case FrameType.Pong:                  onPong(data);                  break;              case FrameType.Text:                  onMessage(ReadUTF8PayloadData(data));                  break;              default:                  FleckLog.Debug("Received unhandled " + frameType);                  break;              }
Missing Default,Fleck,HandlerFactory,C:\repos\statianzo_Fleck\src\Fleck\HandlerFactory.cs,BuildHandler,The following switch statement is missing a default case: switch (version)              {                  case "76":                      return Draft76Handler.Create(request' onMessage);                  case "7":                  case "8":                  case "13":                      return Hybi13Handler.Create(request' onMessage' onClose' onBinary' onPing' onPong);                  case "policy-file-request":                      return FlashSocketPolicyRequestHandler.Create(request);              }
