Implementation smell,Namespace,Class,File,Method,Description
Complex Method,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,GetPlugins,Cyclomatic complexity of the method is 8
Long Identifier,dotless.Core.Response,CachedCssResponse,C:\repos\dotless_dotless\src\dotless.AspNet\Response\CachedCssResponse.cs,CachedCssResponse,The length of the parameter isCompressionHandledByResponse is 30.
Long Identifier,dotless.Core.Response,CachedCssResponse,C:\repos\dotless_dotless\src\dotless.AspNet\Response\CachedCssResponse.cs,CachedCssResponse,The length of the parameter isCompressionHandledByResponse is 30.
Long Identifier,dotless.Core.Response,CssResponse,C:\repos\dotless_dotless\src\dotless.AspNet\Response\CssResponse.cs,CssResponse,The length of the parameter isCompressionHandledByResponse is 30.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            dotlessConfiguration.HttpExpiryInMinutes = GetIntValue(section' "httpExpiryInMinutes") ?? dotlessConfiguration.HttpExpiryInMinutes; " is 131.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            dotlessConfiguration.DisableUrlRewriting = GetBoolValue(section' "disableUrlRewriting") ?? dotlessConfiguration.DisableUrlRewriting; " is 132.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            dotlessConfiguration.ImportAllFilesAsLess = GetBoolValue(section' "importAllFilesAsLess") ?? dotlessConfiguration.ImportAllFilesAsLess; " is 135.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            dotlessConfiguration.HandleWebCompression = GetBoolValue(section' "handleWebCompression") ?? dotlessConfiguration.HandleWebCompression; " is 135.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            dotlessConfiguration.DisableParameters = GetBoolValue(section' "disableParameters") ?? dotlessConfiguration.DisableParameters; " is 126.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            dotlessConfiguration.KeepFirstSpecialComment = GetBoolValue(section' "keepFirstSpecialComment") ?? dotlessConfiguration.KeepFirstSpecialComment; " is 144.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            dotlessConfiguration.DisableVariableRedefines = GetBoolValue(section' "disableVariableRedefines") ?? dotlessConfiguration.DisableVariableRedefines; " is 147.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "            if (dotlessConfiguration.SessionMode == DotlessSessionStateMode.QueryParam && string.IsNullOrEmpty(dotlessConfiguration.SessionQueryParamName)) " is 143.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The length of the statement  "                throw new ConfigurationErrorsException("The 'sessionQueryParamName' should be not empty when sessionMode is set to 'queryParam'"' section); " is 139.
Long Statement,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,GetPlugins,The length of the statement  "                        string.Format("Cannot find plugin called {0}. If it is an external plugin' make sure the assembly is referenced."' name)); " is 122.
Long Statement,dotless.Core.Response,QValue,C:\repos\dotless_dotless\src\dotless.AspNet\Response\QValue.cs,ParseInternal,The length of the statement  "                float.TryParse(parts[2]' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out target._weight); " is 137.
Long Statement,dotless.Core.Response,QValueList,C:\repos\dotless_dotless\src\dotless.AspNet\Response\QValueList.cs,Find,The length of the statement  "            Predicate<QValue> criteria = delegate(QValue item) { return item.Name.Equals(name' StringComparison.OrdinalIgnoreCase); }; " is 122.
Empty Catch Block,dotless.Core.configuration,DotlessConfigurationSectionHandler,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\DotlessConfigurationSectionHandler.cs,Create,The method has an empty catch block.
Magic Number,dotless.Core,LessCssHttpHandler,C:\repos\dotless_dotless\src\dotless.AspNet\LessCssHttpHandler.cs,ProcessRequest,The following statement contains a magic number: try              {                  var handler = Container.GetRequiredService<HandlerImpl>();                    handler.Execute();              }              catch (System.IO.FileNotFoundException ex)              {                  context.Response.StatusCode = 404;                  if (context.Request.IsLocal)                  {                      context.Response.Write("/* File Not Found while parsing: " + ex.Message + " */");                  }                  else                  {                      context.Response.Write("/* Error Occurred. Consult log or view on local machine. */");                  }                  context.Response.End();              }              catch (System.IO.IOException ex)              {                  context.Response.StatusCode = 500;                  if (context.Request.IsLocal)                  {                      context.Response.Write("/* Error in less parsing: " + ex.Message + " */");                  }                  else                  {                      context.Response.Write("/* Error Occurred. Consult log or view on local machine. */");                  }                  context.Response.End();              }
Magic Number,dotless.Core,LessCssHttpHandler,C:\repos\dotless_dotless\src\dotless.AspNet\LessCssHttpHandler.cs,ProcessRequest,The following statement contains a magic number: try              {                  var handler = Container.GetRequiredService<HandlerImpl>();                    handler.Execute();              }              catch (System.IO.FileNotFoundException ex)              {                  context.Response.StatusCode = 404;                  if (context.Request.IsLocal)                  {                      context.Response.Write("/* File Not Found while parsing: " + ex.Message + " */");                  }                  else                  {                      context.Response.Write("/* Error Occurred. Consult log or view on local machine. */");                  }                  context.Response.End();              }              catch (System.IO.IOException ex)              {                  context.Response.StatusCode = 500;                  if (context.Request.IsLocal)                  {                      context.Response.Write("/* Error in less parsing: " + ex.Message + " */");                  }                  else                  {                      context.Response.Write("/* Error Occurred. Consult log or view on local machine. */");                  }                  context.Response.End();              }
Magic Number,dotless.Core.Response,QValue,C:\repos\dotless_dotless\src\dotless.AspNet\Response\QValue.cs,ParseInternal,The following statement contains a magic number: string[] parts = value.Split(delimiters' 3);
Magic Number,dotless.Core.Response,QValue,C:\repos\dotless_dotless\src\dotless.AspNet\Response\QValue.cs,ParseInternal,The following statement contains a magic number: if (parts.Length == 3)              {                  float.TryParse(parts[2]' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out target._weight);              }
Magic Number,dotless.Core.Response,QValue,C:\repos\dotless_dotless\src\dotless.AspNet\Response\QValue.cs,ParseInternal,The following statement contains a magic number: if (parts.Length == 3)              {                  float.TryParse(parts[2]' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out target._weight);              }
Missing Default,dotless.Core.configuration,XmlConfigurationInterpreter,C:\repos\dotless_dotless\src\dotless.AspNet\configuration\XmlConfigurationInterpreter.cs,Process,The following switch statement is missing a default case: switch (logLevel.ToLowerInvariant())              {                  case "info":                      dotlessConfiguration.LogLevel = LogLevel.Info;                      break;                  case "debug":                      dotlessConfiguration.LogLevel = LogLevel.Debug;                      break;                  case "warn":                      dotlessConfiguration.LogLevel = LogLevel.Warn;                      break;                  case "error":                      dotlessConfiguration.LogLevel = LogLevel.Error;                      break;                  case "default":                      break;              }
