Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Eto.Gl.Gtk,GLDrawingArea,C:\repos\bchavez_SharpFlame\source\Eto.Gl.Gtk\GLDrawingArea.cs,OnExposeEvent,Cyclomatic complexity of the method is 8
Long Statement,Eto.Gl.Gtk,GLDrawingArea,C:\repos\bchavez_SharpFlame\source\Eto.Gl.Gtk\GLDrawingArea.cs,OnExposeEvent,The length of the statement  "                GraphicsMode graphicsMode = new GraphicsMode(colorBufferColorFormat' DepthBPP' StencilBPP' Samples' accumulationColorFormat' buffers' Stereo); " is 142.
Long Statement,Eto.Gl.Gtk,GLDrawingArea,C:\repos\bchavez_SharpFlame\source\Eto.Gl.Gtk\GLDrawingArea.cs,OnExposeEvent,The length of the statement  "            eventExpose.Window.Display.Sync(); // Add Sync call to fix resize rendering problem (Jay L. T. Cornwall) - How does this affect VSync?            " is 134.
Magic Number,Eto.Gl.Gtk,GLDrawingArea,C:\repos\bchavez_SharpFlame\source\Eto.Gl.Gtk\GLDrawingArea.cs,OnExposeEvent,The following statement contains a magic number: if (!initialized)              {                  initialized = true;                    // If this looks uninitialized...  initialize.                  if( ColorBPP == 0 )                  {                      ColorBPP = 24;                                            if( DepthBPP == 0 ) DepthBPP = 16;                  }                                    ColorFormat colorBufferColorFormat = new ColorFormat(ColorBPP);                                    ColorFormat accumulationColorFormat = new ColorFormat(AccumulatorBPP);                                    int buffers = 2;                  if( SingleBuffer ) buffers--;                                    GraphicsMode graphicsMode = new GraphicsMode(colorBufferColorFormat' DepthBPP' StencilBPP' Samples' accumulationColorFormat' buffers' Stereo);                    // IWindowInfo                  if (Configuration.RunningOnWindows)                  {                      IntPtr windowHandle = gdk_win32_drawable_get_handle(GdkWindow.Handle);                      windowInfo = OpenTK.Platform.Utilities.CreateWindowsWindowInfo(windowHandle);                  }                  else if (Configuration.RunningOnMacOS)                  {                      IntPtr windowHandle = gdk_x11_drawable_get_xid(GdkWindow.Handle);                      bool ownHandle = true;                      bool isControl = true;                      windowInfo = OpenTK.Platform.Utilities.CreateMacOSCarbonWindowInfo(windowHandle' ownHandle' isControl);                  }                  else if (Configuration.RunningOnX11)                  {                      IntPtr display = gdk_x11_display_get_xdisplay(Display.Handle);                      int screen = Screen.Number;                      IntPtr windowHandle = gdk_x11_drawable_get_xid(GdkWindow.Handle);                      IntPtr rootWindow = gdk_x11_drawable_get_xid(RootWindow.Handle);                        IntPtr visualInfo;                      if (graphicsMode.Index.HasValue)                      {                          XVisualInfo info = new XVisualInfo();                          info.VisualID = graphicsMode.Index.Value;                          int dummy;                          visualInfo = XGetVisualInfo(display' XVisualInfoMask.ID' ref info' out dummy);                      }                      else                      {                          visualInfo = GetVisualInfo(display);                      }                        windowInfo = OpenTK.Platform.Utilities.CreateX11WindowInfo(display' screen' windowHandle' rootWindow' visualInfo);                      XFree(visualInfo);                  }                  else throw new PlatformNotSupportedException();                    // GraphicsContext                  graphicsContext = new GraphicsContext(graphicsMode' windowInfo' GlVersionMajor' GlVersionMinor' graphicsContextFlags);                  MakeCurrent();                    if (GraphicsContext.ShareContexts)                  {                      Interlocked.Increment(ref graphicsContextCount);                        if (!sharedContextInitialized)                      {                          sharedContextInitialized = true;                          ((IGraphicsContextInternal)graphicsContext).LoadAll();                          OnGraphicsContextInitialized();                      }                  }                  else                  {                      ((IGraphicsContextInternal)graphicsContext).LoadAll();                      OnGraphicsContextInitialized();                  }                    OnInitialized();              }              else              {                  graphicsContext.MakeCurrent(windowInfo);              }
Magic Number,Eto.Gl.Gtk,GLDrawingArea,C:\repos\bchavez_SharpFlame\source\Eto.Gl.Gtk\GLDrawingArea.cs,OnExposeEvent,The following statement contains a magic number: if (!initialized)              {                  initialized = true;                    // If this looks uninitialized...  initialize.                  if( ColorBPP == 0 )                  {                      ColorBPP = 24;                                            if( DepthBPP == 0 ) DepthBPP = 16;                  }                                    ColorFormat colorBufferColorFormat = new ColorFormat(ColorBPP);                                    ColorFormat accumulationColorFormat = new ColorFormat(AccumulatorBPP);                                    int buffers = 2;                  if( SingleBuffer ) buffers--;                                    GraphicsMode graphicsMode = new GraphicsMode(colorBufferColorFormat' DepthBPP' StencilBPP' Samples' accumulationColorFormat' buffers' Stereo);                    // IWindowInfo                  if (Configuration.RunningOnWindows)                  {                      IntPtr windowHandle = gdk_win32_drawable_get_handle(GdkWindow.Handle);                      windowInfo = OpenTK.Platform.Utilities.CreateWindowsWindowInfo(windowHandle);                  }                  else if (Configuration.RunningOnMacOS)                  {                      IntPtr windowHandle = gdk_x11_drawable_get_xid(GdkWindow.Handle);                      bool ownHandle = true;                      bool isControl = true;                      windowInfo = OpenTK.Platform.Utilities.CreateMacOSCarbonWindowInfo(windowHandle' ownHandle' isControl);                  }                  else if (Configuration.RunningOnX11)                  {                      IntPtr display = gdk_x11_display_get_xdisplay(Display.Handle);                      int screen = Screen.Number;                      IntPtr windowHandle = gdk_x11_drawable_get_xid(GdkWindow.Handle);                      IntPtr rootWindow = gdk_x11_drawable_get_xid(RootWindow.Handle);                        IntPtr visualInfo;                      if (graphicsMode.Index.HasValue)                      {                          XVisualInfo info = new XVisualInfo();                          info.VisualID = graphicsMode.Index.Value;                          int dummy;                          visualInfo = XGetVisualInfo(display' XVisualInfoMask.ID' ref info' out dummy);                      }                      else                      {                          visualInfo = GetVisualInfo(display);                      }                        windowInfo = OpenTK.Platform.Utilities.CreateX11WindowInfo(display' screen' windowHandle' rootWindow' visualInfo);                      XFree(visualInfo);                  }                  else throw new PlatformNotSupportedException();                    // GraphicsContext                  graphicsContext = new GraphicsContext(graphicsMode' windowInfo' GlVersionMajor' GlVersionMinor' graphicsContextFlags);                  MakeCurrent();                    if (GraphicsContext.ShareContexts)                  {                      Interlocked.Increment(ref graphicsContextCount);                        if (!sharedContextInitialized)                      {                          sharedContextInitialized = true;                          ((IGraphicsContextInternal)graphicsContext).LoadAll();                          OnGraphicsContextInitialized();                      }                  }                  else                  {                      ((IGraphicsContextInternal)graphicsContext).LoadAll();                      OnGraphicsContextInitialized();                  }                    OnInitialized();              }              else              {                  graphicsContext.MakeCurrent(windowInfo);              }
Magic Number,Eto.Gl.Gtk,GLDrawingArea,C:\repos\bchavez_SharpFlame\source\Eto.Gl.Gtk\GLDrawingArea.cs,OnExposeEvent,The following statement contains a magic number: if (!initialized)              {                  initialized = true;                    // If this looks uninitialized...  initialize.                  if( ColorBPP == 0 )                  {                      ColorBPP = 24;                                            if( DepthBPP == 0 ) DepthBPP = 16;                  }                                    ColorFormat colorBufferColorFormat = new ColorFormat(ColorBPP);                                    ColorFormat accumulationColorFormat = new ColorFormat(AccumulatorBPP);                                    int buffers = 2;                  if( SingleBuffer ) buffers--;                                    GraphicsMode graphicsMode = new GraphicsMode(colorBufferColorFormat' DepthBPP' StencilBPP' Samples' accumulationColorFormat' buffers' Stereo);                    // IWindowInfo                  if (Configuration.RunningOnWindows)                  {                      IntPtr windowHandle = gdk_win32_drawable_get_handle(GdkWindow.Handle);                      windowInfo = OpenTK.Platform.Utilities.CreateWindowsWindowInfo(windowHandle);                  }                  else if (Configuration.RunningOnMacOS)                  {                      IntPtr windowHandle = gdk_x11_drawable_get_xid(GdkWindow.Handle);                      bool ownHandle = true;                      bool isControl = true;                      windowInfo = OpenTK.Platform.Utilities.CreateMacOSCarbonWindowInfo(windowHandle' ownHandle' isControl);                  }                  else if (Configuration.RunningOnX11)                  {                      IntPtr display = gdk_x11_display_get_xdisplay(Display.Handle);                      int screen = Screen.Number;                      IntPtr windowHandle = gdk_x11_drawable_get_xid(GdkWindow.Handle);                      IntPtr rootWindow = gdk_x11_drawable_get_xid(RootWindow.Handle);                        IntPtr visualInfo;                      if (graphicsMode.Index.HasValue)                      {                          XVisualInfo info = new XVisualInfo();                          info.VisualID = graphicsMode.Index.Value;                          int dummy;                          visualInfo = XGetVisualInfo(display' XVisualInfoMask.ID' ref info' out dummy);                      }                      else                      {                          visualInfo = GetVisualInfo(display);                      }                        windowInfo = OpenTK.Platform.Utilities.CreateX11WindowInfo(display' screen' windowHandle' rootWindow' visualInfo);                      XFree(visualInfo);                  }                  else throw new PlatformNotSupportedException();                    // GraphicsContext                  graphicsContext = new GraphicsContext(graphicsMode' windowInfo' GlVersionMajor' GlVersionMinor' graphicsContextFlags);                  MakeCurrent();                    if (GraphicsContext.ShareContexts)                  {                      Interlocked.Increment(ref graphicsContextCount);                        if (!sharedContextInitialized)                      {                          sharedContextInitialized = true;                          ((IGraphicsContextInternal)graphicsContext).LoadAll();                          OnGraphicsContextInitialized();                      }                  }                  else                  {                      ((IGraphicsContextInternal)graphicsContext).LoadAll();                      OnGraphicsContextInitialized();                  }                    OnInitialized();              }              else              {                  graphicsContext.MakeCurrent(windowInfo);              }
Magic Number,Eto.Gl.Gtk,GLDrawingArea,C:\repos\bchavez_SharpFlame\source\Eto.Gl.Gtk\GLDrawingArea.cs,OnExposeEvent,The following statement contains a magic number: GL.Ortho( -1.0' 1.0' -1.0' 1.0' 0.0' 4.0 );
