Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetFiles,Cyclomatic complexity of the method is 11
Complex Method,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,PostMessage,Cyclomatic complexity of the method is 9
Complex Method,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,BuildScope,Cyclomatic complexity of the method is 10
Complex Method,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,BuildRoutes,Cyclomatic complexity of the method is 8
Complex Method,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,GetFilesAsync,Cyclomatic complexity of the method is 11
Complex Method,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,PostMessageAsync,Cyclomatic complexity of the method is 8
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetFiles,The method has 7 parameters. Parameters: callback' userId' from' to' count' page' types
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetHistory,The method has 5 parameters. Parameters: historyCallback' channel' latest' oldest' count
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetChannelHistory,The method has 5 parameters. Parameters: callback' channelInfo' latest' oldest' count
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetDirectMessageHistory,The method has 5 parameters. Parameters: callback' conversationInfo' latest' oldest' count
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetGroupHistory,The method has 5 parameters. Parameters: callback' groupInfo' latest' oldest' count
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,SearchAll,The method has 7 parameters. Parameters: callback' query' sorting' direction' enableHighlights' count' page
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,SearchMessages,The method has 7 parameters. Parameters: callback' query' sorting' direction' enableHighlights' count' page
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,SearchFiles,The method has 7 parameters. Parameters: callback' query' sorting' direction' enableHighlights' count' page
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,Update,The method has 9 parameters. Parameters: callback' ts' channelId' text' botName' parse' linkNames' attachments' as_user
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,PostMessage,The method has 12 parameters. Parameters: callback' channelId' text' botName' parse' linkNames' attachments' unfurl_links' icon_url' icon_emoji' as_user' thread_ts
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,UploadFile,The method has 8 parameters. Parameters: callback' fileData' fileName' channelIds' title' initialComment' useAsync' fileType
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetAuthorizeUri,The method has 5 parameters. Parameters: clientId' scopes' redirectUri' state' team
Long Parameter List,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetAccessToken,The method has 5 parameters. Parameters: callback' clientId' clientSecret' redirectUri' code
Long Parameter List,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,GetFilesAsync,The method has 6 parameters. Parameters: userId' from' to' count' page' types
Long Parameter List,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,SearchAllAsync,The method has 6 parameters. Parameters: query' sorting' direction' enableHighlights' count' page
Long Parameter List,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,SearchMessagesAsync,The method has 6 parameters. Parameters: query' sorting' direction' enableHighlights' count' page
Long Parameter List,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,SearchFilesAsync,The method has 6 parameters. Parameters: query' sorting' direction' enableHighlights' count' page
Long Parameter List,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,PostMessageAsync,The method has 10 parameters. Parameters: channelId' text' botName' parse' linkNames' attachments' unfurl_links' icon_url' icon_emoji' as_user
Long Parameter List,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,UploadFileAsync,The method has 7 parameters. Parameters: fileData' fileName' channelIds' title' initialComment' useAsync' fileType
Long Identifier,SlackAPI,Preferences,C:\repos\Inumedia_SlackAPI\SlackAPI\Preferences.cs,,The length of the parameter seen_notification_prefs_banner is 30.
Long Statement,SlackAPI,RequestStateForTask<K>,C:\repos\Inumedia_SlackAPI\SlackAPI\RequestStateForTask.cs,ExecutePost,The length of the statement  "                            await writer.WriteAsync(string.Format("{0}={1}"' Uri.EscapeDataString(postEntry.Item1)' Uri.EscapeDataString(postEntry.Item2))); " is 128.
Long Statement,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,Connected,The length of the statement  "            DirectMessages = new List<DirectMessageConversation>(loginDetails.ims.Where((c) => Users.Exists((a) => a.id == c.user) && c.id != MySelf.id)); " is 142.
Long Statement,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,StartAuth,The length of the statement  "            APIRequest(callback' new Tuple<string' string>[] { new Tuple<string' string>("email"' email) }' new Tuple<string' string>[0]); " is 126.
Long Statement,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GroupsMark,The length of the statement  "            APIRequestWithToken(callback' new Tuple<string' string>("channel"' channelId)' new Tuple<string' string>("ts"' ts.ToProperTimeStamp())); " is 136.
Long Statement,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,UploadFile,The length of the statement  "                HttpResponseMessage response = client.PostAsync(string.Format("{0}?{1}"' target' string.Join("&"' parameters.ToArray()))' form).Result; " is 135.
Long Statement,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetAuthorizeUri,The length of the statement  "            return GetSlackUri("https://slack.com/oauth/authorize"' new Tuple<string' string>[] { new Tuple<string' string>("client_id"' clientId)' " is 135.
Long Statement,SlackAPI,SlackClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackClient.cs,GetAccessToken,The length of the statement  "            APIRequest<AccessTokenResponse>(callback' new Tuple<string' string>[] { new Tuple<string' string>("client_id"' clientId)' " is 121.
Long Statement,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,BuildRoutes,The length of the statement  "            foreach (MethodInfo m in routingTo.GetType().GetMethods(BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Public)) " is 158.
Long Statement,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,BuildRoutes,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("Couldn't create delegate for {0}.{1}"' routingToType.FullName' m.Name)); " is 122.
Long Statement,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,Send,The length of the statement  "			sendingQueue.Push(JsonConvert.SerializeObject(message' Formatting.None' new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore })); " is 150.
Long Statement,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,UnbindCallback,The length of the statement  "                Delegate d = routes.ContainsKey(route.Type) ? (routes.ContainsKey(route.SubType ?? "null") ? routes[route.Type][route.SubType ?? "null"] : null) : null; " is 152.
Long Statement,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,HandleMessage,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("No valid route for {0} - {1}"' message.type' message.subtype ?? "null")); " is 123.
Long Statement,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,HandleMessage,The length of the statement  "                    ErrorHandlingMessage(new InvalidDataException(string.Format("No valid route for {0} - {1}"' message.type' message.subtype ?? "null"))); " is 135.
Long Statement,SlackAPI,SlackSocketClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocketClient.cs,SendMessage,The length of the statement  "                underlyingSocket.Send( new Message() {channel = channelId' text = textData' user = userName' type = "message"}' onSent); " is 120.
Long Statement,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,Connected,The length of the statement  "            DirectMessages = new List<DirectMessageConversation>(loginDetails.ims.Where((c) => Users.Exists((a) => a.id == c.user) && c.id != MySelf.id)); " is 142.
Long Statement,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,StartAuthAsync,The length of the statement  "            return APIRequestAsync<AuthStartResponse>(new Tuple<string' string>[] { new Tuple<string' string>("email"' email) }' new Tuple<string' string>[0]); " is 147.
Long Statement,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,GetChannelListAsync,The length of the statement  "            return APIRequestWithTokenAsync<ChannelListResponse>(new Tuple<string' string>("exclude_archived"' ExcludeArchived ? "1" : "0")); " is 129.
Long Statement,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,GetGroupsListAsync,The length of the statement  "            return APIRequestWithTokenAsync<GroupListResponse>(new Tuple<string' string>("exclude_archived"' ExcludeArchived ? "1" : "0")); " is 127.
Long Statement,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,GroupsMarkAsync,The length of the statement  "            return APIRequestWithTokenAsync<GroupMarkResponse>(new Tuple<string' string>("channel"' channelId)' new Tuple<string' string>("ts"' ts.ToProperTimeStamp())); " is 157.
Long Statement,SlackAPI,SlackTaskClient,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackTaskClient.cs,UploadFileAsync,The length of the statement  "                HttpResponseMessage response = client.PostAsync(string.Format("{0}?{1}"' target' string.Join("&"' parameters.ToArray()))' form).Result; " is 135.
Empty Catch Block,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,Close,The method has an empty catch block.
Magic Number,SlackAPI,Extensions,C:\repos\Inumedia_SlackAPI\SlackAPI\Extensions.cs,ToProperTimeStamp,The following statement contains a magic number: if (toUTC)              {                  return ((that.ToUniversalTime().Ticks - 621355968000000000m) / 10000000m).ToString("F6");              }              else                  return that.Subtract(new DateTime(1970' 1' 1)).TotalSeconds.ToString();
Magic Number,SlackAPI,JavascriptDateTimeConverter,C:\repos\Inumedia_SlackAPI\SlackAPI\JavascriptDateTimeConverter.cs,ReadJson,The following statement contains a magic number: DateTime res = new DateTime(621355968000000000 + (long)(value * 10000000m)).ToLocalTime();
Magic Number,SlackAPI,JavascriptDateTimeConverter,C:\repos\Inumedia_SlackAPI\SlackAPI\JavascriptDateTimeConverter.cs,WriteJson,The following statement contains a magic number: writer.WriteValue(((DateTime)value).Subtract(new DateTime(1970' 1' 1)).TotalSeconds);
Magic Number,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,SlackSocket,The following statement contains a magic number: socket.ConnectAsync(new Uri(string.Format("{0}?svn_rev={1}&login_with_boot_data-0-{2}&on_login-0-{2}&connect-1-{2}"' loginDetails.url' loginDetails.svn_rev' DateTime.Now.Subtract(new DateTime(1970' 1' 1)).TotalSeconds))' cts.Token).Wait();
Magic Number,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,SetupReceiving,The following statement contains a magic number: Task.Factory.StartNew(                  async () =>                  {                      List<byte[]> buffers = new List<byte[]>();                      byte[] bytes = new byte[1024];                      buffers.Add(bytes);                      ArraySegment<byte> buffer = new ArraySegment<byte>(bytes);                      while (socket.State == WebSocketState.Open)                      {                          WebSocketReceiveResult result = null;                          try                          {                              result = await socket.ReceiveAsync(buffer' cts.Token);                          }                          catch (WebSocketException wex)                          {                              if (ErrorReceiving != null)                                  ErrorReceiving(wex);                              Close();                              break;                          }                            if (!result.EndOfMessage && buffer.Count == buffer.Array.Length)                          {                              bytes = new byte[1024];                              buffers.Add(bytes);                              buffer = new ArraySegment<byte>(bytes);                              continue;                          }                            string data = string.Join(""' buffers.Select((c) => Encoding.UTF8.GetString(c).TrimEnd('\0')));                          //Console.WriteLine("SlackSocket data = " + data);                          SlackSocketMessage message = null;                          try                          {                              message = data.Deserialize<SlackSocketMessage>();                          }                          catch (JsonException jsonExcep)                          {                              if (ErrorReceivingDesiralization != null)                                  ErrorReceivingDesiralization(jsonExcep);                              continue;                          }                            if (message == null)                              continue;                          else                          {                              HandleMessage(message' data);                              buffers = new List<byte[]>();                              bytes = new byte[1024];                              buffers.Add(bytes);                              buffer = new ArraySegment<byte>(bytes);                          }                      }                  }' cts.Token' TaskCreationOptions.LongRunning' TaskScheduler.Default);
Magic Number,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,SetupReceiving,The following statement contains a magic number: Task.Factory.StartNew(                  async () =>                  {                      List<byte[]> buffers = new List<byte[]>();                      byte[] bytes = new byte[1024];                      buffers.Add(bytes);                      ArraySegment<byte> buffer = new ArraySegment<byte>(bytes);                      while (socket.State == WebSocketState.Open)                      {                          WebSocketReceiveResult result = null;                          try                          {                              result = await socket.ReceiveAsync(buffer' cts.Token);                          }                          catch (WebSocketException wex)                          {                              if (ErrorReceiving != null)                                  ErrorReceiving(wex);                              Close();                              break;                          }                            if (!result.EndOfMessage && buffer.Count == buffer.Array.Length)                          {                              bytes = new byte[1024];                              buffers.Add(bytes);                              buffer = new ArraySegment<byte>(bytes);                              continue;                          }                            string data = string.Join(""' buffers.Select((c) => Encoding.UTF8.GetString(c).TrimEnd('\0')));                          //Console.WriteLine("SlackSocket data = " + data);                          SlackSocketMessage message = null;                          try                          {                              message = data.Deserialize<SlackSocketMessage>();                          }                          catch (JsonException jsonExcep)                          {                              if (ErrorReceivingDesiralization != null)                                  ErrorReceivingDesiralization(jsonExcep);                              continue;                          }                            if (message == null)                              continue;                          else                          {                              HandleMessage(message' data);                              buffers = new List<byte[]>();                              bytes = new byte[1024];                              buffers.Add(bytes);                              buffer = new ArraySegment<byte>(bytes);                          }                      }                  }' cts.Token' TaskCreationOptions.LongRunning' TaskScheduler.Default);
Magic Number,SlackAPI,SlackSocket,C:\repos\Inumedia_SlackAPI\SlackAPI\SlackSocket.cs,SetupReceiving,The following statement contains a magic number: Task.Factory.StartNew(                  async () =>                  {                      List<byte[]> buffers = new List<byte[]>();                      byte[] bytes = new byte[1024];                      buffers.Add(bytes);                      ArraySegment<byte> buffer = new ArraySegment<byte>(bytes);                      while (socket.State == WebSocketState.Open)                      {                          WebSocketReceiveResult result = null;                          try                          {                              result = await socket.ReceiveAsync(buffer' cts.Token);                          }                          catch (WebSocketException wex)                          {                              if (ErrorReceiving != null)                                  ErrorReceiving(wex);                              Close();                              break;                          }                            if (!result.EndOfMessage && buffer.Count == buffer.Array.Length)                          {                              bytes = new byte[1024];                              buffers.Add(bytes);                              buffer = new ArraySegment<byte>(bytes);                              continue;                          }                            string data = string.Join(""' buffers.Select((c) => Encoding.UTF8.GetString(c).TrimEnd('\0')));                          //Console.WriteLine("SlackSocket data = " + data);                          SlackSocketMessage message = null;                          try                          {                              message = data.Deserialize<SlackSocketMessage>();                          }                          catch (JsonException jsonExcep)                          {                              if (ErrorReceivingDesiralization != null)                                  ErrorReceivingDesiralization(jsonExcep);                              continue;                          }                            if (message == null)                              continue;                          else                          {                              HandleMessage(message' data);                              buffers = new List<byte[]>();                              bytes = new byte[1024];                              buffers.Add(bytes);                              buffer = new ArraySegment<byte>(bytes);                          }                      }                  }' cts.Token' TaskCreationOptions.LongRunning' TaskScheduler.Default);
Missing Default,SlackAPI,JavascriptBotsToArray,C:\repos\Inumedia_SlackAPI\SlackAPI\JavascriptBotsToArray.cs,ReadJson,The following switch statement is missing a default case: switch (reader.Value.ToString())                      {                          case "image_48":                              reader.Read();                              current.image_48 = reader.Value.ToString();                              break;                            case "image_64":                              reader.Read();                              current.image_48 = reader.Value.ToString();                              break;                            case "emoji":                              reader.Read();                              current.emoji = reader.Value.ToString();                              break;                      }
