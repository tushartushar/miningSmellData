Implementation smell,Namespace,Class,File,Method,Description
Long Method,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The method has 172 lines of code.
Long Method,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The method has 116 lines of code.
Long Method,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,The method has 101 lines of code.
Long Method,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The method has 169 lines of code.
Long Method,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The method has 117 lines of code.
Complex Method,IdSharp.AudioInfo,AudioFile,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\AudioFile.cs,Create,Cyclomatic complexity of the method is 11
Complex Method,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,Cyclomatic complexity of the method is 25
Complex Method,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,Cyclomatic complexity of the method is 11
Complex Method,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,Cyclomatic complexity of the method is 17
Complex Method,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,Cyclomatic complexity of the method is 9
Complex Method,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,Cyclomatic complexity of the method is 11
Complex Method,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,Cyclomatic complexity of the method is 11
Complex Method,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,Cyclomatic complexity of the method is 10
Complex Method,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,Cyclomatic complexity of the method is 29
Complex Method,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,Cyclomatic complexity of the method is 19
Complex Method,IdSharp.AudioInfo.Inspection,BasicLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\BasicLameTagReader.cs,BasicLameTagReader,Cyclomatic complexity of the method is 8
Complex Method,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,Cyclomatic complexity of the method is 26
Complex Method,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePresetGuess,Cyclomatic complexity of the method is 21
Complex Method,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetCBREncoderID,Cyclomatic complexity of the method is 10
Long Parameter List,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,The method has 9 parameters. Parameters: FH' audioData' BufLen' FrameOffset' offset' mPerfect' ignoreall' bTrusting' reservedlayer
Long Parameter List,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessPreset,The method has 9 parameters. Parameters: AVersionString' ABitrate' AQuality' AEncodingMethod' ANoiseShaping' AStereoMode' AATHType' ALowpassDiv100' ANonBitrate
Long Parameter List,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessForVersion,The method has 9 parameters. Parameters: AVersionGroup' ABitrate' AQuality' AEncodingMethod' ANoiseShaping' AStereoMode' AATHType' ALowpassDiv100' ANonBitrate
Long Parameter List,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,BestGuessTwoVersions,The method has 10 parameters. Parameters: AGroup1' AGroup2' ABitrate' AQuality' AEncodingMethod' ANoiseShaping' AStereoMode' AATHType' ALowpassDiv100' ANonBitrate
Long Parameter List,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,PresetGuessRow,The method has 9 parameters. Parameters: vg1' tv1' tv2' tv3' tv4' tv5' tv6' tv7' result
Long Parameter List,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,PresetGuessRow,The method has 10 parameters. Parameters: vg1' vg2' tv1' tv2' tv3' tv4' tv5' tv6' tv7' result
Long Parameter List,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,PresetGuessRow,The method has 11 parameters. Parameters: vg1' vg2' vg3' tv1' tv2' tv3' tv4' tv5' tv6' tv7' result
Long Parameter List,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,Initialize,The method has 11 parameters. Parameters: vg1' vg2' vg3' tv1' tv2' tv3' tv4' tv5' tv6' tv7' result
Long Statement,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The length of the statement  "                    if (FindFrameSync(FH' audioData' BufLen' ref FrameOffset' ref offset' ref mPerfect' ref ignoreall' ref bTrusting' ref reservedlayer)) " is 133.
Long Statement,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The length of the statement  "				if (identifierHeader[0] == 'd' && identifierHeader[1] == 'a' && identifierHeader[2] == 't' && identifierHeader[3] == 'a') " is 121.
Long Statement,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The length of the statement  "				if (identifierHeader[0] == 'f' && identifierHeader[1] == 'm' && identifierHeader[2] == 't' && identifierHeader[3] == ' ') " is 121.
Long Statement,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVBR,The length of the statement  "            String id = String.Format("{0}{1}{2}{3}"' (Char)data[index]' (Char)data[index + 1]' (Char)data[index + 2]' (Char)data[index + 3]); " is 130.
Long Statement,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessPreset,The length of the statement  "                Result = BestGuessTwoVersions(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' ABitrate' AQuality' AEncodingMethod' " is 129.
Long Statement,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessPreset,The length of the statement  "                Result = BestGuessTwoVersions(LameVersionGroup.lvg3931_3903up' LameVersionGroup.lvg393' ABitrate' AQuality' AEncodingMethod' " is 124.
Complex Conditional,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The conditional expression  "_bitrate == 0 || _isVBR == null || _frames == 0 || _totalSeconds == 0"  is complex.
Complex Conditional,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The conditional expression  "header[0] != 'R' || header[1] != 'I' || header[2] != 'F' || header[3] != 'F'"  is complex.
Complex Conditional,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The conditional expression  "header[8] != 'W' || header[9] != 'A' || header[10] != 'V' || header[11] != 'E'"  is complex.
Complex Conditional,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The conditional expression  "identifierHeader[0] == 'd' && identifierHeader[1] == 'a' && identifierHeader[2] == 't' && identifierHeader[3] == 'a'"  is complex.
Complex Conditional,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The conditional expression  "identifierHeader[0] == 'f' && identifierHeader[1] == 'm' && identifierHeader[2] == 't' && identifierHeader[3] == ' '"  is complex.
Complex Conditional,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The conditional expression  "atomdata[i] == 'i' && atomdata[i + 1] == 'l' && atomdata[i + 2] == 's' && atomdata[i + 3] == 't'"  is complex.
Complex Conditional,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The conditional expression  "preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500"  is complex.
Complex Conditional,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The conditional expression  "(headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2"  is complex.
Complex Conditional,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetVBREncoderID,The conditional expression  "Encoding.ASCII.GetString(m_VBR.ID) == VBRHeaderID.Xing &&                   vbrVendor != VBRVendorID.LAME &&                   vbrVendor != VBRVendorID.GoGoNew &&                   vbrVendor != VBRVendorID.GoGoOld"  is complex.
Complex Conditional,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessForVersion,The conditional expression  "(row.HasVersionGroup(AVersionGroup)) &&  				    (row.TVs[1] == AQuality) &&  				    (row.TVs[2] == AEncodingMethod) &&  				    (row.TVs[3] == ANoiseShaping) &&  				    (row.TVs[4] == AStereoMode) &&  				    (row.TVs[5] == AATHType) &&  				    (row.TVs[6] == ALowpassDiv100)"  is complex.
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: byte[] flacMarker = new Byte[4];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: stream.Read(flacMarker' 0' 4);
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: stream.Seek(14' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: byte[] buf = stream.Read(8);
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _frequency = (buf[0] << 12) + (buf[1] << 4) + (buf[2] >> 4);
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _frequency = (buf[0] << 12) + (buf[1] << 4) + (buf[2] >> 4);
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _frequency = (buf[0] << 12) + (buf[1] << 4) + (buf[2] >> 4);
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _frequency = (buf[0] << 12) + (buf[1] << 4) + (buf[2] >> 4);
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _channels = ((buf[2] >> 1) & 0x03) + 1;
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _samples = ((buf[3] & 0x0F) << 32) + (buf[4] << 24) +                                  (buf[5] << 16) + (buf[6] << 8) + buf[7];
Magic Number,IdSharp.AudioInfo,Flac,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Flac\Flac.cs,Flac,The following statement contains a magic number: _bitrate = totalsize / (_totalSeconds * 125);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: byte[] identifier = stream.Read(4);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: ByteUtils.Compare(identifier' MAC_IDENTIFIER' 4) == false
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: byte[] buf = stream.Read(4);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _version = buf[0] + (buf[1] << 8);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: buf = stream.Read(4);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: int descriptorLength = buf[0] + (buf[1] << 8) + (buf[2] << 16) + (buf[3] << 24);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: int descriptorLength = buf[0] + (buf[1] << 8) + (buf[2] << 16) + (buf[3] << 24);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: int descriptorLength = buf[0] + (buf[1] << 8) + (buf[2] << 16) + (buf[3] << 24);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: int descriptorLength = buf[0] + (buf[1] << 8) + (buf[2] << 16) + (buf[3] << 24);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: int descriptorLength = buf[0] + (buf[1] << 8) + (buf[2] << 16) + (buf[3] << 24);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: stream.Seek(descriptorLength - 12' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: buf = stream.Read(4);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _compressionLevel = buf[0] + (buf[1] << 8);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: buf = stream.Read(4);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _channels = buf[2] + (buf[3] << 8);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _channels = buf[2] + (buf[3] << 8);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _channels = buf[2] + (buf[3] << 8);
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _version >= 3980 && _version <= 3990
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _version >= 3980 && _version <= 3990
Magic Number,IdSharp.AudioInfo,MonkeysAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\MonkeysAudio\MonkeysAudio.cs,MonkeysAudio,The following statement contains a magic number: _bitrate = totalSize / (_totalSeconds * 125.0m);
Magic Number,IdSharp.AudioInfo,Mpeg4,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg4\Mpeg4.cs,Mpeg4,The following statement contains a magic number: _bitrate = mpeg4Tag.MdatAtomSize / _totalSeconds / 125.0m;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: BitrateTable = new[]              {                  new[]                  {                       // MPEG-2.5                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new int[3][]'                  new[]                  {                      // MPEG-2                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-3                      new[] {  8' 16' 24' 32' 40' 48'  56'  64'  80'  96' 112' 128' 144' 160 }' // Layer-2                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 144' 160' 176' 192' 224' 256 }  // Layer-1                  }'                  new[]                  {                      // MPEG-1                      new[] { 32' 40' 48' 56' 64' 80'  96' 112' 128' 160' 192' 224' 256' 320 }'   // Layer-3                      new[] { 32' 48' 56' 64' 80' 96' 112' 128' 160' 192' 224' 256' 320' 384 }'   // Layer-2                      new[] { 32' 64' 96' 128' 160' 192' 224' 256' 288' 320' 352' 384' 416' 448 } // Layer-1                  }              };
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: byte[] tmpFrameHeader = new byte[4];
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: stream.Read(tmpFrameHeader' 1' 3) != 3
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: stream.Read(tmpFrameHeader' 1' 3) != 3
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: stream.Seek(-3' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: (tmpFrameHeader[1] >> 5) != 0x07 ||                          ((tmpFrameHeader[1] >> 1) & 0x03) == 0
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _mpegVersion = (MpegVersion)((tmpFrameHeader[1] >> 3) & 0x03);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _frequency = GetFrequency(_mpegVersion' (tmpFrameHeader[2] >> 2) & 0x03);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _frequency = GetFrequency(_mpegVersion' (tmpFrameHeader[2] >> 2) & 0x03);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _isPrivate = ((tmpFrameHeader[2] & 0x01) == 0x01);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _frameSizeConst = 125.0 * _samplesPerFrame / _frequency;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _paddingSizeConst = (_mpegLayer == MpegLayer.Layer1 ? 4 : 1);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _isCopyright = (((tmpFrameHeader[3] >> 3) & 0x01) == 0x01);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _isCopyright = (((tmpFrameHeader[3] >> 3) & 0x01) == 0x01);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _isOriginal = (((tmpFrameHeader[3] >> 2) & 0x01) == 0x01);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _isOriginal = (((tmpFrameHeader[3] >> 2) & 0x01) == 0x01);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: (tmpFrameHeader[3] >> 6) == 3
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: (tmpFrameHeader[3] >> 6) == 3
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: (tmpFrameHeader[3] >> 6) == 3
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: stream.Seek(tmpID3v2TagSize + 36' SeekOrigin.Begin);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: Byte[] buf = stream.Read(4);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: stream.Seek(4' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: decimal tmpBitrate = tmpBytes / 125.0m / (tmpFrames * _samplesPerFrame / (decimal)_frequency);
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: _totalSeconds = (tmpBytes / 125.0m) / _bitrate;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: tmpBitrate <= 320 && tmpBitrate >= 32
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: tmpBitrate <= 320 && tmpBitrate >= 32
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: tmpFrames > 256 && tmpBytes > 50000
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,Mpeg,The following statement contains a magic number: tmpFrames > 256 && tmpBytes > 50000
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: Byte[] FH = new Byte[4];
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: int bitrateIndex = FH[2] >> 4;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: int bitrateIndex = FH[2] >> 4;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: offset -= 3;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: bitrateIndex <= 0 || bitrateIndex >= 15
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: Padding = (FH[2] >> 1) & 0x01;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: offset -= 3;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: BR == 0 || BR % 8 != 0
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: offset += FrameSize - 4;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: offset < BufLen - 16 && !ignoreall
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,CalculateBitrate,The following statement contains a magic number: _totalSeconds = (audioLength / 125.0m) / _bitrate;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,The following statement contains a magic number: offset >= BufLen - 8
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,The following statement contains a magic number: i < 4 && offset != BufLen
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,The following statement contains a magic number: i != 4 && offset == BufLen
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,The following statement contains a magic number: offset -= 3;
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,FindFrameSync,The following statement contains a magic number: (FH[1] >> 5) != 0x07 || ((FH[1] >> 1) & 0x03) == 0
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetSamplesPerFrame,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2 ||                               mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 1152;                      break;                    // MPEG-2/2.5                  case MpegVersion.Mpeg2:                  case MpegVersion.Mpeg25:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2) tmpSamplesPerFrame = 1152;                      else if (mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 576;                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetSamplesPerFrame,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2 ||                               mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 1152;                      break;                    // MPEG-2/2.5                  case MpegVersion.Mpeg2:                  case MpegVersion.Mpeg25:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2) tmpSamplesPerFrame = 1152;                      else if (mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 576;                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetSamplesPerFrame,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2 ||                               mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 1152;                      break;                    // MPEG-2/2.5                  case MpegVersion.Mpeg2:                  case MpegVersion.Mpeg25:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2) tmpSamplesPerFrame = 1152;                      else if (mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 576;                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetSamplesPerFrame,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2 ||                               mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 1152;                      break;                    // MPEG-2/2.5                  case MpegVersion.Mpeg2:                  case MpegVersion.Mpeg25:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2) tmpSamplesPerFrame = 1152;                      else if (mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 576;                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetSamplesPerFrame,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2 ||                               mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 1152;                      break;                    // MPEG-2/2.5                  case MpegVersion.Mpeg2:                  case MpegVersion.Mpeg25:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2) tmpSamplesPerFrame = 1152;                      else if (mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 576;                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following statement contains a magic number: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: byte[] byteArray = stream.Read(32);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: int[] integerArray = new int[8];
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: integerArray[i] = (byteArray[i * 4]) +                                                            (byteArray[i * 4 + 1] << 8) +                                                            (byteArray[i * 4 + 2] << 16) +                                                            (byteArray[i * 4 + 3] << 24);
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: i < 8
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _streamVersion = 7;
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _frequency = _sampleRates[byteArray[10] & 0x03];
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: (byteArray[11] % 128) < 64
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: (byteArray[11] % 128) < 64
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: (byteArray[11] % 128) < 64
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _streamVersion == 7 || _streamVersion == 7.1m
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _streamVersion == 7 || _streamVersion == 7.1m
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _frames = integerArray[1] >> 16;
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _streamVersion == 4
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _totalSeconds = _frames * 1152 / (decimal)_frequency;
Magic Number,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following statement contains a magic number: _bitrate = (audioDataLength / _totalSeconds) / 125.0m;
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: byte[] oggMarker = stream.Read(4);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: stream.Seek(22' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: byte[] vorbisMarker = stream.Read(6);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: stream.Seek(4' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: byte[] buf = new byte[251];
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: long dataIndex = size - ((251 - 10) * index) - 10;
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: long dataIndex = size - ((251 - 10) * index) - 10;
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: long dataIndex = size - ((251 - 10) * index) - 10;
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: stream.Read(buf' 0' 251);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: j < 4
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: stream.Seek(dataIndex + i + 6' SeekOrigin.Begin);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: stream.Read(buf' 0' 8);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: _samples += buf[i] << (8 * i);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: i < 8
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: index <= 50 && _samples == 0
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,OggVorbis,The following statement contains a magic number: _bitrate = (size - tmpID3v2Size) / _totalSeconds / 125.0m;
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,IsOggVorbis,The following statement contains a magic number: byte[] oggMarker = new byte[4];
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,IsOggVorbis,The following statement contains a magic number: stream.Read(oggMarker' 0' 4);
Magic Number,IdSharp.AudioInfo,OggVorbis,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OggVorbis\OggVorbis.cs,IsOggVorbis,The following statement contains a magic number: stream.Seek(-4' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,OptimFrog,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OptimFrog\OptimFrog.cs,OptimFrog,The following statement contains a magic number: fs.Position = 31;
Magic Number,IdSharp.AudioInfo,OptimFrog,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\OptimFrog\OptimFrog.cs,OptimFrog,The following statement contains a magic number: _bitrate = (fs.Length / 125.0m) / _totalSeconds;
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: byte[] header = stream.Read(12);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: header[0] != 'R' || header[1] != 'I' || header[2] != 'F' || header[3] != 'F'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: header[0] != 'R' || header[1] != 'I' || header[2] != 'F' || header[3] != 'F'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: header[8] != 'W' || header[9] != 'A' || header[10] != 'V' || header[11] != 'E'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: header[8] != 'W' || header[9] != 'A' || header[10] != 'V' || header[11] != 'E'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: header[8] != 'W' || header[9] != 'A' || header[10] != 'V' || header[11] != 'E'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: header[8] != 'W' || header[9] != 'A' || header[10] != 'V' || header[11] != 'E'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: byte[] identifierHeader = stream.Read(4);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: identifierHeader[0] == 'd' && identifierHeader[1] == 'a' && identifierHeader[2] == 't' && identifierHeader[3] == 'a'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: identifierHeader[0] == 'd' && identifierHeader[1] == 'a' && identifierHeader[2] == 't' && identifierHeader[3] == 'a'
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: int compression = data[0] + (data[1] << 8);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _channels = data[2] + (data[3] << 8);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _channels = data[2] + (data[3] << 8);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _channels = data[2] + (data[3] << 8);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _channels < 1 || _channels > 2
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _frequency = data[4] + (data[5] << 8) + (data[6] << 16) + (data[7] << 24);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _frequency = data[4] + (data[5] << 8) + (data[6] << 16) + (data[7] << 24);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _frequency = data[4] + (data[5] << 8) + (data[6] << 16) + (data[7] << 24);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _frequency = data[4] + (data[5] << 8) + (data[6] << 16) + (data[7] << 24);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _frequency = data[4] + (data[5] << 8) + (data[6] << 16) + (data[7] << 24);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _frequency = data[4] + (data[5] << 8) + (data[6] << 16) + (data[7] << 24);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _frequency = data[4] + (data[5] << 8) + (data[6] << 16) + (data[7] << 24);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: int bits = data[14] + (data[15] << 8);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: int bits = data[14] + (data[15] << 8);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: int bits = data[14] + (data[15] << 8);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: bits != 16
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: identifierHeader[0] == 'f' && identifierHeader[1] == 'm' && identifierHeader[2] == 't' && identifierHeader[3] == ' '
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: identifierHeader[0] == 'f' && identifierHeader[1] == 'm' && identifierHeader[2] == 't' && identifierHeader[3] == ' '
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _totalSeconds = bytes / (_channels * 2.0m * _frequency);
Magic Number,IdSharp.AudioInfo,RiffWave,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\RiffWave\RiffWave.cs,ReadStream,The following statement contains a magic number: _bitrate = bytes / _totalSeconds / 125.0m;
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,Shorten,The following statement contains a magic number: _bitrate = fs.Length / _totalSeconds / 125.0m;
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: nbyteget < 4
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: nbyteget < 4
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: uint buffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                            (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: uint buffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                            (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: uint buffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                            (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: uint buffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                            (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: uint buffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                            (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: getbufOffset += 4;
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,word_get,The following statement contains a magic number: nbyteget -= 4;
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,uvar_get,The following statement contains a magic number: nbitget = 32;
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,uvar_get,The following statement contains a magic number: nbitget = 32;
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following statement contains a magic number: switch (cmd)                  {                      case FN_ZERO:                      case FN_DIFF0:                      case FN_DIFF1:                      case FN_DIFF2:                      case FN_DIFF3:                      case FN_QLPC:                          int resn = 0;                            if (cmd != FN_ZERO)                          {                              resn = uvar_get(ENERGYSIZE' stream);                              // this is a hack as version 0 differed in definition of var_get                              if (version == 0) resn--;                          }                            switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }                            if (chan == nchan - 1)                          {                              SampleNumber += blocksize;                          }                          chan = (chan + 1) % nchan;                          break;                      case FN_BLOCKSIZE:                          blocksize = (int)UINT_GET((int)(Math.Log(blocksize) / M_LN2)' stream);                          break;                      case FN_BITSHIFT:                          uvar_get(BITSHIFTSIZE' stream);                          break;                      case FN_VERBATIM:                          int cklen = uvar_get(VERBATIM_CKSIZE_SIZE' stream);                          while (cklen-- != 0)                          {                              uvar_get(VERBATIM_BYTE_SIZE' stream);                          }                          break;                        default:                          return 0;                  }
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: byte[] buf = new byte[32];
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: stream.Seek(-32' SeekOrigin.End);
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: stream.Read(buf' 0' 32);
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: stream.Seek(-128 - 32' SeekOrigin.End);
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: stream.Seek(-128 - 32' SeekOrigin.End);
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: stream.Read(buf' 0' 32);
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: ByteUtils.Compare(buf' APETAGEX' 8) == false
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: ByteUtils.Compare(buf' APETAGEX' 8) == false
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: version += (buf[i] << ((i - 8) * 8));
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: version += (buf[i] << ((i - 8) * 8));
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: i < 12
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: version != 2000 && version != 1000
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: version != 2000 && version != 1000
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: tagSize += (buf[i] << ((i - 12) * 8));
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: tagSize += (buf[i] << ((i - 12) * 8));
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: i < 16
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: bool containsHeader = ((buf[23] >> 7) == 1);
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: bool containsHeader = ((buf[23] >> 7) == 1);
Magic Number,IdSharp.AudioInfo,APEv2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\APEv2.cs,GetTagSize,The following statement contains a magic number: tagSize += (containsHeader ? 32 : 0);
Magic Number,IdSharp.AudioInfo,ID3v1,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v1.cs,GetTagSize,The following statement contains a magic number: stream.Seek(-128' SeekOrigin.End);
Magic Number,IdSharp.AudioInfo,ID3v1,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v1.cs,GetTagSize,The following statement contains a magic number: byte[] buf = new byte[3];
Magic Number,IdSharp.AudioInfo,ID3v1,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v1.cs,GetTagSize,The following statement contains a magic number: stream.Read(buf' 0' 3);
Magic Number,IdSharp.AudioInfo,ID3v1,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v1.cs,GetTagSize,The following statement contains a magic number: return 128;
Magic Number,IdSharp.AudioInfo,ID3v1,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v1.cs,GetTagSize,The following statement contains a magic number: buf[0] == 0x54 && buf[1] == 0x41 && buf[2] == 0x47
Magic Number,IdSharp.AudioInfo,ID3v1,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v1.cs,GetTagSize,The following statement contains a magic number: stream.Length >= 128
Magic Number,IdSharp.AudioInfo,ID3v2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,GetTagSize,The following statement contains a magic number: byte[] identifier = stream.Read(3);
Magic Number,IdSharp.AudioInfo,ID3v2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,GetTagSize,The following statement contains a magic number: !(identifier[0] == 0x49 && identifier[1] == 0x44 && identifier[2] == 0x33)
Magic Number,IdSharp.AudioInfo,ID3v2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,GetTagSize,The following statement contains a magic number: return tagSize + 10 + (header.IsFooterPresent ? 10 : 0);
Magic Number,IdSharp.AudioInfo,ID3v2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,GetTagSize,The following statement contains a magic number: return tagSize + 10 + (header.IsFooterPresent ? 10 : 0);
Magic Number,IdSharp.AudioInfo,ID3v2,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,GetTagSize,The following statement contains a magic number: stream.Length >= 16
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: byte[] tmpHeader = stream.Read(7);
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: tmpHeader[0] < 2 || tmpHeader[0] > 4
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: tmpHeader[0] < 2 || tmpHeader[0] > 4
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: switch (_tagVersion)                  {                      case ID3v2TagVersion.ID3v23:                          _isFooterPresent = false;                          break;                      case ID3v2TagVersion.ID3v22:                          _isFooterPresent = false;                          break;                      case ID3v2TagVersion.ID3v24:                          _isFooterPresent = ((tmpHeader[2] & 0x10) == 0x10);                          break;                  }
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: _tagSize = (tmpHeader[3] << 21);
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: _tagSize = (tmpHeader[3] << 21);
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: _tagSize += (tmpHeader[4] << 14);
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: _tagSize += (tmpHeader[4] << 14);
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: _tagSize += (tmpHeader[5] << 7);
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: _tagSize += (tmpHeader[5] << 7);
Magic Number,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following statement contains a magic number: _tagSize += (tmpHeader[6]);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ReadInt32,The following statement contains a magic number: int n = (data[offset] & 0xff) << 24;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ReadInt32,The following statement contains a magic number: n += (data[offset + 1] & 0xff) << 16;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ReadInt32,The following statement contains a magic number: n += (data[offset + 2] & 0xff) << 8;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ReadInt32,The following statement contains a magic number: n += (data[offset + 2] & 0xff) << 8;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ReadInt32,The following statement contains a magic number: n += (data[offset + 3] & 0xff);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: byte[] data_format = new byte[4];
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: byte[] encoder_vendor = new byte[4];
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: int num = ReadInt32(atomdata' 4);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: int stsdOff = 8;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: stsdOff += 4;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Buffer.BlockCopy(atomdata' stsdOff' data_format' 0' 4);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: stsdOff += 12;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: byte[] data = new byte[size - 4 - 12];
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: byte[] data = new byte[size - 4 - 12];
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Buffer.BlockCopy(atomdata' stsdOff' data' 0' (size - 4 - 12));
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Buffer.BlockCopy(atomdata' stsdOff' data' 0' (size - 4 - 12));
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: stsdOff += (size - 4 - 12);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: stsdOff += (size - 4 - 12);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Buffer.BlockCopy(data' 4' encoder_vendor' 0' 4);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Buffer.BlockCopy(data' 4' encoder_vendor' 0' 4);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Frequency = ((data[16] & 0xff) << 8) + (data[17] & 0xff);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Frequency = ((data[16] & 0xff) << 8) + (data[17] & 0xff);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Frequency = ((data[16] & 0xff) << 8) + (data[17] & 0xff);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Channels = (data[8] << 8) + data[9];
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Channels = (data[8] << 8) + data[9];
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseStsdAtom,The following statement contains a magic number: Channels = (data[8] << 8) + data[9];
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: string atomname = ByteUtils.ISO88591.GetString(stream.Read(4));
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: byte[] atomdata = stream.Read(atomsize - 8);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: nextTagPosition = i + 8;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: atomdata[i] == 'i' && atomdata[i + 1] == 'l' && atomdata[i + 2] == 's' && atomdata[i + 3] == 't'
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: atomdata[i] == 'i' && atomdata[i + 1] == 'l' && atomdata[i + 2] == 's' && atomdata[i + 3] == 't'
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: i < atomdata.Length - 4
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: int size = ReadInt32(atomdata' (nextTagPosition - 4)) - 4;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: int size = ReadInt32(atomdata' (nextTagPosition - 4)) - 4;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: nextTagPosition += size + 4;
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: nextTagPosition < (atomsize - 4) && nextTagPosition > 8
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: nextTagPosition < (atomsize - 4) && nextTagPosition > 8
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: stream.Seek(12' SeekOrigin.Current);
Magic Number,IdSharp.AudioInfo,Mpeg4Tag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\Mpeg4Tag.cs,ParseAtom,The following statement contains a magic number: byte[] atomdata = stream.Read(atomsize - 8);
Magic Number,IdSharp.AudioInfo.Inspection,BasicLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\BasicLameTagReader.cs,BasicLameTagReader,The following statement contains a magic number: byte[] versionString = new byte[6];
Magic Number,IdSharp.AudioInfo.Inspection,BasicLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\BasicLameTagReader.cs,BasicLameTagReader,The following statement contains a magic number: i < 4 || (i == 4 && _tag.VersionString[i] == 'b')
Magic Number,IdSharp.AudioInfo.Inspection,BasicLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\BasicLameTagReader.cs,BasicLameTagReader,The following statement contains a magic number: i < 4 || (i == 4 && _tag.VersionString[i] == 'b')
Magic Number,IdSharp.AudioInfo.Inspection,BasicLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\BasicLameTagReader.cs,BasicLameTagReader,The following statement contains a magic number: _preset = (ushort)(((_tag.Surround_Preset[0] << 8) + _tag.Surround_Preset[1]) & 0x07FF);
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset >= 8 && preset <= 320
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset >= 8 && preset <= 320
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: preset == 410 || preset == 420 || preset == 430 || preset == 440 || preset == 450 ||                      preset == 460 || preset == 470 || preset == 480 || preset == 490 || preset == 500
Magic Number,IdSharp.AudioInfo.Inspection,DescriptiveLameTagReader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\DescriptiveLameTagReader.cs,DeterminePreset,The following statement contains a magic number: _basicReader.EncodingMethod == 4
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,MpegAudio,The following statement contains a magic number: const int dataLength = MaxMpegFrameLength * 2;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,MpegAudio,The following statement contains a magic number: br.BaseStream.Seek((m_FileLength - startPos) / 2' SeekOrigin.Begin);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: Byte[] headerData = new Byte[4];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: Buffer.BlockCopy(data' 0' headerData' 0' 4);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: int size = data.Length - 4;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: headerData[1] = headerData[2];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: headerData[2] = headerData[3];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: headerData[2] = headerData[3];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: headerData[3] = data[4 + i];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindFrame,The following statement contains a magic number: headerData[3] = data[4 + i];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsFrameHeader,The following statement contains a magic number: (headerData[0] & 0xFF) != 0xFF ||                  (headerData[1] & 0xE0) != 0xE0 ||                  ((headerData[1] >> 3) & 3) == 1 ||                  ((headerData[1] >> 1) & 3) == 0 ||                  (headerData[2] & 0xF0) == 0xF0 ||                  (headerData[2] & 0xF0) == 0 ||                  ((headerData[2] >> 2) & 3) == 3 ||                  (headerData[3] & 3) == 2
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.VersionID = (MpegVersion)((headerData[1] >> 3) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.VersionID = (MpegVersion)((headerData[1] >> 3) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.LayerID = (MpegLayer)((headerData[1] >> 1) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.BitRateID = (Byte)(headerData[2] >> 4);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.BitRateID = (Byte)(headerData[2] >> 4);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.SampleRateID = (SampleRateLevel)((headerData[2] >> 2) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.SampleRateID = (SampleRateLevel)((headerData[2] >> 2) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.SampleRateID = (SampleRateLevel)((headerData[2] >> 2) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.PaddingBit = ((headerData[2] >> 1) & 1) == 1;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.PrivateBit = (headerData[2] & 1) == 1;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.ModeID = (MpegChannel)((headerData[3] >> 6) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.ModeID = (MpegChannel)((headerData[3] >> 6) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.ModeID = (MpegChannel)((headerData[3] >> 6) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.ModeExtensionID = (JointStereoExtensionMode)((headerData[3] >> 4) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.ModeExtensionID = (JointStereoExtensionMode)((headerData[3] >> 4) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.ModeExtensionID = (JointStereoExtensionMode)((headerData[3] >> 4) & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.CopyrightBit = ((headerData[3] >> 3) & 1) == 1;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.CopyrightBit = ((headerData[3] >> 3) & 1) == 1;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.OriginalBit = ((headerData[3] >> 2) & 1) == 1;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.OriginalBit = ((headerData[3] >> 2) & 1) == 1;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.EmphasisID = (Emphasis)(headerData[3] & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,DecodeHeader,The following statement contains a magic number: m_Frame.EmphasisID = (Emphasis)(headerData[3] & 3);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,ValidFrameAt,The following statement contains a magic number: Byte[] HeaderData = new Byte[4];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,ValidFrameAt,The following statement contains a magic number: HeaderData[2] = data[index + 2];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,ValidFrameAt,The following statement contains a magic number: HeaderData[2] = data[index + 2];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,ValidFrameAt,The following statement contains a magic number: HeaderData[3] = data[index + 3];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,ValidFrameAt,The following statement contains a magic number: HeaderData[3] = data[index + 3];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFrameLength,The following statement contains a magic number: ushort result = (ushort)((Coefficient * BitRate * 1000 / SampleRate) + Padding);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsXing,The following statement contains a magic number: bool result =                  (data[index] == 0) &&                  (data[index + 1] == 0) &&                  (data[index + 2] == 0) &&                  (data[index + 3] == 0) &&                  (data[index + 4] == 0) &&                  (data[index + 5] == 0);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsXing,The following statement contains a magic number: bool result =                  (data[index] == 0) &&                  (data[index + 1] == 0) &&                  (data[index + 2] == 0) &&                  (data[index + 3] == 0) &&                  (data[index + 4] == 0) &&                  (data[index + 5] == 0);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsXing,The following statement contains a magic number: bool result =                  (data[index] == 0) &&                  (data[index + 1] == 0) &&                  (data[index + 2] == 0) &&                  (data[index + 3] == 0) &&                  (data[index + 4] == 0) &&                  (data[index + 5] == 0);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,IsXing,The following statement contains a magic number: bool result =                  (data[index] == 0) &&                  (data[index + 1] == 0) &&                  (data[index + 2] == 0) &&                  (data[index + 3] == 0) &&                  (data[index + 4] == 0) &&                  (data[index + 5] == 0);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVBR,The following statement contains a magic number: String id = String.Format("{0}{1}{2}{3}"' (Char)data[index]' (Char)data[index + 1]' (Char)data[index + 2]' (Char)data[index + 3]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVBR,The following statement contains a magic number: String id = String.Format("{0}{1}{2}{3}"' (Char)data[index]' (Char)data[index + 1]' (Char)data[index + 2]' (Char)data[index + 3]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetVBRFrameOffset,The following statement contains a magic number: result = 36;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetCoefficient,The following statement contains a magic number: result = 48;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetPadding,The following statement contains a magic number: result = 4;
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Frames =                  data[index + 8] * 0x1000000 +                  data[index + 9] * 0x10000 +                  data[index + 10] * 0x100 +                  data[index + 11];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Frames =                  data[index + 8] * 0x1000000 +                  data[index + 9] * 0x10000 +                  data[index + 10] * 0x100 +                  data[index + 11];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Frames =                  data[index + 8] * 0x1000000 +                  data[index + 9] * 0x10000 +                  data[index + 10] * 0x100 +                  data[index + 11];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Frames =                  data[index + 8] * 0x1000000 +                  data[index + 9] * 0x10000 +                  data[index + 10] * 0x100 +                  data[index + 11];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Bytes =                  data[index + 12] * 0x1000000 +                  data[index + 13] * 0x10000 +                  data[index + 14] * 0x100 +                  data[index + 15];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Bytes =                  data[index + 12] * 0x1000000 +                  data[index + 13] * 0x10000 +                  data[index + 14] * 0x100 +                  data[index + 15];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Bytes =                  data[index + 12] * 0x1000000 +                  data[index + 13] * 0x10000 +                  data[index + 14] * 0x100 +                  data[index + 15];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Bytes =                  data[index + 12] * 0x1000000 +                  data[index + 13] * 0x10000 +                  data[index + 14] * 0x100 +                  data[index + 15];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.Scale = data[index + 119];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetXingInfo,The following statement contains a magic number: result.VendorID = String.Format("{0}{1}{2}{3}{4}{5}{6}{7}"'                  (Char)data[index + 120]'                  (Char)data[index + 121]'                  (Char)data[index + 122]'                  (Char)data[index + 123]'                  (Char)data[index + 124]'                  (Char)data[index + 125]'                  (Char)data[index + 126]'                  (Char)data[index + 127]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Scale = data[index + 9];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Bytes =                  data[index + 10] * 0x1000000 +                  data[index + 11] * 0x10000 +                  data[index + 12] * 0x100 +                  data[index + 13];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Bytes =                  data[index + 10] * 0x1000000 +                  data[index + 11] * 0x10000 +                  data[index + 12] * 0x100 +                  data[index + 13];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Bytes =                  data[index + 10] * 0x1000000 +                  data[index + 11] * 0x10000 +                  data[index + 12] * 0x100 +                  data[index + 13];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Bytes =                  data[index + 10] * 0x1000000 +                  data[index + 11] * 0x10000 +                  data[index + 12] * 0x100 +                  data[index + 13];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Frames =                  data[index + 14] * 0x1000000 +                  data[index + 15] * 0x10000 +                  data[index + 16] * 0x100 +                  data[index + 17];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Frames =                  data[index + 14] * 0x1000000 +                  data[index + 15] * 0x10000 +                  data[index + 16] * 0x100 +                  data[index + 17];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Frames =                  data[index + 14] * 0x1000000 +                  data[index + 15] * 0x10000 +                  data[index + 16] * 0x100 +                  data[index + 17];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetFhGInfo,The following statement contains a magic number: result.Frames =                  data[index + 14] * 0x1000000 +                  data[index + 15] * 0x10000 +                  data[index + 16] * 0x100 +                  data[index + 17];
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: String VendorID = String.Format("{0}{1}{2}{3}"'                      (Char)data[size - i - 8]'                      (Char)data[size - i - 7]'                      (Char)data[size - i - 6]'                      (Char)data[size - i - 5]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: String VendorID = String.Format("{0}{1}{2}{3}"'                      (Char)data[size - i - 8]'                      (Char)data[size - i - 7]'                      (Char)data[size - i - 6]'                      (Char)data[size - i - 5]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: String VendorID = String.Format("{0}{1}{2}{3}"'                      (Char)data[size - i - 8]'                      (Char)data[size - i - 7]'                      (Char)data[size - i - 6]'                      (Char)data[size - i - 5]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: String VendorID = String.Format("{0}{1}{2}{3}"'                      (Char)data[size - i - 8]'                      (Char)data[size - i - 7]'                      (Char)data[size - i - 6]'                      (Char)data[size - i - 5]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: result = VendorID +                          String.Format("{0}{1}{2}{3}"'                              (Char)data[size - i - 4]'                              (Char)data[size - i - 3]'                              (Char)data[size - i - 2]'                              (Char)data[size - i - 1]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: result = VendorID +                          String.Format("{0}{1}{2}{3}"'                              (Char)data[size - i - 4]'                              (Char)data[size - i - 3]'                              (Char)data[size - i - 2]'                              (Char)data[size - i - 1]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: result = VendorID +                          String.Format("{0}{1}{2}{3}"'                              (Char)data[size - i - 4]'                              (Char)data[size - i - 3]'                              (Char)data[size - i - 2]'                              (Char)data[size - i - 1]);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,FindVendorID,The following statement contains a magic number: i <= size - 8
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetVBREncoderID,The following statement contains a magic number: String vbrVendor = m_VBR.VendorID.Substring(0' 4);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetCBREncoderID,The following statement contains a magic number: shortVendor = m_VendorID.Substring(0' 4);
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetCBREncoderID,The following statement contains a magic number: !String.IsNullOrEmpty(m_VendorID) && m_VendorID.Length >= 4
Magic Number,IdSharp.AudioInfo.Inspection,MpegAudio,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\MpegAudio.cs,GetCBREncoderID,The following statement contains a magic number: GetBitRate(m_Frame) <= 160 && m_Frame.ModeID == MpegChannel.Stereo
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 255' 58' 1' 1' 3' 2' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 255' 58' 1' 1' 3' 2' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 255' 58' 1' 1' 3' 2' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 255' 58' 1' 1' 3' 2' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 255' 58' 1' 1' 3' 2' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 255' 58' 1' 1' 3' 2' 206' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 255' 58' 1' 1' 3' 2' 206' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 255' 58' 1' 1' 3' 2' 206' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 255' 58' 1' 1' 3' 2' 206' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 255' 58' 1' 1' 3' 2' 206' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 1' 1' 3' 4' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 1' 1' 3' 4' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 1' 1' 3' 4' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 1' 1' 3' 4' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 1' 1' 3' 4' 205' LamePreset.Insane));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 3' 2' 3' 2' 195' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 3' 2' 3' 2' 195' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 3' 2' 3' 2' 195' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 3' 2' 3' 2' 195' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 3' 2' 3' 2' 195' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 3' 2' 3' 2' 195' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 2' 196' LamePreset.Extreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 4' 2' 3' 2' 195' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 4' 2' 3' 2' 195' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 4' 2' 3' 2' 195' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 4' 2' 3' 2' 195' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 4' 2' 3' 2' 195' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 78' 4' 2' 3' 2' 195' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 2' 196' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 2' 196' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 2' 196' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 2' 196' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 2' 196' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 2' 196' LamePreset.FastExtreme));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 0' 78' 3' 2' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 78' 3' 1' 3' 4' 190' LamePreset.Standard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 4' 190' LamePreset.FastStandard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 4' 190' LamePreset.FastStandard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 4' 190' LamePreset.FastStandard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 4' 190' LamePreset.FastStandard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 4' 190' LamePreset.FastStandard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 78' 4' 2' 3' 4' 190' LamePreset.FastStandard));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 3' 2' 3' 4' 180' LamePreset.Medium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 3' 2' 3' 4' 180' LamePreset.Medium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 3' 2' 3' 4' 180' LamePreset.Medium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 3' 2' 3' 4' 180' LamePreset.Medium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 3' 2' 3' 4' 180' LamePreset.Medium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 3' 2' 3' 4' 180' LamePreset.Medium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 4' 2' 3' 4' 180' LamePreset.FastMedium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 4' 2' 3' 4' 180' LamePreset.FastMedium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 4' 2' 3' 4' 180' LamePreset.FastMedium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 4' 2' 3' 4' 180' LamePreset.FastMedium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 4' 2' 3' 4' 180' LamePreset.FastMedium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 0' 68' 4' 2' 3' 4' 180' LamePreset.FastMedium));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 88' 4' 1' 3' 3' 195' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 88' 4' 1' 3' 3' 195' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 88' 4' 1' 3' 3' 195' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 88' 4' 1' 3' 3' 195' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 0' 88' 4' 1' 3' 3' 195' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 88' 4' 1' 3' 3' 196' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 88' 4' 1' 3' 3' 196' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 88' 4' 1' 3' 3' 196' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 88' 4' 1' 3' 3' 196' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' LameVersionGroup.lvg3931_3903up' 0' 88' 4' 1' 3' 3' 196' LamePreset.R3mix));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 255' 99' 1' 1' 1' 2' 0' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 255' 99' 1' 1' 1' 2' 0' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 255' 99' 1' 1' 1' 2' 0' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 255' 58' 2' 1' 3' 2' 206' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 255' 58' 2' 1' 3' 2' 206' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 255' 58' 2' 1' 3' 2' 206' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 255' 58' 2' 1' 3' 2' 206' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 255' 58' 2' 1' 3' 2' 206' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 255' 58' 2' 1' 3' 2' 206' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 255' 58' 2' 1' 3' 2' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 255' 58' 2' 1' 3' 2' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 255' 58' 2' 1' 3' 2' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 255' 58' 2' 1' 3' 2' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 255' 58' 2' 1' 3' 2' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 255' 58' 2' 1' 3' 2' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 2' 1' 3' 4' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 2' 1' 3' 4' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 2' 1' 3' 4' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 2' 1' 3' 4' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 2' 1' 3' 4' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 255' 57' 2' 1' 3' 4' 205' LamePreset.Studio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 192' 88' 1' 1' 1' 2' 0' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 192' 88' 1' 1' 1' 2' 0' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 192' 88' 1' 1' 1' 2' 0' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 192' 58' 2' 2' 3' 2' 196' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 192' 58' 2' 2' 3' 2' 196' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 192' 58' 2' 2' 3' 2' 196' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 192' 58' 2' 2' 3' 2' 196' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 192' 58' 2' 2' 3' 2' 196' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 192' 58' 2' 2' 3' 2' 196' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 192' 58' 2' 2' 3' 2' 196' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 192' 58' 2' 2' 3' 2' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 192' 58' 2' 2' 3' 2' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 192' 58' 2' 2' 3' 2' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 192' 58' 2' 2' 3' 2' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 192' 58' 2' 2' 3' 2' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 192' 58' 2' 2' 3' 2' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 192' 58' 2' 2' 3' 2' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 192' 57' 2' 1' 3' 4' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 192' 57' 2' 1' 3' 4' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 192' 57' 2' 1' 3' 4' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 192' 57' 2' 1' 3' 4' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 192' 57' 2' 1' 3' 4' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 192' 57' 2' 1' 3' 4' 195' LamePreset.CD));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 160' 78' 1' 1' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 160' 78' 1' 1' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 160' 78' 1' 1' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 160' 78' 1' 1' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 160' 78' 1' 1' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 160' 58' 2' 2' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 160' 58' 2' 2' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 160' 58' 2' 2' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 160' 58' 2' 2' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 160' 58' 2' 2' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 160' 58' 2' 2' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 160' 58' 2' 2' 3' 2' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 160' 57' 2' 1' 3' 4' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 160' 57' 2' 1' 3' 4' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 160' 57' 2' 1' 3' 4' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 160' 57' 2' 1' 3' 4' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 160' 57' 2' 1' 3' 4' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 160' 57' 2' 1' 3' 4' 180' LamePreset.Hifi));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 180' LamePreset.Tape));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 180' LamePreset.Tape));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 180' LamePreset.Tape));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 180' LamePreset.Tape));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 180' LamePreset.Tape));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 150' LamePreset.Radio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 150' LamePreset.Radio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 150' LamePreset.Radio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 150' LamePreset.Radio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 128' 67' 1' 1' 3' 2' 150' LamePreset.Radio));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 112' 67' 1' 1' 3' 2' 150' LamePreset.FM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 112' 67' 1' 1' 3' 2' 150' LamePreset.FM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 112' 67' 1' 1' 3' 2' 150' LamePreset.FM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 112' 67' 1' 1' 3' 2' 150' LamePreset.FM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' LameVersionGroup.lvg3902_391' 112' 67' 1' 1' 3' 2' 150' LamePreset.FM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 112' 58' 2' 2' 3' 2' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 112' 58' 2' 2' 3' 2' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 112' 58' 2' 2' 3' 2' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 112' 58' 2' 2' 3' 2' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 112' 58' 2' 2' 3' 2' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 112' 58' 2' 2' 3' 2' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 112' 58' 2' 2' 3' 2' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 112' 57' 2' 1' 3' 4' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 112' 57' 2' 1' 3' 4' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 112' 57' 2' 1' 3' 4' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 112' 57' 2' 1' 3' 4' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 112' 57' 2' 1' 3' 4' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 112' 57' 2' 1' 3' 4' 160' LamePreset.TapeRadioFM));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 56' 58' 2' 2' 0' 2' 100' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 56' 58' 2' 2' 0' 2' 100' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 56' 58' 2' 2' 0' 2' 100' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 56' 58' 2' 2' 0' 2' 100' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 56' 58' 2' 2' 0' 2' 100' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 56' 58' 2' 2' 0' 2' 100' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 56' 57' 2' 1' 0' 4' 150' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 56' 57' 2' 1' 0' 4' 150' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 56' 57' 2' 1' 0' 4' 150' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 56' 57' 2' 1' 0' 4' 150' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 56' 57' 2' 1' 0' 4' 150' LamePreset.Voice));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 40' 65' 1' 1' 0' 2' 75' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 40' 65' 1' 1' 0' 2' 75' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 40' 65' 1' 1' 0' 2' 75' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg390_3901_392' 40' 65' 1' 1' 0' 2' 75' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 40' 65' 1' 1' 0' 2' 76' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 40' 65' 1' 1' 0' 2' 76' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 40' 65' 1' 1' 0' 2' 76' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3902_391' 40' 65' 1' 1' 0' 2' 76' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 40' 58' 2' 2' 0' 2' 70' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 40' 58' 2' 2' 0' 2' 70' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 40' 58' 2' 2' 0' 2' 70' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 40' 58' 2' 2' 0' 2' 70' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 40' 58' 2' 2' 0' 2' 70' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' LameVersionGroup.lvg3931_3903up' 40' 58' 2' 2' 0' 2' 70' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 40' 57' 2' 1' 0' 4' 105' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 40' 57' 2' 1' 0' 4' 105' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 40' 57' 2' 1' 0' 4' 105' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 40' 57' 2' 1' 0' 4' 105' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 40' 57' 2' 1' 0' 4' 105' LamePreset.MWUS));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 24' 58' 2' 2' 0' 2' 40' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 24' 58' 2' 2' 0' 2' 40' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 24' 58' 2' 2' 0' 2' 40' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 24' 58' 2' 2' 0' 2' 40' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 24' 58' 2' 2' 0' 2' 40' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 24' 58' 2' 2' 0' 2' 40' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 24' 58' 2' 2' 0' 2' 39' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 24' 58' 2' 2' 0' 2' 39' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 24' 58' 2' 2' 0' 2' 39' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 24' 58' 2' 2' 0' 2' 39' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 24' 58' 2' 2' 0' 2' 39' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 24' 58' 2' 2' 0' 2' 39' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 24' 57' 2' 1' 0' 4' 59' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 24' 57' 2' 1' 0' 4' 59' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 24' 57' 2' 1' 0' 4' 59' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 24' 57' 2' 1' 0' 4' 59' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 24' 57' 2' 1' 0' 4' 59' LamePreset.MWEU));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 16' 58' 2' 2' 0' 2' 38' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 16' 58' 2' 2' 0' 2' 38' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 16' 58' 2' 2' 0' 2' 38' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 16' 58' 2' 2' 0' 2' 38' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 16' 58' 2' 2' 0' 2' 38' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg3931_3903up' 16' 58' 2' 2' 0' 2' 38' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 16' 58' 2' 2' 0' 2' 37' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 16' 58' 2' 2' 0' 2' 37' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 16' 58' 2' 2' 0' 2' 37' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 16' 58' 2' 2' 0' 2' 37' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 16' 58' 2' 2' 0' 2' 37' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg393' 16' 58' 2' 2' 0' 2' 37' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 16' 57' 2' 1' 0' 4' 56' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 16' 57' 2' 1' 0' 4' 56' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 16' 57' 2' 1' 0' 4' 56' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 16' 57' 2' 1' 0' 4' 56' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,PresetGuesser,The following statement contains a magic number: _presetGuessTable.Add(new PresetGuessRow(LameVersionGroup.lvg394up' 16' 57' 2' 1' 0' 4' 56' LamePreset.Phone));
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessPreset,The following statement contains a magic number: String VersionString4 = AVersionString.Substring(0' 4);
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessPreset,The following statement contains a magic number: String VersionString5 = AVersionString.Substring(0' 5);
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessForVersion,The following statement contains a magic number: (row.HasVersionGroup(AVersionGroup)) &&  				    (row.TVs[1] == AQuality) &&  				    (row.TVs[2] == AEncodingMethod) &&  				    (row.TVs[3] == ANoiseShaping) &&  				    (row.TVs[4] == AStereoMode) &&  				    (row.TVs[5] == AATHType) &&  				    (row.TVs[6] == ALowpassDiv100)
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessForVersion,The following statement contains a magic number: (row.HasVersionGroup(AVersionGroup)) &&  				    (row.TVs[1] == AQuality) &&  				    (row.TVs[2] == AEncodingMethod) &&  				    (row.TVs[3] == ANoiseShaping) &&  				    (row.TVs[4] == AStereoMode) &&  				    (row.TVs[5] == AATHType) &&  				    (row.TVs[6] == ALowpassDiv100)
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessForVersion,The following statement contains a magic number: (row.HasVersionGroup(AVersionGroup)) &&  				    (row.TVs[1] == AQuality) &&  				    (row.TVs[2] == AEncodingMethod) &&  				    (row.TVs[3] == ANoiseShaping) &&  				    (row.TVs[4] == AStereoMode) &&  				    (row.TVs[5] == AATHType) &&  				    (row.TVs[6] == ALowpassDiv100)
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessForVersion,The following statement contains a magic number: (row.HasVersionGroup(AVersionGroup)) &&  				    (row.TVs[1] == AQuality) &&  				    (row.TVs[2] == AEncodingMethod) &&  				    (row.TVs[3] == ANoiseShaping) &&  				    (row.TVs[4] == AStereoMode) &&  				    (row.TVs[5] == AATHType) &&  				    (row.TVs[6] == ALowpassDiv100)
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuesser,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuesser.cs,GuessForVersion,The following statement contains a magic number: (row.HasVersionGroup(AVersionGroup)) &&  				    (row.TVs[1] == AQuality) &&  				    (row.TVs[2] == AEncodingMethod) &&  				    (row.TVs[3] == ANoiseShaping) &&  				    (row.TVs[4] == AStereoMode) &&  				    (row.TVs[5] == AATHType) &&  				    (row.TVs[6] == ALowpassDiv100)
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,HasVersionGroup,The following statement contains a magic number: i<3
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,Initialize,The following statement contains a magic number: VGs[2] = vg3;
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,Initialize,The following statement contains a magic number: TVs[2] = tv3;
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,Initialize,The following statement contains a magic number: TVs[3] = tv4;
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,Initialize,The following statement contains a magic number: TVs[4] = tv5;
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,Initialize,The following statement contains a magic number: TVs[5] = tv6;
Magic Number,IdSharp.AudioInfo.Inspection,PresetGuessRow,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\PresetGuessRow.cs,Initialize,The following statement contains a magic number: TVs[6] = tv7;
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.Encoder = br.ReadBytes(4);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.VersionString = br.ReadBytes(5);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.ReplayGain = br.ReadBytes(8);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.EncoderDelays = br.ReadBytes(3);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.Surround_Preset = br.ReadBytes(2);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.MusicLength = br.ReadBytes(4);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.MusicCRC = br.ReadBytes(2);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.InfoTagCRC = br.ReadBytes(2);
Magic Number,IdSharp.AudioInfo.Inspection,LameTag,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpLameTag.StereoMode = (byte)((tmpLameTag.MiscInfo & 0x1C) >> 2);
Magic Number,IdSharp.AudioInfo.Inspection,OldLameHeader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpOldLameHeader.Encoder = br.ReadBytes(4);
Magic Number,IdSharp.AudioInfo.Inspection,OldLameHeader,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpOldLameHeader.VersionString = br.ReadBytes(16);
Magic Number,IdSharp.AudioInfo.Inspection,StartOfFile,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpStartOfFile.Misc1 = br.ReadBytes(13);
Magic Number,IdSharp.AudioInfo.Inspection,StartOfFile,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpStartOfFile.Info1 = br.ReadBytes(4);
Magic Number,IdSharp.AudioInfo.Inspection,StartOfFile,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpStartOfFile.Misc2 = br.ReadBytes(4);
Magic Number,IdSharp.AudioInfo.Inspection,StartOfFile,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpStartOfFile.Info2 = br.ReadBytes(4);
Magic Number,IdSharp.AudioInfo.Inspection,StartOfFile,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpStartOfFile.Misc3 = br.ReadBytes(11);
Magic Number,IdSharp.AudioInfo.Inspection,StartOfFile,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Inspection\Structs.cs,FromBinaryReader,The following statement contains a magic number: tmpStartOfFile.Info3 = br.ReadBytes(4);
Missing Default,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetSamplesPerFrame,The following switch statement is missing a default case: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2 ||                               mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 1152;                      break;                    // MPEG-2/2.5                  case MpegVersion.Mpeg2:                  case MpegVersion.Mpeg25:                      if (mpegLayer == MpegLayer.Layer1) tmpSamplesPerFrame = 384;                      else if (mpegLayer == MpegLayer.Layer2) tmpSamplesPerFrame = 1152;                      else if (mpegLayer == MpegLayer.Layer3) tmpSamplesPerFrame = 576;                      break;              }
Missing Default,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following switch statement is missing a default case: switch (mpegVersion)              {                  // MPEG-1                  case MpegVersion.Mpeg1:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2                  case MpegVersion.Mpeg2:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      } // end switch (Frequency)                      break;                    // MPEG-2.5                  case MpegVersion.Mpeg25:                      switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      } // end switch (Frequency)                      break;              }
Missing Default,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following switch statement is missing a default case: switch (frequencyID)                      {                          case 0:                              tmpFrequency = 44100;                              break;                          case 1:                              tmpFrequency = 48000;                              break;                          case 2:                              tmpFrequency = 32000;                              break;                      }
Missing Default,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following switch statement is missing a default case: switch (frequencyID)                      {                          case 0:                              tmpFrequency = 22050;                              break;                          case 1:                              tmpFrequency = 24000;                              break;                          case 2:                              tmpFrequency = 16000;                              break;                      }
Missing Default,IdSharp.AudioInfo,Mpeg,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Mpeg\Mpeg.cs,GetFrequency,The following switch statement is missing a default case: switch (frequencyID)                      {                          case 0:                              tmpFrequency = 11025;                              break;                          case 1:                              tmpFrequency = 12000;                              break;                          case 2:                              tmpFrequency = 8000;                              break;                      }
Missing Default,IdSharp.AudioInfo,Musepack,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Musepack\Musepack.cs,Musepack,The following switch statement is missing a default case: switch ((byteArray[1] % 32) / 2)                      {                          case 3:                               _streamVersion = 4;                               break;                          case 7:                               _streamVersion = 5;                               break;                          case 11:                               _streamVersion = 6;                               break;                      }
Missing Default,IdSharp.AudioInfo,Shorten,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\Shorten\Shorten.cs,getSamples,The following switch statement is missing a default case: switch (cmd)                          {                              case FN_ZERO:                                  break;                              case FN_DIFF0:                              case FN_DIFF1:                              case FN_DIFF2:                              case FN_DIFF3:                                  for (i = 0; i < blocksize; i++)                                  {                                      int nbin = resn + 1;                                        if (nbitget == 0)                                      {                                          if (nbyteget < 4)                                          {                                              int bytes = stream.Read(getbuf' 0' BUFSIZE);                                              getbufOffset = 0;                                              nbyteget += bytes;                                          }                                            gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                    (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                            getbufOffset += 4;                                          nbyteget -= 4;                                            nbitget = 32;                                      }                                        while ((gbuffer & (1L << --nbitget)) == 0)                                      {                                          if (nbitget == 0)                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbitget = 32;                                          }                                      }                                        while (nbin != 0)                                      {                                          if (nbitget >= nbin)                                          {                                              nbitget -= nbin;                                              nbin = 0;                                          }                                          else                                          {                                              if (nbyteget < 4)                                              {                                                  int bytes = stream.Read(getbuf' 0' BUFSIZE);                                                  getbufOffset = 0;                                                  nbyteget += bytes;                                              }                                                gbuffer = (((uint)getbuf[getbufOffset]) << 24) | (((uint)getbuf[getbufOffset + 1]) << 16) |                                                        (((uint)getbuf[getbufOffset + 2]) << 8) | (getbuf[getbufOffset + 3]);                                                getbufOffset += 4;                                              nbyteget -= 4;                                                nbin -= nbitget;                                              nbitget = 32;                                          }                                      }                                  }                                  break;                              case FN_QLPC:                                  int nlpc = uvar_get(LPCQSIZE' stream);                                    for (i = 0; i < nlpc; i++)                                      var_get(LPCQUANT' stream);                                  break;                          }
Missing Default,IdSharp.AudioInfo,ID3v2Header,D:\research\architectureSmells\repos\judwhite_IdSharp\IdSharp.AudioInfo\TagSizes\ID3v2.cs,ID3v2Header,The following switch statement is missing a default case: switch (_tagVersion)                  {                      case ID3v2TagVersion.ID3v23:                          _isFooterPresent = false;                          break;                      case ID3v2TagVersion.ID3v22:                          _isFooterPresent = false;                          break;                      case ID3v2TagVersion.ID3v24:                          _isFooterPresent = ((tmpHeader[2] & 0x10) == 0x10);                          break;                  }
