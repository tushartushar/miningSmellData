Implementation smell,Namespace,Class,File,Method,Description
Complex Method,IdSharp.Common.Utils,ByteUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\ByteUtils.cs,ReplaceBytes,Cyclomatic complexity of the method is 8
Complex Method,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Get,Cyclomatic complexity of the method is 8
Complex Method,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Post,Cyclomatic complexity of the method is 9
Complex Method,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,PostCookies,Cyclomatic complexity of the method is 9
Complex Method,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,AddField,Cyclomatic complexity of the method is 8
Complex Method,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,Cyclomatic complexity of the method is 23
Long Parameter List,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The method has 5 parameters.
Long Statement,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Get,The length of the statement  "		webRequest.Headers.Add (string.Format ("Authorization: Basic {0}"' Convert.ToBase64String (Encoding.ASCII.GetBytes (string.Format ("{0}:{1}"' credentials.UserName' credentials.Password))))); " is 190.
Long Statement,IdSharp.Common.Utils,MathUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\MathUtils.cs,IsNumericType,The length of the statement  "	return (type == typeof(int) || type == typeof(int?) || type == typeof(long) || type == typeof(long?) || type == typeof(short) || type == typeof(short?) || type == typeof(float) || type == typeof(float?) || type == typeof(double) || type == typeof(double?) || type == typeof(uint) || type == typeof(uint?) || type == typeof(ulong) || type == typeof(ulong?) || type == typeof(ushort) || type == typeof(ushort?) || type == typeof(decimal) || type == typeof(decimal?)); " is 465.
Long Statement,IdSharp.Common.Utils,StreamUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\StreamUtils.cs,Read,The length of the statement  "		string msg = string.Format ("Attempted to read past the end of the stream when requesting {0} bytes at position {1}"' count' stream.Position); " is 142.
Long Statement,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The length of the statement  "	outLen += decodeLastBlock (outStream' (char)data [end - 4]' (char)data [end - 3]' (char)data [end - 2]' (char)data [end - 1]); " is 126.
Magic Number,IdSharp.Common.Utils,ByteUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\ByteUtils.cs,ConvertToInt64,The following statement contains a magic number: for (int i = 0; i < byteArray.Length; i++) {  	value <<= 8;  	value += byteArray [i];  }  
Magic Number,IdSharp.Common.Utils,ByteUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\ByteUtils.cs,ConvertToInt64,The following statement contains a magic number: value <<= 8;  
Magic Number,IdSharp.Common.Utils,ByteUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\ByteUtils.cs,IsBitSet,The following statement contains a magic number: if (bitToCheck > 7) {  	throw new ArgumentOutOfRangeException ("bitToCheck"' bitToCheck' "bitToCheck must be <= 7");  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CRC32,The following statement contains a magic number: unchecked {  	// This is the official polynomial used by CRC32 in PKZip.  	// Often the polynomial is shown reversed as 0x04C11DB7.  	const uint dwPolynomial = 0xEDB88320;  	for (uint i = 0; i < 256; i++) {  		uint dwCrc = i;  		for (uint j = 8; j > 0; j--) {  			if ((dwCrc & 1) == 1)  				dwCrc = (dwCrc >> 1) ^ dwPolynomial;  			else  				dwCrc >>= 1;  		}  		crc32Table [i] = dwCrc;  	}  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CRC32,The following statement contains a magic number: unchecked {  	// This is the official polynomial used by CRC32 in PKZip.  	// Often the polynomial is shown reversed as 0x04C11DB7.  	const uint dwPolynomial = 0xEDB88320;  	for (uint i = 0; i < 256; i++) {  		uint dwCrc = i;  		for (uint j = 8; j > 0; j--) {  			if ((dwCrc & 1) == 1)  				dwCrc = (dwCrc >> 1) ^ dwPolynomial;  			else  				dwCrc >>= 1;  		}  		crc32Table [i] = dwCrc;  	}  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CRC32,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	uint dwCrc = i;  	for (uint j = 8; j > 0; j--) {  		if ((dwCrc & 1) == 1)  			dwCrc = (dwCrc >> 1) ^ dwPolynomial;  		else  			dwCrc >>= 1;  	}  	crc32Table [i] = dwCrc;  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CRC32,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	uint dwCrc = i;  	for (uint j = 8; j > 0; j--) {  		if ((dwCrc & 1) == 1)  			dwCrc = (dwCrc >> 1) ^ dwPolynomial;  		else  			dwCrc >>= 1;  	}  	crc32Table [i] = dwCrc;  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CRC32,The following statement contains a magic number: for (uint j = 8; j > 0; j--) {  	if ((dwCrc & 1) == 1)  		dwCrc = (dwCrc >> 1) ^ dwPolynomial;  	else  		dwCrc >>= 1;  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CalculateInt32,The following statement contains a magic number: unchecked {  	stream.Position = 0;  	uint crc32Result = 0xFFFFFFFF;  	byte[] buffer = new byte[BUFFER_SIZE];  	int count = stream.Read (buffer' 0' BUFFER_SIZE);  	while (count > 0) {  		for (int i = 0; i < count; i++) {  			crc32Result = ((crc32Result) >> 8) ^ crc32Table [(buffer [i]) ^ ((crc32Result) & 0x000000FF)];  		}  		count = stream.Read (buffer' 0' BUFFER_SIZE);  	}  	return ~crc32Result;  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CalculateInt32,The following statement contains a magic number: while (count > 0) {  	for (int i = 0; i < count; i++) {  		crc32Result = ((crc32Result) >> 8) ^ crc32Table [(buffer [i]) ^ ((crc32Result) & 0x000000FF)];  	}  	count = stream.Read (buffer' 0' BUFFER_SIZE);  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CalculateInt32,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	crc32Result = ((crc32Result) >> 8) ^ crc32Table [(buffer [i]) ^ ((crc32Result) & 0x000000FF)];  }  
Magic Number,IdSharp.Common.Utils,CRC32,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\CRC32.cs,CalculateInt32,The following statement contains a magic number: crc32Result = ((crc32Result) >> 8) ^ crc32Table [(buffer [i]) ^ ((crc32Result) & 0x000000FF)];  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Get,The following statement contains a magic number: using (Stream responseStream = webResponse.GetResponseStream ()) {  	using (MemoryStream memoryStream = new MemoryStream ()) {  		int read;  		do {  			read = responseStream.Read (data' 0' 256);  			memoryStream.Write (data' 0' read);  		} while (read > 0);  		data = memoryStream.ToArray ();  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Get,The following statement contains a magic number: using (MemoryStream memoryStream = new MemoryStream ()) {  	int read;  	do {  		read = responseStream.Read (data' 0' 256);  		memoryStream.Write (data' 0' read);  	} while (read > 0);  	data = memoryStream.ToArray ();  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Get,The following statement contains a magic number: do {  	read = responseStream.Read (data' 0' 256);  	memoryStream.Write (data' 0' read);  } while (read > 0);  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Get,The following statement contains a magic number: read = responseStream.Read (data' 0' 256);  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Post,The following statement contains a magic number: using (Stream responseStream = webResponse.GetResponseStream ()) {  	data = new byte[256];  	using (MemoryStream memoryStream = new MemoryStream ()) {  		int read;  		do {  			read = responseStream.Read (data' 0' 256);  			memoryStream.Write (data' 0' read);  		} while (read > 0);  		data = memoryStream.ToArray ();  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Post,The following statement contains a magic number: using (Stream responseStream = webResponse.GetResponseStream ()) {  	data = new byte[256];  	using (MemoryStream memoryStream = new MemoryStream ()) {  		int read;  		do {  			read = responseStream.Read (data' 0' 256);  			memoryStream.Write (data' 0' read);  		} while (read > 0);  		data = memoryStream.ToArray ();  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Post,The following statement contains a magic number: data = new byte[256];  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Post,The following statement contains a magic number: using (MemoryStream memoryStream = new MemoryStream ()) {  	int read;  	do {  		read = responseStream.Read (data' 0' 256);  		memoryStream.Write (data' 0' read);  	} while (read > 0);  	data = memoryStream.ToArray ();  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Post,The following statement contains a magic number: do {  	read = responseStream.Read (data' 0' 256);  	memoryStream.Write (data' 0' read);  } while (read > 0);  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,Post,The following statement contains a magic number: read = responseStream.Read (data' 0' 256);  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,PostCookies,The following statement contains a magic number: using (Stream responseStream = webResponse.GetResponseStream ()) {  	data = new byte[256];  	using (MemoryStream memoryStream = new MemoryStream ()) {  		int read;  		do {  			read = responseStream.Read (data' 0' 256);  			memoryStream.Write (data' 0' read);  		} while (read > 0);  		data = memoryStream.ToArray ();  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,PostCookies,The following statement contains a magic number: using (Stream responseStream = webResponse.GetResponseStream ()) {  	data = new byte[256];  	using (MemoryStream memoryStream = new MemoryStream ()) {  		int read;  		do {  			read = responseStream.Read (data' 0' 256);  			memoryStream.Write (data' 0' read);  		} while (read > 0);  		data = memoryStream.ToArray ();  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,PostCookies,The following statement contains a magic number: data = new byte[256];  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,PostCookies,The following statement contains a magic number: using (MemoryStream memoryStream = new MemoryStream ()) {  	int read;  	do {  		read = responseStream.Read (data' 0' 256);  		memoryStream.Write (data' 0' read);  	} while (read > 0);  	data = memoryStream.ToArray ();  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,PostCookies,The following statement contains a magic number: do {  	read = responseStream.Read (data' 0' 256);  	memoryStream.Write (data' 0' read);  } while (read > 0);  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,PostCookies,The following statement contains a magic number: read = responseStream.Read (data' 0' 256);  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,AddField,The following statement contains a magic number: foreach (char c in postData.Value) {  	if (c <= 255) {  		if (c < 128 && c != '&' && c != ' ') {  			value.Append (c);  		} else {  			value.Append (string.Format ("%{0:X2}"' (int)c));  		}  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,AddField,The following statement contains a magic number: foreach (char c in postData.Value) {  	if (c <= 255) {  		if (c < 128 && c != '&' && c != ' ') {  			value.Append (c);  		} else {  			value.Append (string.Format ("%{0:X2}"' (int)c));  		}  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,AddField,The following statement contains a magic number: if (c <= 255) {  	if (c < 128 && c != '&' && c != ' ') {  		value.Append (c);  	} else {  		value.Append (string.Format ("%{0:X2}"' (int)c));  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,AddField,The following statement contains a magic number: if (c <= 255) {  	if (c < 128 && c != '&' && c != ' ') {  		value.Append (c);  	} else {  		value.Append (string.Format ("%{0:X2}"' (int)c));  	}  }  
Magic Number,IdSharp.Common.Utils,Http,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\Http.cs,AddField,The following statement contains a magic number: if (c < 128 && c != '&' && c != ' ') {  	value.Append (c);  } else {  	value.Append (string.Format ("%{0:X2}"' (int)c));  }  
Magic Number,IdSharp.Common.Utils,PathUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\PathUtils.cs,GetTemporaryFileNameBasedOnFileName,The following statement contains a magic number: do {  	for (int i = 0; i < randomBytes.Length; i++) {  		randomBytes [i] = (byte)rnd.Next (65' 91);  	}  	string randomString = Encoding.ASCII.GetString (randomBytes);  	tempFile = string.Format ("{0}.{1}.tmp"' baseFileName' randomString);  } while (File.Exists (tempFile));  
Magic Number,IdSharp.Common.Utils,PathUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\PathUtils.cs,GetTemporaryFileNameBasedOnFileName,The following statement contains a magic number: do {  	for (int i = 0; i < randomBytes.Length; i++) {  		randomBytes [i] = (byte)rnd.Next (65' 91);  	}  	string randomString = Encoding.ASCII.GetString (randomBytes);  	tempFile = string.Format ("{0}.{1}.tmp"' baseFileName' randomString);  } while (File.Exists (tempFile));  
Magic Number,IdSharp.Common.Utils,PathUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\PathUtils.cs,GetTemporaryFileNameBasedOnFileName,The following statement contains a magic number: for (int i = 0; i < randomBytes.Length; i++) {  	randomBytes [i] = (byte)rnd.Next (65' 91);  }  
Magic Number,IdSharp.Common.Utils,PathUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\PathUtils.cs,GetTemporaryFileNameBasedOnFileName,The following statement contains a magic number: for (int i = 0; i < randomBytes.Length; i++) {  	randomBytes [i] = (byte)rnd.Next (65' 91);  }  
Magic Number,IdSharp.Common.Utils,PathUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\PathUtils.cs,GetTemporaryFileNameBasedOnFileName,The following statement contains a magic number: randomBytes [i] = (byte)rnd.Next (65' 91);  
Magic Number,IdSharp.Common.Utils,PathUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\PathUtils.cs,GetTemporaryFileNameBasedOnFileName,The following statement contains a magic number: randomBytes [i] = (byte)rnd.Next (65' 91);  
Magic Number,IdSharp.Common.Utils,StreamUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\StreamUtils.cs,ReadInt16,The following statement contains a magic number: if (bytesLeft < 2) {  	string msg = string.Format ("Attempted to read past the end of the stream at position {0}"' stream.Position);  	throw new InvalidDataException (msg);  }  
Magic Number,IdSharp.Common.Utils,StreamUtils,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\StreamUtils.cs,ReadInt16,The following statement contains a magic number: bytesLeft -= 2;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: for (int i = off; i < off + dataLength; i += 3) {  	a1 = data [i] & 0xff;  	a2 = data [i + 1] & 0xff;  	a3 = data [i + 2] & 0xff;  	outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  	outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  	outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  	outStream.WriteByte (encodingTable [a3 & 0x3f]);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: for (int i = off; i < off + dataLength; i += 3) {  	a1 = data [i] & 0xff;  	a2 = data [i + 1] & 0xff;  	a3 = data [i + 2] & 0xff;  	outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  	outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  	outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  	outStream.WriteByte (encodingTable [a3 & 0x3f]);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: for (int i = off; i < off + dataLength; i += 3) {  	a1 = data [i] & 0xff;  	a2 = data [i + 1] & 0xff;  	a3 = data [i + 2] & 0xff;  	outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  	outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  	outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  	outStream.WriteByte (encodingTable [a3 & 0x3f]);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: for (int i = off; i < off + dataLength; i += 3) {  	a1 = data [i] & 0xff;  	a2 = data [i + 1] & 0xff;  	a3 = data [i + 2] & 0xff;  	outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  	outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  	outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  	outStream.WriteByte (encodingTable [a3 & 0x3f]);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: for (int i = off; i < off + dataLength; i += 3) {  	a1 = data [i] & 0xff;  	a2 = data [i + 1] & 0xff;  	a3 = data [i + 2] & 0xff;  	outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  	outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  	outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  	outStream.WriteByte (encodingTable [a3 & 0x3f]);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: for (int i = off; i < off + dataLength; i += 3) {  	a1 = data [i] & 0xff;  	a2 = data [i + 1] & 0xff;  	a3 = data [i + 2] & 0xff;  	outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  	outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  	outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  	outStream.WriteByte (encodingTable [a3 & 0x3f]);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: for (int i = off; i < off + dataLength; i += 3) {  	a1 = data [i] & 0xff;  	a2 = data [i + 1] & 0xff;  	a3 = data [i + 2] & 0xff;  	outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  	outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  	outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  	outStream.WriteByte (encodingTable [a3 & 0x3f]);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: i += 3
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: a3 = data [i + 2] & 0xff;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: outStream.WriteByte (encodingTable [(int)((uint)a1 >> 2) & 0x3f]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: outStream.WriteByte (encodingTable [((a1 << 4) | (int)((uint)a2 >> 4)) & 0x3f]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: outStream.WriteByte (encodingTable [((a2 << 2) | (int)((uint)a3 >> 6)) & 0x3f]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: b1 = (d1 >> 2) & 0x3f;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: b2 = (d1 << 4) & 0x3f;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: b1 = (d1 >> 2) & 0x3f;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: b3 = (d2 << 2) & 0x3f;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following statement contains a magic number: return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	outLen += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	outLen += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	outLen += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	outLen += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	outLen += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	outLen += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outStream.WriteByte ((byte)((b3 << 6) | b4));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outLen += 3;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outLen += decodeLastBlock (outStream' (char)data [end - 4]' (char)data [end - 3]' (char)data [end - 2]' (char)data [end - 1]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outLen += decodeLastBlock (outStream' (char)data [end - 4]' (char)data [end - 3]' (char)data [end - 2]' (char)data [end - 1]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Decode,The following statement contains a magic number: outLen += decodeLastBlock (outStream' (char)data [end - 4]' (char)data [end - 3]' (char)data [end - 2]' (char)data [end - 1]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	length += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	length += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	length += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	length += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	length += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: while (i < finish) {  	b1 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b2 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b3 = decodingTable [data [i++]];  	i = nextI (data' i' finish);  	b4 = decodingTable [data [i++]];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	outStream.WriteByte ((byte)((b3 << 6) | b4));  	length += 3;  	i = nextI (data' i' finish);  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: outStream.WriteByte ((byte)((b3 << 6) | b4));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: length += 3;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: length += decodeLastBlock (outStream' data [end - 4]' data [end - 3]' data [end - 2]' data [end - 1]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: length += decodeLastBlock (outStream' data [end - 4]' data [end - 3]' data [end - 2]' data [end - 1]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,DecodeString,The following statement contains a magic number: length += decodeLastBlock (outStream' data [end - 4]' data [end - 3]' data [end - 2]' data [end - 1]);  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: if (c3 == padding) {  	byte b1 = decodingTable [c1];  	byte b2 = decodingTable [c2];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	return 1;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: if (c3 == padding) {  	byte b1 = decodingTable [c1];  	byte b2 = decodingTable [c2];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	return 1;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: if (c4 == padding) {  	byte b1 = decodingTable [c1];  	byte b2 = decodingTable [c2];  	byte b3 = decodingTable [c3];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	return 2;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: if (c4 == padding) {  	byte b1 = decodingTable [c1];  	byte b2 = decodingTable [c2];  	byte b3 = decodingTable [c3];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	return 2;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: if (c4 == padding) {  	byte b1 = decodingTable [c1];  	byte b2 = decodingTable [c2];  	byte b3 = decodingTable [c3];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	return 2;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: if (c4 == padding) {  	byte b1 = decodingTable [c1];  	byte b2 = decodingTable [c2];  	byte b3 = decodingTable [c3];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	return 2;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: if (c4 == padding) {  	byte b1 = decodingTable [c1];  	byte b2 = decodingTable [c2];  	byte b3 = decodingTable [c3];  	outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  	outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  	return 2;  }  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: return 2;  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b1 << 2) | (b2 >> 4)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b2 << 4) | (b3 >> 2)));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: outStream.WriteByte ((byte)((b3 << 6) | b4));  
Magic Number,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,decodeLastBlock,The following statement contains a magic number: return 3;  
Missing Default,Org.BouncyCastle.Utilities.Encoders,Base64Encoder,F:\newReposMay17\judwhite_IdSharp\IdSharp.Common\Utils\BouncyCastle\Base64Encoder.cs,Encode,The following switch statement is missing a default case: switch (modulus) {  case 0:  	/* nothing left to do */break;  case 1:  	d1 = data [off + dataLength] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = (d1 << 4) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (padding);  	outStream.WriteByte (padding);  	break;  case 2:  	d1 = data [off + dataLength] & 0xff;  	d2 = data [off + dataLength + 1] & 0xff;  	b1 = (d1 >> 2) & 0x3f;  	b2 = ((d1 << 4) | (d2 >> 4)) & 0x3f;  	b3 = (d2 << 2) & 0x3f;  	outStream.WriteByte (encodingTable [b1]);  	outStream.WriteByte (encodingTable [b2]);  	outStream.WriteByte (encodingTable [b3]);  	outStream.WriteByte (padding);  	break;  }  
