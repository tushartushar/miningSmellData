Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The method has 178 lines of code.
Long Parameter List,MatterHackers.Agg,spiral,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,spiral,The method has 6 parameters. Parameters: x' y' r1' r2' step' start_angle
Virtual Method Call from Constructor,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,PolygonClippingDemo,The constructor "PolygonClippingDemo" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,PolygonClippingDemo,The constructor "PolygonClippingDemo" calls a virtual method "AddChild".
Magic Number,MatterHackers.Agg,GreatBritanPathStorage,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\GreatBritanPathStorage.cs,Make,The following statement contains a magic number: for (int i = 1; i < poly1.Length / 2; i++)  			{  				ps.LineTo(poly1[i * 2 + 0]' poly1[i * 2 + 1]);  			}
Magic Number,MatterHackers.Agg,GreatBritanPathStorage,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\GreatBritanPathStorage.cs,Make,The following statement contains a magic number: for (int i = 1; i < poly1.Length / 2; i++)  			{  				ps.LineTo(poly1[i * 2 + 0]' poly1[i * 2 + 1]);  			}
Magic Number,MatterHackers.Agg,GreatBritanPathStorage,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\GreatBritanPathStorage.cs,Make,The following statement contains a magic number: for (int i = 1; i < poly1.Length / 2; i++)  			{  				ps.LineTo(poly1[i * 2 + 0]' poly1[i * 2 + 1]);  			}
Magic Number,MatterHackers.Agg,GreatBritanPathStorage,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\GreatBritanPathStorage.cs,Make,The following statement contains a magic number: for (int i = 1; i < poly2.Length / 2; i++)  			{  				ps.LineTo(poly2[i * 2 + 0]' poly2[i * 2 + 1]);  			}
Magic Number,MatterHackers.Agg,GreatBritanPathStorage,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\GreatBritanPathStorage.cs,Make,The following statement contains a magic number: for (int i = 1; i < poly2.Length / 2; i++)  			{  				ps.LineTo(poly2[i * 2 + 0]' poly2[i * 2 + 1]);  			}
Magic Number,MatterHackers.Agg,GreatBritanPathStorage,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\GreatBritanPathStorage.cs,Make,The following statement contains a magic number: for (int i = 1; i < poly2.Length / 2; i++)  			{  				ps.LineTo(poly2[i * 2 + 0]' poly2[i * 2 + 1]);  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,PolygonClippingDemo,The following statement contains a magic number: m_operation.SelectedIndex = 2;
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,PolygonClippingDemo,The following statement contains a magic number: m_polygons.SelectedIndex = 3;
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following statement contains a magic number: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,CreateAndRenderCombined,The following statement contains a magic number: switch (m_operation.SelectedIndex)  			{  				case 1:  					combined = CombinePaths(ps1' ps2' ClipType.ctUnion);  					break;    				case 2:  					combined = CombinePaths(ps1' ps2' ClipType.ctIntersection);  					break;    				case 3:  					combined = CombinePaths(ps1' ps2' ClipType.ctXor);  					break;    				case 4:  					combined = CombinePaths(ps1' ps2' ClipType.ctDifference);  					break;    				case 5:  					combined = CombinePaths(ps2' ps1' ClipType.ctDifference);  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,CreateAndRenderCombined,The following statement contains a magic number: switch (m_operation.SelectedIndex)  			{  				case 1:  					combined = CombinePaths(ps1' ps2' ClipType.ctUnion);  					break;    				case 2:  					combined = CombinePaths(ps1' ps2' ClipType.ctIntersection);  					break;    				case 3:  					combined = CombinePaths(ps1' ps2' ClipType.ctXor);  					break;    				case 4:  					combined = CombinePaths(ps1' ps2' ClipType.ctDifference);  					break;    				case 5:  					combined = CombinePaths(ps2' ps1' ClipType.ctDifference);  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,CreateAndRenderCombined,The following statement contains a magic number: switch (m_operation.SelectedIndex)  			{  				case 1:  					combined = CombinePaths(ps1' ps2' ClipType.ctUnion);  					break;    				case 2:  					combined = CombinePaths(ps1' ps2' ClipType.ctIntersection);  					break;    				case 3:  					combined = CombinePaths(ps1' ps2' ClipType.ctXor);  					break;    				case 4:  					combined = CombinePaths(ps1' ps2' ClipType.ctDifference);  					break;    				case 5:  					combined = CombinePaths(ps2' ps1' ClipType.ctDifference);  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,CreateAndRenderCombined,The following statement contains a magic number: switch (m_operation.SelectedIndex)  			{  				case 1:  					combined = CombinePaths(ps1' ps2' ClipType.ctUnion);  					break;    				case 2:  					combined = CombinePaths(ps1' ps2' ClipType.ctIntersection);  					break;    				case 3:  					combined = CombinePaths(ps1' ps2' ClipType.ctXor);  					break;    				case 4:  					combined = CombinePaths(ps1' ps2' ClipType.ctDifference);  					break;    				case 5:  					combined = CombinePaths(ps2' ps1' ClipType.ctDifference);  					break;  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,CreateAndRenderCombined,The following statement contains a magic number: if (combined != null)  			{  				graphics2D.Render(combined' new RGBA_Floats(0.5' 0.0' 0' 0.5).GetAsRGBA_Bytes());  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,CreateAndRenderCombined,The following statement contains a magic number: if (combined != null)  			{  				graphics2D.Render(combined' new RGBA_Floats(0.5' 0.0' 0' 0.5).GetAsRGBA_Bytes());  			}
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,OnBoundsChanged,The following statement contains a magic number: m_x = Width / 2.0;
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,OnBoundsChanged,The following statement contains a magic number: m_y = Height / 2.0;
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1330.599999999999909' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1330.599999999999909' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1377.400000000000091' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1377.400000000000091' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1298.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1298.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1393.000000000000000' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1393.000000000000000' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1344.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1344.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1346.200000000000045' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1346.200000000000045' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1330.599999999999909' 1329.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1330.599999999999909' 1329.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1330.599999999999909' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1330.599999999999909' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1377.400000000000091' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1377.400000000000091' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1251.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1251.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1393.000000000000000' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1393.000000000000000' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1204.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1361.799999999999955' 1204.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1346.200000000000045' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1346.200000000000045' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1330.599999999999909' 1220.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1330.599999999999909' 1220.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1315.000000000000000' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1315.000000000000000' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1315.000000000000000' 1329.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1315.000000000000000' 1329.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1299.400000000000091' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1299.400000000000091' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1344.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1344.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1252.599999999999909' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1252.599999999999909' 1313.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1298.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1298.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1268.200000000000045' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1268.200000000000045' 1282.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1268.200000000000045' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.MoveTo(1268.200000000000045' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1315.000000000000000' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1315.000000000000000' 1266.799999999999955);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1315.000000000000000' 1220.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1315.000000000000000' 1220.000000000000000);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1299.400000000000091' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1299.400000000000091' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1204.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1204.399999999999864);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1252.599999999999909' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1252.599999999999909' 1235.599999999999909);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1251.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,make_arrows,The following statement contains a magic number: ps.LineTo(1283.799999999999955' 1251.200000000000045);
Magic Number,MatterHackers.Agg,PolygonClippingFactory,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  			"Clipping"'  			"PolygonClipping"'  			"Demonstration of general polygon clipping using the clipper library."'  			640'  			520);
Magic Number,MatterHackers.Agg,PolygonClippingFactory,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  			"Clipping"'  			"PolygonClipping"'  			"Demonstration of general polygon clipping using the clipper library."'  			640'  			520);
Magic Number,MatterHackers.Agg,spiral,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,spiral,The following statement contains a magic number: m_da = agg_basics.deg2rad(4.0);
Magic Number,MatterHackers.Agg,spiral,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,spiral,The following statement contains a magic number: m_dr = m_step / 90.0;
Missing Default,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,render_gpc,The following switch statement is missing a default case: switch (m_polygons.SelectedIndex)  			{  				case 0:  					{  						//------------------------------------  						// Two simple paths  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220' y + 222);  						ps1.LineTo(x + 363' y + 249);  						ps1.LineTo(x + 265' y + 331);    						ps1.MoveTo(x + 242' y + 243);  						ps1.LineTo(x + 268' y + 309);  						ps1.LineTo(x + 325' y + 261);    						ps1.MoveTo(x + 259' y + 259);  						ps1.LineTo(x + 273' y + 288);  						ps1.LineTo(x + 298' y + 266);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(ps2' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' ps2);  					}  					break;    				case 1:  					{  						//------------------------------------  						// Closed stroke  						//  						PathStorage ps1 = new PathStorage();  						PathStorage ps2 = new PathStorage();  						Stroke stroke = new Stroke(ps2);  						stroke.width(10.0);    						double x = m_x - Width / 2 + 100;  						double y = m_y - Height / 2 + 100;  						ps1.MoveTo(x + 140' y + 145);  						ps1.LineTo(x + 225' y + 44);  						ps1.LineTo(x + 296' y + 219);  						ps1.ClosePolygon();    						ps1.LineTo(x + 226' y + 289);  						ps1.LineTo(x + 82' y + 292);    						ps1.MoveTo(x + 220 - 50' y + 222);  						ps1.LineTo(x + 265 - 50' y + 331);  						ps1.LineTo(x + 363 - 50' y + 249);  						ps1.close_polygon(ShapePath.FlagsAndCommand.FlagCCW);    						ps2.MoveTo(100 + 32' 100 + 77);  						ps2.LineTo(100 + 473' 100 + 263);  						ps2.LineTo(100 + 351' 100 + 290);  						ps2.LineTo(100 + 354' 100 + 374);  						ps2.ClosePolygon();    						graphics2D.Render(ps1' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());  						graphics2D.Render(stroke' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' ps1' stroke);  					}  					break;    				case 2:  					{  						//------------------------------------  						// Great Britain and Arrows  						//  						PathStorage gb_poly = new PathStorage();  						PathStorage arrows = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);  						make_arrows(arrows);    						Affine mtx1 = Affine.NewIdentity();  						Affine mtx2 = Affine.NewIdentity();  						mtx1 *= Affine.NewTranslation(-1150' -1150);  						mtx1 *= Affine.NewScaling(2.0);    						mtx2 = mtx1;  						mtx2 *= Affine.NewTranslation(m_x - Width / 2' m_y - Height / 2);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx1);  						VertexSourceApplyTransform trans_arrows = new VertexSourceApplyTransform(arrows' mtx2);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.Width = 0.1;  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(trans_arrows' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' trans_arrows);  					}  					break;    				case 3:  					{  						//------------------------------------  						// Great Britain and a Spiral  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage gb_poly = new PathStorage();  						GreatBritanPathStorage.Make(gb_poly);    						Affine mtx = Affine.NewIdentity(); ;  						mtx *= Affine.NewTranslation(-1150' -1150);  						mtx *= Affine.NewScaling(2.0);    						VertexSourceApplyTransform trans_gb_poly = new VertexSourceApplyTransform(gb_poly' mtx);    						graphics2D.Render(trans_gb_poly' new RGBA_Floats(0.5' 0.5' 0' 0.1).GetAsRGBA_Bytes());    						Stroke stroke_gb_poly = new Stroke(trans_gb_poly);  						stroke_gb_poly.width(0.1);  						graphics2D.Render(stroke_gb_poly' new RGBA_Floats(0' 0' 0).GetAsRGBA_Bytes());    						graphics2D.Render(stroke' new RGBA_Floats(0.0' 0.5' 0.5' 0.1).GetAsRGBA_Bytes());    						CreateAndRenderCombined(graphics2D' trans_gb_poly' stroke);  					}  					break;    				case 4:  					{  						//------------------------------------  						// Spiral and glyph  						//  						spiral sp = new spiral(m_x' m_y' 10' 150' 30' 0.0);  						Stroke stroke = new Stroke(sp);  						stroke.width(15.0);    						PathStorage glyph = new PathStorage();  						glyph.MoveTo(28.47' 6.45);  						glyph.curve3(21.58' 1.12' 19.82' 0.29);  						glyph.curve3(17.19' -0.93' 14.21' -0.93);  						glyph.curve3(9.57' -0.93' 6.57' 2.25);  						glyph.curve3(3.56' 5.42' 3.56' 10.60);  						glyph.curve3(3.56' 13.87' 5.03' 16.26);  						glyph.curve3(7.03' 19.58' 11.99' 22.51);  						glyph.curve3(16.94' 25.44' 28.47' 29.64);  						glyph.LineTo(28.47' 31.40);  						glyph.curve3(28.47' 38.09' 26.34' 40.58);  						glyph.curve3(24.22' 43.07' 20.17' 43.07);  						glyph.curve3(17.09' 43.07' 15.28' 41.41);  						glyph.curve3(13.43' 39.75' 13.43' 37.60);  						glyph.LineTo(13.53' 34.77);  						glyph.curve3(13.53' 32.52' 12.38' 31.30);  						glyph.curve3(11.23' 30.08' 9.38' 30.08);  						glyph.curve3(7.57' 30.08' 6.42' 31.35);  						glyph.curve3(5.27' 32.62' 5.27' 34.81);  						glyph.curve3(5.27' 39.01' 9.57' 42.53);  						glyph.curve3(13.87' 46.04' 21.63' 46.04);  						glyph.curve3(27.59' 46.04' 31.40' 44.04);  						glyph.curve3(34.28' 42.53' 35.64' 39.31);  						glyph.curve3(36.52' 37.21' 36.52' 30.71);  						glyph.LineTo(36.52' 15.53);  						glyph.curve3(36.52' 9.13' 36.77' 7.69);  						glyph.curve3(37.01' 6.25' 37.57' 5.76);  						glyph.curve3(38.13' 5.27' 38.87' 5.27);  						glyph.curve3(39.65' 5.27' 40.23' 5.62);  						glyph.curve3(41.26' 6.25' 44.19' 9.18);  						glyph.LineTo(44.19' 6.45);  						glyph.curve3(38.72' -0.88' 33.74' -0.88);  						glyph.curve3(31.35' -0.88' 29.93' 0.78);  						glyph.curve3(28.52' 2.44' 28.47' 6.45);  						glyph.ClosePolygon();    						glyph.MoveTo(28.47' 9.62);  						glyph.LineTo(28.47' 26.66);  						glyph.curve3(21.09' 23.73' 18.95' 22.51);  						glyph.curve3(15.09' 20.36' 13.43' 18.02);  						glyph.curve3(11.77' 15.67' 11.77' 12.89);  						glyph.curve3(11.77' 9.38' 13.87' 7.06);  						glyph.curve3(15.97' 4.74' 18.70' 4.74);  						glyph.curve3(22.41' 4.74' 28.47' 9.62);  						glyph.ClosePolygon();    						Affine mtx = Affine.NewIdentity();  						mtx *= Affine.NewScaling(4.0);  						mtx *= Affine.NewTranslation(220' 200);  						VertexSourceApplyTransform trans = new VertexSourceApplyTransform(glyph' mtx);  						FlattenCurves curve = new FlattenCurves(trans);    						CreateAndRenderCombined(graphics2D' stroke' curve);    						graphics2D.Render(stroke' new RGBA_Floats(0' 0' 0' 0.1).GetAsRGBA_Bytes());    						graphics2D.Render(curve' new RGBA_Floats(0' 0.6' 0' 0.1).GetAsRGBA_Bytes());  					}  					break;  			}
Missing Default,MatterHackers.Agg,PolygonClippingDemo,C:\repos\MatterHackers_agg-sharp\examples\PolygonClipping\PolygonClipping.cs,CreateAndRenderCombined,The following switch statement is missing a default case: switch (m_operation.SelectedIndex)  			{  				case 1:  					combined = CombinePaths(ps1' ps2' ClipType.ctUnion);  					break;    				case 2:  					combined = CombinePaths(ps1' ps2' ClipType.ctIntersection);  					break;    				case 3:  					combined = CombinePaths(ps1' ps2' ClipType.ctXor);  					break;    				case 4:  					combined = CombinePaths(ps1' ps2' ClipType.ctDifference);  					break;    				case 5:  					combined = CombinePaths(ps2' ps1' ClipType.ctDifference);  					break;  			}
